<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Python获取本机IP地址和Mac地址</title>
    <link href="/python/ipaddress.html"/>
    <url>/python/ipaddress.html</url>
    
    <content type="html"><![CDATA[<h3 id="1、获取IP地址"><a href="#1、获取IP地址" class="headerlink" title="1、获取IP地址"></a>1、获取IP地址</h3><p>此方法在<code>Windows</code>和<code>Linux</code>下都适用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br><br><span class="hljs-keyword">with</span> socket.socket(socket.AF_INET, socket.SOCK_DGRAM) <span class="hljs-keyword">as</span> client:<br>    client.connect((<span class="hljs-string">&#x27;8.8.8.8&#x27;</span>, <span class="hljs-number">80</span>))<br>    ip = client.getsockname()[<span class="hljs-number">0</span>]<br>    <br></code></pre></td></tr></table></figure><h3 id="2、获取MAC地址"><a href="#2、获取MAC地址" class="headerlink" title="2、获取MAC地址"></a>2、获取MAC地址</h3><p>目前暂未找到合适的获取mac地址的方法，在一些博客上找到的都是不准确的</p><p>暂时采用第三方库 <code>getmac</code> 获取</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install getmac<br></code></pre></td></tr></table></figure><p>获取mac地址：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> getmac<br><br>getmac.get_mac_address()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Python使用ElementTree操作XML</title>
    <link href="/python/elementtree.html"/>
    <url>/python/elementtree.html</url>
    
    <content type="html"><![CDATA[<p>  本篇使用<code>xml.etree.ElementTree</code>模块进行xml文件的解析和创建。<code>ET</code>有两个主要的类用于xml的解析和构建-<code>ElementTree</code>将整个XML文档作为一棵树，<code>Element</code>代表树中的一个节点。</p><h3 id="一、解析XML"><a href="#一、解析XML" class="headerlink" title="一、解析XML"></a>一、解析XML</h3><p>示例 XML 文档：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">data</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">country</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Liechtenstein&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">rank</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">rank</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">year</span>&gt;</span>2008<span class="hljs-tag">&lt;/<span class="hljs-name">year</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">gdppc</span>&gt;</span>141100<span class="hljs-tag">&lt;/<span class="hljs-name">gdppc</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">neighbor</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Austria&quot;</span> <span class="hljs-attr">direction</span>=<span class="hljs-string">&quot;E&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">neighbor</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Switzerland&quot;</span> <span class="hljs-attr">direction</span>=<span class="hljs-string">&quot;W&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">country</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">country</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Singapore&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">rank</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">rank</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">year</span>&gt;</span>2011<span class="hljs-tag">&lt;/<span class="hljs-name">year</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">gdppc</span>&gt;</span>59900<span class="hljs-tag">&lt;/<span class="hljs-name">gdppc</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">neighbor</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Malaysia&quot;</span> <span class="hljs-attr">direction</span>=<span class="hljs-string">&quot;N&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">country</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">country</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Panama&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">rank</span>&gt;</span>68<span class="hljs-tag">&lt;/<span class="hljs-name">rank</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">year</span>&gt;</span>2011<span class="hljs-tag">&lt;/<span class="hljs-name">year</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">gdppc</span>&gt;</span>13600<span class="hljs-tag">&lt;/<span class="hljs-name">gdppc</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">neighbor</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Costa Rica&quot;</span> <span class="hljs-attr">direction</span>=<span class="hljs-string">&quot;W&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">neighbor</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Colombia&quot;</span> <span class="hljs-attr">direction</span>=<span class="hljs-string">&quot;E&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">country</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">data</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="1、从文件中解析XML文档"><a href="#1、从文件中解析XML文档" class="headerlink" title="1、从文件中解析XML文档"></a>1、从文件中解析XML文档</h4><p>使用<code>parse(file_name)</code>方法解析xml文件，<code>parse</code>返回<code>ElementTree</code>对象,使用<code>getroot()</code>获取根节点对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml">import xml.etree.ElementTree as ET<br><br>tree = ET.parse(xml文件全路径)<br>root = tree.getroot()<br>print(root.tag)<br></code></pre></td></tr></table></figure><h4 id="2、从字符串中解析XML文档"><a href="#2、从字符串中解析XML文档" class="headerlink" title="2、从字符串中解析XML文档"></a>2、从字符串中解析XML文档</h4><p><code>fromstring()</code>方法从一个字符串中解析xml对象，返回的对象为 <code>Element</code>，该对象为xml元素树的根(<code>root</code>)节点对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml">import xml.etree.ElementTree as ET<br><br>root = ET.fromstring(country_data_as_string)<br></code></pre></td></tr></table></figure><h4 id="3、解析带有命名空间-Namespace-的XML文档"><a href="#3、解析带有命名空间-Namespace-的XML文档" class="headerlink" title="3、解析带有命名空间(Namespace)的XML文档"></a>3、解析带有命名空间(Namespace)的XML文档</h4><p>如果xml文档有声明命名空间时，解析后的文档 标签(<code>tags</code>)和属性(<code>attributes</code>)都会添加一个前缀，前缀格式为<code>&#123;uri&#125;sometag</code>,其中<code>uri</code>为完整的<code>namespace</code>地址，在进行元素的操作时都需要添加前缀(<code>prefix</code>)</p><p>在如下示例中包含两个命名空间，一个以前缀<code>fictional</code>开头，其他的采用默认命名空间</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">actors</span> <span class="hljs-attr">xmlns:fictional</span>=<span class="hljs-string">&quot;http://characters.example.com&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://people.example.com&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">actor</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>John Cleese<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">fictional:character</span>&gt;</span>Lancelot<span class="hljs-tag">&lt;/<span class="hljs-name">fictional:character</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">fictional:character</span>&gt;</span>Archie Leach<span class="hljs-tag">&lt;/<span class="hljs-name">fictional:character</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">actor</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">actor</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Eric Idle<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">fictional:character</span>&gt;</span>Sir Robin<span class="hljs-tag">&lt;/<span class="hljs-name">fictional:character</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">fictional:character</span>&gt;</span>Gunther<span class="hljs-tag">&lt;/<span class="hljs-name">fictional:character</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">fictional:character</span>&gt;</span>Commander Clement<span class="hljs-tag">&lt;/<span class="hljs-name">fictional:character</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">actor</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">actors</span>&gt;</span><br></code></pre></td></tr></table></figure><p>文档里解析与方法1或者方法2相同，区别在与解析后的文档对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml">root = ET.fromstring(xml_doc)<br>print(root.tag)<br><br>输出：&#123;http://people.example.com&#125;actors<br></code></pre></td></tr></table></figure><h3 id="二、元素查找"><a href="#二、元素查找" class="headerlink" title="二、元素查找"></a>二、元素查找</h3><h4 id="1、iter-tag-None"><a href="#1、iter-tag-None" class="headerlink" title="1、iter(tag&#x3D;None)"></a>1、iter(tag&#x3D;None)</h4><p>​使用当前元素作为根元素构建一颗迭代(<code>iterator</code>)树，会迭代当前元素及其所有子元素(包括非直接子元素)。如果<code>tag</code>不为<code>None</code>或者为<code>*</code>时，仅仅匹配元素的<code>tag</code>与当前传入的<code>tag</code>一致的对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"># 迭代所有元素<br>for e in element.iter(t ag=&#x27;*&#x27;):<br>print(e.tag)<br><br># 迭代所有 neighbor<br>for e in element.iter(tag=&#x27;neighbor&#x27;):<br>    print(e.attrib)<br><br><br></code></pre></td></tr></table></figure><h4 id="2、findall-match-namespaces-None"><a href="#2、findall-match-namespaces-None" class="headerlink" title="2、findall(match, namespaces&#x3D;None)"></a>2、findall(<em>match</em>, <em>namespaces&#x3D;None</em>)</h4><p>查找所有匹配的直接子元素，查询条件可以是标签名称(<code>tag name</code>)或者<code>xpath</code>。返回所有匹配元素列表<code>list</code>,元素顺序按照文档顺序排序。<code>namespace</code>是一个可选的条件，用于匹配包含命名空间的文档</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"># 查找文档根节点下所有的country<br>for e in element.findall(&#x27;country&#x27;):<br>print(e.attrib)<br><br><br></code></pre></td></tr></table></figure><h4 id="3、find-match-namespaces-None"><a href="#3、find-match-namespaces-None" class="headerlink" title="3、find(match, namespaces&#x3D;None)"></a>3、find(<em>match</em>, <em>namespaces&#x3D;None</em>)</h4><p>查找第一个符合条件的直接子元素，查询条件可以是标签名称(<code>tag name</code>)或者<code>xpath</code>。返回匹配的元素实例或者4<code>None</code>,元素顺序按照文档顺序排序。<code>namespace</code>是一个可选的条件，用于匹配包含命名空间的文档</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"># 查找第一个匹配的 country<br>first_element = element.find(&#x27;country&#x27;)<br>print(first_element.attrib)<br><br></code></pre></td></tr></table></figure><h4 id="4、get-key-default-None"><a href="#4、get-key-default-None" class="headerlink" title="4、get(key, default&#x3D;None)"></a>4、get(<em>key</em>, <em>default&#x3D;None</em>)</h4><p>根据<code>key</code>获取元素属性值，如果属性不存在返回一个默认值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"># 查找第一个匹配的 country<br>first_element = element.find(&#x27;country&#x27;)<br>print(first_element.attrib)<br><br># 查找 name 属性<br>first_element.get(&#x27;name&#x27;)<br><br># 查找不存在的属性<br>first_element.get(&#x27;haha&#x27;, default=&#x27;^_^&#x27;)<br></code></pre></td></tr></table></figure><h4 id="5、xpath"><a href="#5、xpath" class="headerlink" title="5、xpath"></a>5、xpath</h4><p><code>ElementTree</code>支持的<code>xpath</code>语法，以下示例从 <code>root</code>节点开始解析</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml">import xml.etree.ElementTree as ET<br><br>root = ET.fromstring(countrydata)<br></code></pre></td></tr></table></figure><table><thead><tr><th>语法</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td><code>tag</code></td><td>匹配所有与给定tag匹配的直接子元素。从<code>Python3.8</code>开始支持<code>*</code>: <code>&#123;namespace&#125;*</code>匹配给定命名空间下所有元素；<code>&#123;*&#125;spam</code>匹配所有<code>tag</code>名为<code>spam</code>的元素，前边命名空间可以为任意;<code>&#123;&#125;*</code>匹配未限定命名空间的元素</td><td><code>element.findall(&#39;country&#39;)</code><br><code>element.findall(&#39;&#123;&#125;*&#39;)</code></td></tr><tr><td><code>*</code></td><td>查找所有的子元素，包含注释和处理指令。例如<code>*/egg</code>匹配所有孙辈的<code>egg</code>元素</td><td>当前元素的所有直接子元素<code>element.findall(&#39;*&#39;)</code></td></tr><tr><td><code>.</code></td><td>查找当前元素节点。通常用于在相对路径中的起始节点</td><td>当前元素下所有的<code>year</code><br><code>element.findall(&#39;./country/year&#39;)</code></td></tr><tr><td><code>//</code></td><td>选择当前元素下所有级别上的所有子元素(可以跳过元素的层级查找)。例如<code>//egg</code>选择整个树中的所有<code>egg</code>元素</td><td><code>element.findall(&#39;.//rank&#39;)</code></td></tr><tr><td><code>..</code></td><td>选择父元素。如果路径试图到达起始元素（已调用元素find）的祖先，则返回None。</td><td>查找<code>rank</code>的父元素<code>element.findall(&#39;.//rank/..&#39;)</code></td></tr><tr><td><code>[@attrib]</code></td><td>选择具有给定属性的所有元素。</td><td>查找当前元素下所有包含direction属性的元素<code>element.findall(&#39;.//*[@direction]&#39;)</code></td></tr><tr><td><code>[@attrib=&#39;value&#39;]</code></td><td>选择给定属性具有给定值的所有元素。该值不能包含引号。</td><td>查找当前元素下所有包含direction属性且值等于E的元素<br><code>element.findall(&#39;.//*[@direction=&quot;E&quot;]&#39;</code></td></tr><tr><td><code>[@attrib!=&#39;value&#39;]</code></td><td>选择给定属性没有给定值的所有元素。该值不能包含引号。<br/>3.10版新增。</td><td>查找当前元素下所有包含direction属性且值不等于E的元素<br/><code>element.findall(&#39;.//*[@direction!=&quot;E&quot;]&#39;)</code></td></tr><tr><td><code>[tag]</code></td><td>选择具有名为tag的子元素的所有元素。只支持直系子女。</td><td>过滤子元素中包含<code>year</code>的<code>country</code>元素element.findall(‘.&#x2F;country&#x2F;[year]’)&#96;</td></tr><tr><td><code>[.=&#39;text&#39;]</code></td><td>选择其完整文本内容（包括子体）等于给定文本的所有元素。<br/><br/>在3.7版中新增。</td><td>过滤文本值为2011的<code>year</code>元素<code>element.findall(&#39;.//year[.=&quot;2011&quot;]&#39;)</code></td></tr><tr><td><code>[.!=&#39;text&#39;]</code></td><td>选择其完整文本内容（包括子体）不等于给定文本的所有元素。<br/><br/>3.10版新增。</td><td>过滤文本值不等于2011的<code>year</code>元素<code>element.findall(&#39;.//year[.!=&quot;2011&quot;]&#39;)</code></td></tr><tr><td><code>[tag=&#39;text&#39;]</code></td><td>选择所有元素，这些元素具有一个名为tag的子元素，该子元素的完整文本内容（包括子元素）等于给定的文本。</td><td>过滤子元素为<code>year</code>且<code>year</code>的文本值为2011的元素<br><code>element.findall(&#39;*/[year=&quot;2011&quot;]&#39;)</code></td></tr><tr><td><code>[tag!=&#39;text&#39;]</code></td><td>选择所有具有名为tag的子元素且其完整文本内容（包括子元素）不等于给定文本的元素。<br/><br/>3.10版新增。</td><td>过滤子元素为<code>year</code>且<code>year</code>的文本值不等于2011的元素<br/><code>element.findall(&#39;*/[year!=&quot;2011&quot;]&#39;)</code></td></tr><tr><td><code>[position]</code></td><td>选择位于给定位置的所有图元。位置可以是整数（1是第一个位置）、表达式last（）（表示最后一个位置）或相对于最后一个位置的位置（例如last（）-1）。</td><td>查找当前元素下第二个元素<code>element.findall(&#39;*[2]&#39;)[0].get(&#39;name&#39;)</code></td></tr></tbody></table><h3 id="三、修改XML文档"><a href="#三、修改XML文档" class="headerlink" title="三、修改XML文档"></a>三、修改XML文档</h3><p>初始文档：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&#x27;1.0&#x27; encoding=&#x27;utf-8&#x27;?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">grandparent</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--我是儿子a--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;a&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">child</span>&gt;</span>my father is a<span class="hljs-tag">&lt;/<span class="hljs-name">child</span>&gt;</span> <span class="hljs-comment">&lt;!--我是儿子b--&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;b&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">child</span>&gt;</span>my father is b<span class="hljs-tag">&lt;/<span class="hljs-name">child</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">grandparent</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="1、修改元素文本"><a href="#1、修改元素文本" class="headerlink" title="1、修改元素文本"></a>1、修改元素文本</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">first_child = root.find(<span class="hljs-string">&#x27;./parent/child&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;修改前：&#x27;</span>, first_child.text)<br>first_child.text = <span class="hljs-string">&#x27;我的父节点是a&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;修改后：&#x27;</span>, first_child.text)<br></code></pre></td></tr></table></figure><h4 id="2、修改已有元素属性"><a href="#2、修改已有元素属性" class="headerlink" title="2、修改已有元素属性"></a>2、修改已有元素属性</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">first_parent = root.find(<span class="hljs-string">&#x27;./parent&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;修改前name：&#x27;</span>, first_parent.get(<span class="hljs-string">&#x27;name&#x27;</span>))<br>first_parent.<span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;A&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;修改后name：&#x27;</span>, first_parent.get(<span class="hljs-string">&#x27;name&#x27;</span>))<br></code></pre></td></tr></table></figure><h4 id="3、新增属性"><a href="#3、新增属性" class="headerlink" title="3、新增属性"></a>3、新增属性</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">first_parent = root.find(<span class="hljs-string">&#x27;./parent&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;新增age前：&#x27;</span>, first_parent.get(<span class="hljs-string">&#x27;age&#x27;</span>))<br>first_parent.<span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;age&#x27;</span>, <span class="hljs-string">&#x27;18&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;新增age后：&#x27;</span>, first_parent.get(<span class="hljs-string">&#x27;age&#x27;</span>))<br></code></pre></td></tr></table></figure><h4 id="4、删除元素"><a href="#4、删除元素" class="headerlink" title="4、删除元素"></a>4、删除元素</h4><p>删除元素使用<code>remove()</code>方法需要传入一个 <code>Element</code>对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">first_parent.remove(first_parent.find(<span class="hljs-string">&#x27;./child&#x27;</span>))<br></code></pre></td></tr></table></figure><h3 id="四、构建XML文档"><a href="#四、构建XML文档" class="headerlink" title="四、构建XML文档"></a>四、构建XML文档</h3><p>使用<code>Element</code>构建根节点元素，不断使用<code>SubElement</code>组合构建子元素</p><p>所有的元素构建完成以后需要使用<code>ElementTree</code>创建一颗文档树，用于<code>XML</code>文件的生成</p><p>使用<code>Comment</code>生成文档注释，并使用<code>Element.append()</code>方法追加在想要的位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">root = Element(<span class="hljs-string">&#x27;grandparent&#x27;</span>)<br>comment_a = Comment(<span class="hljs-string">&#x27;我是儿子a&#x27;</span>)<br>root.append(comment_a)<br>parent = SubElement(root, <span class="hljs-string">&#x27;parent&#x27;</span>, attrib=&#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;a&quot;</span>&#125;)<br>child = SubElement(parent, <span class="hljs-string">&#x27;child&#x27;</span>)<br>child.text = <span class="hljs-string">&#x27;my father is a&#x27;</span><br>comment_b = Comment(<span class="hljs-string">&#x27;我是儿子b&#x27;</span>)<br>parent.append(comment_b)<br>parent_brother = SubElement(root, <span class="hljs-string">&#x27;parent&#x27;</span>, attrib=&#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;b&quot;</span>&#125;)<br>child_brother = SubElement(parent_brother, <span class="hljs-string">&#x27;child&#x27;</span>)<br>child_brother.text = <span class="hljs-string">&#x27;my father is b&#x27;</span><br><span class="hljs-comment"># 临时xml结构查看</span><br><span class="hljs-comment"># ET.dump(root)</span><br><br>tree = ET.ElementTree(root)<br><span class="hljs-comment"># xml_declaration 用于生成xml文档声明</span><br><span class="hljs-comment"># 将xml文档写入文件</span><br>tree.write(<span class="hljs-string">&#x27;test.xml&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>, xml_declaration=<span class="hljs-literal">True</span>, short_empty_elements=<span class="hljs-literal">True</span>)<br><br></code></pre></td></tr></table></figure><p>写入xml文档有两种方法：</p><ul><li><pre><code class="python">tree = ET.ElementTree(root)tree.write(&#39;test.xml&#39;, encoding=&#39;utf-8&#39;, xml_declaration=True, short_empty_elements=True)<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>* `ET.canonicalize(ET.dump(root))`<br><br>格式化输出XML对象到字符串：<br>默认输出的是一个`byte`类型字符串，可以修改`encoding=&#x27;unicode&#x27;`指定输出格式为字符串，`unicode`对应的字符编码为`cp936`;如果设置`encoding`非`unicode`都按照`byte`处理。<br>```python<br>ElementTree.tostring(element, encoding=&#x27;us-ascii&#x27;, method=&#x27;xml&#x27;, xml_declaration=None, default_namespace=None)<br></code></pre></td></tr></table></figure></code></pre></li></ul><h4 id="五、附录"><a href="#五、附录" class="headerlink" title="五、附录"></a>五、附录</h4><p><strong>Python3</strong>文档：<a href="https://docs.python.org/3/library/xml.etree.elementtree.html">https://docs.python.org/3/library/xml.etree.elementtree.html</a></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ElementTree</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PyCryptodome使用笔记</title>
    <link href="/python/pycryptodome.html"/>
    <url>/python/pycryptodome.html</url>
    
    <content type="html"><![CDATA[<h3 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install pycryptodome<br></code></pre></td></tr></table></figure><h3 id="二、包模块介绍"><a href="#二、包模块介绍" class="headerlink" title="二、包模块介绍"></a>二、包模块介绍</h3><table><thead><tr><th>包名</th><th>描述</th></tr></thead><tbody><tr><td><code>Crypto.Cipher</code></td><td>数据的加密、解密模块，例如 <code>AES</code></td></tr><tr><td><code>Crypto.Signature</code></td><td>数据的签名、验签</td></tr><tr><td><code>Crypto.Hash</code></td><td>消息摘要</td></tr><tr><td><code>Crypto.PublicKey</code></td><td>用于公钥的生成、导出和导入</td></tr><tr><td><code>Crypto.Random</code></td><td>用于生成随机数据</td></tr><tr><td><code>Crypto.Util</code></td><td>工具类，例如数据填充</td></tr></tbody></table><h4 id="1、Crypto-PublicKey"><a href="#1、Crypto-PublicKey" class="headerlink" title="1、Crypto.PublicKey"></a>1、Crypto.PublicKey</h4><p>用于公钥、私钥证书的生成以及证书格式转换(字符串)</p><p><code>pycryptodome</code>支持的Key类型：</p><ul><li><a href="https://www.pycryptodome.org/en/latest/src/public_key/rsa.html">RSA keys</a></li><li><a href="https://www.pycryptodome.org/en/latest/src/public_key/dsa.html">DSA keys</a></li><li><a href="https://www.pycryptodome.org/en/latest/src/public_key/ecc.html">Elliptic Curve keys</a></li></ul><p>在导入公钥、私钥时，需要进行格式填充</p><p><code>RSA</code>私钥文件结构：</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">-----BEGIN RSA <span class="hljs-keyword">PRIVATE</span> <span class="hljs-keyword">KEY</span>-----<br>私钥正文<br>-----<span class="hljs-keyword">END</span> RSA <span class="hljs-keyword">PRIVATE</span> <span class="hljs-keyword">KEY</span>-----<br></code></pre></td></tr></table></figure><p><code>RSA</code>公钥文件：</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">-----BEGIN <span class="hljs-keyword">PUBLIC</span> <span class="hljs-keyword">KEY</span>-----<br>公钥正文<br>-----<span class="hljs-keyword">END</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-keyword">KEY</span>-----<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 生成私钥、公钥</span><br><span class="hljs-comment"># bits指定生成的私钥文件大小</span><br><span class="hljs-comment"># passphrase指定私钥文件加密密码</span><br>key = RSA.generate(bits=<span class="hljs-number">2048</span>)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;private_key.pem&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> fp:<br>    fp.write(key.export_key(<span class="hljs-built_in">format</span>=<span class="hljs-string">&#x27;PEM&#x27;</span>, passphrase=<span class="hljs-string">&#x27;123456&#x27;</span>))<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;public_key.pem&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> fp:<br>    fp.write(key.publickey().export_key())<br>    <br><span class="hljs-comment"># 导入公钥、私钥文件</span><br>private_key_start = <span class="hljs-string">&#x27;-----BEGIN RSA PRIVATE KEY-----&#x27;</span><br>private_key_end = <span class="hljs-string">&#x27;-----END RSA PRIVATE KEY-----&#x27;</span><br>public_key_start = <span class="hljs-string">r&#x27;-----BEGIN PUBLIC KEY-----&#x27;</span><br>public_key_end = <span class="hljs-string">r&#x27;-----END PUBLIC KEY-----&#x27;</span><br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;private_key.pem&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> fp:<br>    pk = fp.read().decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> pk.startswith(private_key_start):<br>        pk = private_key_start + pk<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> pk.endswith(private_key_end):<br>            pk += private_key_end<br>            private_key = RSA.import_key(pk, passphrase=<span class="hljs-string">&#x27;123456&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="2、Crypto-Cipher"><a href="#2、Crypto-Cipher" class="headerlink" title="2、Crypto.Cipher"></a>2、Crypto.Cipher</h4><p><code>Cipher</code>模块用于数据的加密和解密</p><ul><li><p>对称算法：双方使用相同的密钥进行数据的加密和解密。对称加密的速度通常比较快，代表有 <code>AES</code>,<code>DES3</code></p></li><li><p>非对称算法</p><p>发送方和接收方使用不同的密钥。发送方使用公钥（非机密）加密，而接收方使用私钥（机密）解密。非对称密钥通常很慢。代表有 <code>PKCS#1 OAEP (RSA)</code></p></li></ul><p><code>pycryptodome</code>支持的算法：</p><ul><li><a href="https://www.pycryptodome.org/en/latest/src/cipher/des.html">Single DES</a> and <a href="https://www.pycryptodome.org/en/latest/src/cipher/des3.html">Triple DES</a> (block ciphers)</li><li><a href="https://www.pycryptodome.org/en/latest/src/cipher/arc2.html">RC2</a> (block cipher)</li><li><a href="https://www.pycryptodome.org/en/latest/src/cipher/arc4.html">ARC4</a> (stream cipher)</li><li><a href="https://www.pycryptodome.org/en/latest/src/cipher/blowfish.html">Blowfish</a> (block cipher)</li><li><a href="https://www.pycryptodome.org/en/latest/src/cipher/cast.html">CAST-128</a> (block cipher)</li><li><a href="https://www.pycryptodome.org/en/latest/src/cipher/pkcs1_v1_5.html">PKCS#1 v1.5 encryption (RSA)</a> (asymmetric cipher)</li></ul><h5 id="AES-Advanced-Encryption-Standard"><a href="#AES-Advanced-Encryption-Standard" class="headerlink" title="AES(Advanced Encryption Standard)"></a>AES(Advanced Encryption Standard)</h5><p><code>AES</code>具有16字节的固定数据块大小。它的密钥可以是128、192或256位(bit)长。</p><ul><li>使用ECB(Electronic Code Book)进行数据的加密解密：</li></ul><p>    <code>ECB</code>将加密的数据分成若干组，每组的大小跟加密密钥长度相同，然后每组都用相同的密钥进行加密。所以在加密的时候需要对明文数据进行填充保证数据的长度是密码长度的倍数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 数据加密</span><br>plain_text = <span class="hljs-string">b&#x27;hello&#x27;</span><br>key = get_random_bytes(<span class="hljs-number">16</span>)<br>cipher = AES.new(key, AES.MODE_ECB)<br>ct_bytes = cipher.encrypt(pad(plain_text, AES.block_size))<br>enc_data = base64.b64encode(ct_bytes).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><br><br><span class="hljs-comment">#数据解密</span><br>enc_data = <span class="hljs-string">&#x27;/zgUiJHvUyu1h+wr9evHCA==&#x27;</span><br>key = <span class="hljs-string">&#x27;dhcvKhdF3kwoXUjGTmK3Ww==&#x27;</span><br>cipher = AES.new(base64.b64decode(key), AES.MODE_ECB)<br>pad_plain_data = cipher.decrypt(base64.b64decode(enc_data))<br>plain_data = unpad(pad_plain_data, AES.block_size)<br><span class="hljs-built_in">print</span>(plain_data.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br></code></pre></td></tr></table></figure><ul><li><code>CBC</code>模式的加密首先也是将明文分成固定长度的块，然后将前面一个加密块输出的密文与下一个要加密的明文块进行异或操作，将计算结果再用密钥进行加密得到密文。第一明文块加密的时候，因为前面没有加密的密文，所以需要一个初始化向量。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 数据加密</span><br>plain_text = <span class="hljs-string">b&#x27;hello&#x27;</span><br>key = get_random_bytes(<span class="hljs-number">16</span>)<br><span class="hljs-comment"># 初始偏移量可以不指定，如果不指定非随机生成</span><br>iv = get_random_bytes(<span class="hljs-number">16</span>)<br>cipher = AES.new(key, AES.MODE_CBC, iv=iv)<br>ct_bytes = cipher.encrypt(pad(plain_text, AES.block_size))<br>enc_data = base64.b64encode(ct_bytes).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;加密密文==&#x27;</span>, enc_data)<br><br><span class="hljs-comment"># 数据解密</span><br>cipher = AES.new(key, AES.MODE_CBC, iv=iv)<br>pad_plain_data = cipher.decrypt(base64.b64decode(enc_data))<br>plain_text = unpad(pad_plain_data, AES.block_size).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;解密后明文==&#x27;</span>, plain_text)<br></code></pre></td></tr></table></figure><h5 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h5><p><code>RSA</code>加解密一般是公钥加密，私钥解密;<code>PyCryptodome</code>当前建议使用 <code>PKCS1_OAEP</code>算法；如果加解密双方为 <code>Python</code>与 <code>Java</code>且 <code>Java</code>端采用 <code>RSA/ECB/PKCS1Padding</code>时，<code>Python</code>端需要采用 <code>PKCS1_v1_5</code></p><p><strong>加解密模块为：</strong><code>Crypto.Cipher</code>模块</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">import base64<br><span class="hljs-built_in">from</span> Crypto.Cipher import PKCS1_OAEP, PKCS1_v1_5<br><span class="hljs-built_in">from</span> Crypto.PublicKey import RSA<br><br><span class="hljs-comment"># 数据加密--公钥</span><br>data = <span class="hljs-string">&quot;I met aliens in UFO. Here is the map.&quot;</span>.encode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;public_key.pem&#x27;</span>, mode=<span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> fp:<br>    <span class="hljs-comment"># 如果是读取字符串公钥需要补齐字符串格式</span><br>    public_key = RSA.import_key(fp.<span class="hljs-built_in">read</span>())<br>    cipher_rsa = PKCS1_v1_5.<span class="hljs-built_in">new</span>(public_key)<br>    <span class="hljs-comment">#cipher_rsa = PKCS1_OAEP.new(public_key)</span><br>    enc_data = cipher_rsa.<span class="hljs-built_in">encrypt</span>(data)<br>    print(base64.b64encode(enc_data).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    <br><span class="hljs-comment"># 数据解密--私钥</span><br>enc_data = <span class="hljs-string">&#x27;rDrJC9aaAmL5szCKzPy1peJ/Yx8noKuBEDFsUGSjDQgxRId3jgG9fAVuXpJnqRtHL+RXncOLuqRtKVowyt5H3Ag/KZm+7RJDeY7nT3AvgUiy0xfQgZChOW63BDoIMFIDZqXv5yPwqoMDT2Tz3Yj7FWYb5/0zbbFbJqwyA3knY2vUOFOp/YyqpZ7gzzyKjgAgi8pWgEDs2bXMirGIWA1McHFVdDfHF7Xi2s2Ob2oHylW7rJT9SXfQh0CPvWRxTstv6e8GWRQo4qYK/qGxqGQfLexSw2/o10DIAsYOxN9xubVKPLA+jXQchSH7Z/Js2g9t3WSI8027JXg//HTB5AO74A==&#x27;</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;private_key.pem&#x27;</span>, mode=<span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> fp:<br>    <span class="hljs-comment"># 如果是读取字符串公钥需要补齐字符串格式</span><br>    pk = RSA.import_key(fp.<span class="hljs-built_in">read</span>(), passphrase=<span class="hljs-string">&#x27;123456&#x27;</span>)<br>    cipher = PKCS1_v1_5.<span class="hljs-built_in">new</span>(pk)<br>    <span class="hljs-comment">#sentinel:当发生错误时返回对象</span><br>    plain_data_byte = cipher.<span class="hljs-built_in">decrypt</span>(base64.b64decode(enc_data), sentinel=<span class="hljs-string">&#x27;no&#x27;</span>)<br>    <span class="hljs-comment"># PKCS1_OAEP解密</span><br>    <span class="hljs-comment">#cipher = PKCS1_OAEP.new(pk)</span><br>    <span class="hljs-comment">#plain_data_byte = cipher.decrypt(base64.b64decode(enc_data))</span><br>    print(plain_data_byte.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><br></code></pre></td></tr></table></figure><h4 id="3、Crypto-Signature"><a href="#3、Crypto-Signature" class="headerlink" title="3、Crypto.Signature"></a>3、Crypto.Signature</h4><p><code>RSA</code>使用私钥签名，公钥验签；签名验签在 <code>Crypto.Signature</code>模块包提供</p><p><code>pycryptodome</code>支持的算法：</p><ul><li><a href="https://www.pycryptodome.org/en/latest/src/signature/pkcs1_v1_5.html">PKCS#1 v1.5 (RSA)</a></li><li><a href="https://www.pycryptodome.org/en/latest/src/signature/pkcs1_pss.html">PKCS#1 PSS (RSA)</a></li><li><a href="https://www.pycryptodome.org/en/latest/src/signature/dsa.html">Digital Signature Algorithm (DSA and ECDSA)</a></li></ul><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">from</span> Crypto.PublicKey <span class="hljs-keyword">import</span> RSA<br><span class="hljs-keyword">from</span> Crypto.Signature <span class="hljs-keyword">import</span> PKCS1_v1_5<br><br>plain_data = <span class="hljs-string">&quot;Hello, World!!&quot;</span><br><span class="hljs-keyword">with</span> open(<span class="hljs-string">&#x27;private_key.pem&#x27;</span>, mode=<span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> fp:<br>    <span class="hljs-comment"># 如果是读取字符串公钥需要补齐字符串格式</span><br>    private_key = RSA.import_key(fp.read(), passphrase=<span class="hljs-string">&#x27;123456&#x27;</span>)<br>    hash_data = SHA256.<span class="hljs-keyword">new</span>(plain_data.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    sign_data = PKCS1_v1_5.<span class="hljs-keyword">new</span>(private_key).sign(hash_data)<br>    <span class="hljs-built_in">print</span>(base64.b64encode(sign_data).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    <br><span class="hljs-comment"># 验签</span><br>plain_data = <span class="hljs-string">&quot;Hello, World!!&quot;</span><br>sign_data = <span class="hljs-string">&#x27;itVttV7vTzB8OoglNtuPn2PgpRzpZ3ILOnLWQDAqiOuQig9Whs0a6ht5P3oc1baUZ6PfVksSNzuPd8sNaR9eQeKkaSiuiJP11BJ8cugPuSyn&#x27;</span><br><span class="hljs-keyword">with</span> open(<span class="hljs-string">&#x27;public_key.pem&#x27;</span>, mode=<span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> fp:<br>    hash_data = SHA256.<span class="hljs-keyword">new</span>(plain_data.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    public_key = RSA.import_key(fp.read())<br>    try:<br>        PKCS1_v1_5.<span class="hljs-keyword">new</span>(public_key).verify(hash_data, signature=base64.b64decode(sign_data))<br>    except Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;验签失败&#x27;</span>, e)<br></code></pre></td></tr></table></figure><h4 id="4、Crypto-Hash"><a href="#4、Crypto-Hash" class="headerlink" title="4、Crypto.Hash"></a>4、Crypto.Hash</h4><p><code>Hash</code>模块主要用于消息摘要</p><p><code>pycryptodome</code>支持的算法：</p><ul><li><p>SHA-2 family (FIPS 180-4)</p><ul><li><a href="https://www.pycryptodome.org/en/latest/src/hash/sha224.html">SHA-224</a></li><li><a href="https://www.pycryptodome.org/en/latest/src/hash/sha256.html">SHA-256</a></li><li><a href="https://www.pycryptodome.org/en/latest/src/hash/sha384.html">SHA-384</a></li><li><a href="https://www.pycryptodome.org/en/latest/src/hash/sha512.html">SHA-512, SHA-512&#x2F;224, SHA-512&#x2F;256</a></li></ul></li><li><p>SHA-3 family (FIPS 202)</p><ul><li><a href="https://www.pycryptodome.org/en/latest/src/hash/sha3_224.html">SHA3-224</a></li><li><a href="https://www.pycryptodome.org/en/latest/src/hash/sha3_256.html">SHA3-256</a></li><li><a href="https://www.pycryptodome.org/en/latest/src/hash/sha3_384.html">SHA3-384</a></li><li><a href="https://www.pycryptodome.org/en/latest/src/hash/sha3_512.html">SHA3-512</a></li><li><a href="https://www.pycryptodome.org/en/latest/src/hash/tuplehash128.html">TupleHash128</a></li><li><a href="https://www.pycryptodome.org/en/latest/src/hash/tuplehash256.html">TupleHash256</a></li></ul></li><li><p>BLAKE2</p><ul><li><a href="https://www.pycryptodome.org/en/latest/src/hash/blake2s.html">BLAKE2s</a></li><li><a href="https://www.pycryptodome.org/en/latest/src/hash/blake2b.html">BLAKE2b</a></li></ul></li></ul><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">cal_hash256</span>(<span class="hljs-params">data: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    sha256计算</span><br><span class="hljs-string"></span><br><span class="hljs-string">    :param data: 需要计算hash值的文本字符串</span><br><span class="hljs-string"></span><br><span class="hljs-string">    :return 十六进制hash值</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> SHA256.new(data.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)).hexdigest()<br></code></pre></td></tr></table></figure><h3 id="三、参考"><a href="#三、参考" class="headerlink" title="三、参考"></a>三、参考</h3><p><a href="https://www.pycryptodome.org/en/latest/">https://www.pycryptodome.org/en/latest/</a></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PyCryptodome</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pytest 使用指南：从入门到测试报告</title>
    <link href="/python/pytest/tutorial.html"/>
    <url>/python/pytest/tutorial.html</url>
    
    <content type="html"><![CDATA[<h2 id="一、入门"><a href="#一、入门" class="headerlink" title="一、入门"></a>一、入门</h2><h3 id="1、安装pytest"><a href="#1、安装pytest" class="headerlink" title="1、安装pytest"></a>1、安装<code>pytest</code></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install -U pytest<br></code></pre></td></tr></table></figure><h3 id="2、简单使用"><a href="#2、简单使用" class="headerlink" title="2、简单使用"></a>2、简单使用</h3><p>编写测试用例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> x + <span class="hljs-number">1</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_answer</span>():<br>    <span class="hljs-keyword">assert</span> func(<span class="hljs-number">3</span>) == <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>执行用例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">pytest  -- 执行当前目录及其子目录下所有格式为 test_*.py或*_test.py 的文件<br>pytest 文件名称  -- 可以指定执行具体的测试模块<br></code></pre></td></tr></table></figure><h2 id="二、fixture的使用"><a href="#二、fixture的使用" class="headerlink" title="二、fixture的使用"></a>二、<code>fixture</code>的使用</h2><h3 id="1、fixture的定义"><a href="#1、fixture的定义" class="headerlink" title="1、fixture的定义"></a>1、<code>fixture</code>的定义</h3><p><code>fixture</code> 是 <code>pytest</code> 中用于提供测试数据、初始化环境、清理资源等功能的可重用代码块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@pytest.fixture</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">function_name</span>():<br>    paas<br></code></pre></td></tr></table></figure><p>常用参数：</p><ul><li><code>scope</code>: 作用域，支持的数据集为<code>function(默认)</code>,<code>class</code>,<code>module</code>,<code>session</code><ul><li>**<code>function</code>**：每个测试函数执行时创建和销毁 <code>fixture</code>，适用于需要独立测试环境的场景。</li><li>**<code>class</code>**：每个测试类执行时创建和销毁 <code>fixture</code>，适用于测试类内的测试方法共享资源的场景。</li><li>**<code>module</code>**：每个测试模块执行时创建和销毁 <code>fixture</code>，适用于测试模块内的测试共享资源的场景。</li><li>**<code>session</code>**：整个测试会话只创建和销毁一次 <code>fixture</code>，适用于全局资源的初始化和清理，如数据库连接、服务器启动等</li></ul></li><li><code>autouse</code>:当 <code>fixture</code> 的 <code>autouse</code> 参数设置为 <code>True</code> 时，<code>pytest</code> 会自动在每个符合作用域（<code>scope</code>）的测试函数执行前后调用该 <code>fixture</code>，而无需在测试函数的参数列表中指定该 <code>fixture</code> 的名称，不同的作用域下<code>autouse=True</code>的效果也不同<ul><li>**<code>function</code> **：每个测试函数执行前后都会调用该 <code>fixture</code>。</li><li>**<code>class</code> **：每个测试类中的所有测试方法执行前后调用一次该 <code>fixture</code>。</li><li>**<code>module</code> **：每个测试模块中的所有测试函数和测试方法执行前后调用一次该 <code>fixture</code>。</li><li>**<code>session **：整个测试会话（即所有测试模块）执行前后调用一次该 </code>fixture&#96;。</li></ul></li><li><code>name</code>:<code>fixture</code>的名称，默认不指定时，<code>fixture</code>的名称和函数名称相同</li></ul><h3 id="2、fixture的示例"><a href="#2、fixture的示例" class="headerlink" title="2、fixture的示例"></a>2、<code>fixture</code>的示例</h3><h4 id="2-1-显示引用"><a href="#2-1-显示引用" class="headerlink" title="2.1 显示引用"></a>2.1 显示引用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@pytest.fixture</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_one</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_simple_fixture</span>(<span class="hljs-params">get_one</span>):<br>    <span class="hljs-keyword">assert</span> <span class="hljs-number">1</span> == get_one<br></code></pre></td></tr></table></figure><h4 id="2-2-使用autouse"><a href="#2-2-使用autouse" class="headerlink" title="2.2 使用autouse"></a>2.2 使用<code>autouse</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@pytest.fixture(<span class="hljs-params">autouse=<span class="hljs-literal">True</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">setup_and_teardown</span>():<br>    logging.info(<span class="hljs-string">&quot;Setting up before test&quot;</span>)<br>    <span class="hljs-keyword">yield</span><br>    logging.info(<span class="hljs-string">&quot;Tearing down after test&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_function_1</span>():<br>    logging.info(<span class="hljs-string">&quot;Executing test function 1&quot;</span>)<br>    <span class="hljs-keyword">assert</span> <span class="hljs-literal">True</span><br><br><br>--执行日志如下：<br>--------------------------------------------------------------- live log setup ------------------------------------INFO     root:test_use_fixture.py:<span class="hljs-number">8</span> Setting up before test<br>--------------------------------------------------------------- live log call -------------------------------------INFO     root:test_use_fixture.py:<span class="hljs-number">14</span> Executing test function <span class="hljs-number">1</span><br>PASSED                [<span class="hljs-number">100</span>%]<br>------------------------------------------------------------- live log teardown -----------------------------------INFO     root:test_use_fixture.py:<span class="hljs-number">10</span> Tearing down after test<br></code></pre></td></tr></table></figure><h2 id="三、pytest-mark-parametrize的使用"><a href="#三、pytest-mark-parametrize的使用" class="headerlink" title="三、pytest.mark.parametrize的使用"></a>三、<code>pytest.mark.parametrize</code>的使用</h2><h3 id="1、定义"><a href="#1、定义" class="headerlink" title="1、定义"></a>1、定义</h3><p><code>pytest.mark.parametrize</code> 是 <code>pytest</code> 框架里用于参数化测试的一个装饰器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@pytest.mark.parametrize()</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">function_name</span>():<br>    paas<br></code></pre></td></tr></table></figure><p>参数：</p><ul><li><code>argnames</code>:字符串格式的参数名称</li><li><code>argvalues</code>:可迭代对象（像列表、元组等），其中包含了要传递给测试函数的参数值。如果 <code>argnames</code> 有多个参数名，<code>argvalues</code> 中的每个元素就应该是一个与参数名数量对应的元组。</li></ul><h3 id="2、示例"><a href="#2、示例" class="headerlink" title="2、示例"></a>2、示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">double</span>(<span class="hljs-params">num</span>):<br>    <span class="hljs-keyword">return</span> num * <span class="hljs-number">2</span><br><br><span class="hljs-meta">@pytest.mark.parametrize(<span class="hljs-params"><span class="hljs-string">&quot;input_num, expected&quot;</span>, [(<span class="hljs-params"><span class="hljs-number">1</span>, <span class="hljs-number">2</span></span>), (<span class="hljs-params"><span class="hljs-number">3</span>, <span class="hljs-number">6</span></span>), (<span class="hljs-params"><span class="hljs-number">5</span>, <span class="hljs-number">10</span></span>)]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test_double</span>(<span class="hljs-params">input_num, expected</span>):<br>    result = double(input_num)<br>    <span class="hljs-keyword">assert</span> result == expected<br></code></pre></td></tr></table></figure><h2 id="三、记录用例日志"><a href="#三、记录用例日志" class="headerlink" title="三、记录用例日志"></a>三、记录用例日志</h2><h3 id="1、输出日志到控制台"><a href="#1、输出日志到控制台" class="headerlink" title="1、输出日志到控制台"></a>1、输出日志到控制台</h3><p>在<code>pytest.ini</code>文件中添加以下内容开启控制台日志输出并指定输出日志格式，完整的日志配置可以参考<a href="https://docs.python.org/3/library/logging.html">logging文档</a></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[pytest]</span><br><span class="hljs-attr">log_cli</span>=<span class="hljs-literal">true</span><br><span class="hljs-attr">log_cli_level</span>=info<br><span class="hljs-attr">log_cli_format</span>=%(asctime)s [%(levelname)s] %(filename)s:%(level<span class="hljs-literal">no</span>)s ==&gt; %(message)s<br><span class="hljs-attr">log_cli_date_format</span>=%Y-%m-%d %H:%M:%S<br></code></pre></td></tr></table></figure><h3 id="2、简单日志文件输出"><a href="#2、简单日志文件输出" class="headerlink" title="2、简单日志文件输出"></a>2、简单日志文件输出</h3><p>通过<code>pytest.ini</code>中配置<code>log_file</code>相关属性，指定文件日志输出</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">log_file</span>=app.log<br><span class="hljs-attr">log_file_mode</span>=a<br><span class="hljs-attr">log_file_level</span>=info<br><span class="hljs-attr">log_file_format</span>=%(asctime)s [%(levelname)s] %(filename)s:%(level<span class="hljs-literal">no</span>)s ==&gt; %(message)s<br><span class="hljs-attr">log_file_date_format</span>=%Y-%m-%d %H:%M:%S<br></code></pre></td></tr></table></figure><h2 id="四、结合Allure-Report输出测试报告"><a href="#四、结合Allure-Report输出测试报告" class="headerlink" title="四、结合Allure Report输出测试报告"></a>四、结合<code>Allure Report</code>输出测试报告</h2><h3 id="1、安装allure-report"><a href="#1、安装allure-report" class="headerlink" title="1、安装allure report"></a>1、安装<code>allure report</code></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install allure-pytest<br></code></pre></td></tr></table></figure><h3 id="2、生成Allure测试结果"><a href="#2、生成Allure测试结果" class="headerlink" title="2、生成Allure测试结果"></a>2、生成<code>Allure</code>测试结果</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pytest --alluredir=./allure-result <br></code></pre></td></tr></table></figure><h3 id="3、生成Allure测试报告"><a href="#3、生成Allure测试报告" class="headerlink" title="3、生成Allure测试报告"></a>3、生成<code>Allure</code>测试报告</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">allure generate -c -o allure-report --name allure-report.html --lang zh --single-file allure-result<br></code></pre></td></tr></table></figure><p>选项说明：</p><ul><li><code>-c</code>:生成测试报告前清理已有报告</li><li><code>-o</code>:测试报告输出目录，默认为 <code>allure-report</code></li><li><code>--name</code>:生成的测试报告名称</li><li><code>--lang</code>:生成的报告初始显示语言，<code>zh</code>:中文</li><li><code>--single-file</code>:是否生成单文件，默认为<code>false</code></li></ul><h3 id="4、Allure-Report常用属性"><a href="#4、Allure-Report常用属性" class="headerlink" title="4、Allure Report常用属性"></a>4、<code>Allure Report</code>常用属性</h3><p><code>feature</code>和<code>story</code>按照功能需求维度划分用例，一个<code>feature</code>可以有多个<code>story</code>，一个<code>story</code>下可以有多个<code>testcase</code>,<code>testcase</code>为具体的测试用例，<code>issure</code>用于标记当前用例和一个问题关联，<code>suite</code>可以将相关的测试用例组织在一起，可以按照需求维度，也可以按照<code>testcase</code>和<code>issure</code>维度进行分组。</p><table><thead><tr><th>属性</th><th>定义</th><th>用途</th></tr></thead><tbody><tr><td><code>@allure.feature</code></td><td>对测试用例按软件主要功能模块进行高级分类</td><td>从宏观层面组织测试用例，便于查看不同功能模块的测试情况</td></tr><tr><td><code>@allure.story</code></td><td>在 <code>@allure.feature</code> 基础上，按具体业务场景或用户故事细分测试用例</td><td>明确测试用例针对的具体业务场景，细化测试覆盖范围</td></tr><tr><td><code>@allure.testcase</code></td><td>将测试用例与测试用例管理系统中的条目关联</td><td>便于查看测试用例的详细信息和历史记录</td></tr><tr><td><code>@allure.suite</code></td><td>指定测试用例所属的测试套件</td><td>对测试用例进行分组，方便查看和管理</td></tr><tr><td><code>allure.issue</code></td><td>在测试用例中添加问题单链接，关联缺陷管理系统中的问题</td><td>便于追踪和管理测试中发现的问题</td></tr><tr><td><code>@allure.tag</code></td><td>为测试用例添加自定义标签，可基于测试类型、优先级等维度</td><td>方便筛选和搜索具有特定属性的测试用例</td></tr><tr><td><code>@allure.severity</code></td><td>标记测试用例的严重程度，<code>BLOCKER</code>（阻塞级）、<code>CRITICAL</code>（关键级）、<code>NORMAL</code>（正常级）、<code>MINOR</code>（次要级）、<code>TRIVIAL</code>（轻微级）</td><td>确定测试问题的处理优先级，优先关注高严重程度问题</td></tr><tr><td><code>@allure.description</code></td><td>为测试用例添加详细文字描述，说明目的、步骤、预期结果等</td><td>帮助他人理解测试用例的意图和预期行为</td></tr><tr><td><code>@allure.title</code></td><td>为测试用例指定自定义标题，替代默认函数名</td><td>使测试用例在报告中显示更具可读性和明确性</td></tr><tr><td><code>allure.step</code></td><td>在测试用例中定义具体测试步骤，每个步骤有描述和结果</td><td>详细展示测试执行过程，便于定位问题所在步骤</td></tr><tr><td><code>allure.attach</code></td><td>在测试用例中添加附件，如日志、截图、视频等</td><td>为测试结果分析提供更多上下文信息，辅助问题排查</td></tr><tr><td><code>allure.link</code></td><td>在测试用例中添加外部链接，如文档、问题单等</td><td>方便查看相关信息，增强测试用例的可追溯性</td></tr><tr><td><code>allure.epic</code></td><td>用于标记测试用例的史诗级别，通常用于大型项目或产品</td><td>便于从宏观层面组织和管理测试用例</td></tr><tr><td><code>allure.label</code></td><td>用于标记测试用例的自定义标签，如版本、模块等</td><td>便于对测试用例进行分类和筛选</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>自动化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Rust使用tracing记录日志</title>
    <link href="/rust/tracing.html"/>
    <url>/rust/tracing.html</url>
    
    <content type="html"><![CDATA[<h3 id="1、添加依赖"><a href="#1、添加依赖" class="headerlink" title="1、添加依赖"></a>1、添加依赖</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">tracing</span> = <span class="hljs-string">&quot;0.1.40&quot;</span><br><span class="hljs-attr">tracing-appender</span> = <span class="hljs-string">&quot;0.2.3&quot;</span><br><span class="hljs-attr">tracing-subscriber</span> = &#123; version = <span class="hljs-string">&quot;0.3.18&quot;</span>, features = [<span class="hljs-string">&quot;json&quot;</span>] &#125;    <span class="hljs-comment"># 需要输出格式为json时，需要启用json feature</span><br></code></pre></td></tr></table></figure><h3 id="2、使用"><a href="#2、使用" class="headerlink" title="2、使用"></a>2、使用</h3><h4 id="2-1-自定义RollingFile"><a href="#2-1-自定义RollingFile" class="headerlink" title="2.1 自定义RollingFile"></a>2.1 自定义RollingFile</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs rus">let file_appender = RollingFileAppender::builder()<br>        .rotation(Rotation::DAILY)<br>        .filename_prefix(&quot;rust&quot;)<br>        .filename_suffix(&quot;.log&quot;)<br>        .max_log_files(5)<br>        .build(&quot;logs&quot;)<br>        .expect(&quot;failed to initialize rolling file appender&quot;);<br></code></pre></td></tr></table></figure><h4 id="2-2-自定义format"><a href="#2-2-自定义format" class="headerlink" title="2.2 自定义format"></a>2.2 自定义format</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs rus">let format = fmt::format()<br>        .with_target(false)<br>        .with_line_number(true)<br>        .with_thread_names(true)<br>        .compact();<br></code></pre></td></tr></table></figure><h4 id="2-3-函数参数"><a href="#2-3-函数参数" class="headerlink" title="2.3 函数参数"></a>2.3 函数参数</h4><p>在输出日志时，同步输出现场参数信息，可以通过在函数增加宏引用 <code>#[tracing::instrument]</code></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#[tracing::instrument]</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">say_number</span>(number: <span class="hljs-type">usize</span>) &#123;<br>    info!(<span class="hljs-string">&quot;number is &#123;&#125;&quot;</span>, number);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3、示例"><a href="#3、示例" class="headerlink" title="3、示例"></a>3、示例</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> tracing::&#123;info, span, Level&#125;;<br><span class="hljs-keyword">use</span> tracing_appender::rolling::&#123;RollingFileAppender, Rotation&#125;;<br><span class="hljs-keyword">use</span> tracing_subscriber::fmt::writer::MakeWriterExt;<br><span class="hljs-keyword">use</span> tracing_subscriber::fmt;<br><br><br><span class="hljs-meta">#[tracing::instrument]</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">say_number</span>(number: <span class="hljs-type">usize</span>) &#123;<br>    info!(<span class="hljs-string">&quot;number is &#123;&#125;&quot;</span>, number);<br><br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">file_appender</span> = RollingFileAppender::<span class="hljs-title function_ invoke__">builder</span>()<br>        .<span class="hljs-title function_ invoke__">rotation</span>(Rotation::DAILY)<br>        .<span class="hljs-title function_ invoke__">filename_prefix</span>(<span class="hljs-string">&quot;rust&quot;</span>)<br>        .<span class="hljs-title function_ invoke__">filename_suffix</span>(<span class="hljs-string">&quot;.log&quot;</span>)<br>        .<span class="hljs-title function_ invoke__">max_log_files</span>(<span class="hljs-number">5</span>)<br>        .<span class="hljs-title function_ invoke__">build</span>(<span class="hljs-string">&quot;logs&quot;</span>)<br>        .<span class="hljs-title function_ invoke__">expect</span>(<span class="hljs-string">&quot;failed to initialize rolling file appender&quot;</span>);<br><br>    <span class="hljs-keyword">let</span> (file, _guard) = tracing_appender::<span class="hljs-title function_ invoke__">non_blocking</span>(file_appender);<br>    <span class="hljs-keyword">let</span> (stdout, _guard) = tracing_appender::<span class="hljs-title function_ invoke__">non_blocking</span>(std::io::<span class="hljs-title function_ invoke__">stdout</span>());<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">format</span> = fmt::format()<br>        .<span class="hljs-title function_ invoke__">with_target</span>(<span class="hljs-literal">false</span>)<br>        .<span class="hljs-title function_ invoke__">with_line_number</span>(<span class="hljs-literal">true</span>)<br>        .<span class="hljs-title function_ invoke__">with_thread_names</span>(<span class="hljs-literal">true</span>)<br>        .<span class="hljs-title function_ invoke__">compact</span>();<br><br>    tracing_subscriber::<span class="hljs-title function_ invoke__">fmt</span>()<br>        .<span class="hljs-title function_ invoke__">with_writer</span>(stdout.<span class="hljs-title function_ invoke__">and</span>(file))<br>        .<span class="hljs-title function_ invoke__">event_format</span>(format)<br>        .<span class="hljs-title function_ invoke__">init</span>();<br>    info!(<span class="hljs-string">&quot;hello world&quot;</span>);<br>    info!(<span class="hljs-string">&quot;hello rust&quot;</span>);<br>    info!(<span class="hljs-string">&quot;hello 中国&quot;</span>);<br><br>    <span class="hljs-comment">// 携带额外的信息在输出日志信息中</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">_span</span> = span!(Level::INFO, <span class="hljs-string">&quot;say&quot;</span>, nums=<span class="hljs-number">4</span>).<span class="hljs-title function_ invoke__">entered</span>();<br><br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">i</span> <span class="hljs-keyword">in</span> <span class="hljs-number">1</span>..=<span class="hljs-number">4</span> &#123;<br>        <span class="hljs-title function_ invoke__">say_number</span>(i);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意事项：</strong>如果将日志初始化逻辑提取到独立函数时，一定要返回 <code>WorkerGurad</code>到<code>main</code>函数，由<code>main</code>函数持有<code>guard</code>的生命周期，否则会出现日志内容为空的情况。</p>]]></content>
    
    
    <categories>
      
      <category>Rust</category>
      
    </categories>
    
    
    <tags>
      
      <tag>serde</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Rust使用log4rs进行日志输出管理</title>
    <link href="/rust/log4rs.html"/>
    <url>/rust/log4rs.html</url>
    
    <content type="html"><![CDATA[<h4 id="一、依赖引入"><a href="#一、依赖引入" class="headerlink" title="一、依赖引入"></a>一、依赖引入</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cargo add log  -- 类比于Java中的slf4j，一个日志切面<br></code></pre></td></tr></table></figure><p>日志输出实际的框架：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cargo add log4rs<br></code></pre></td></tr></table></figure><p>常见的需要启用的<code>feature</code>特性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-attr">[<span class="hljs-string">&quot;console_appender&quot;</span>, <span class="hljs-string">&quot;rolling_file_appender&quot;</span>, <span class="hljs-string">&quot;size_trigger&quot;</span>, <span class="hljs-string">&quot;time_trigger&quot;</span>, <span class="hljs-string">&quot;pattern_encoder&quot;</span>, <span class="hljs-string">&quot;gzip&quot;</span>]</span> <br></code></pre></td></tr></table></figure><ul><li><code>console_appender</code> 日志输出到控制台</li><li><code>rolling_file_appender</code> 日志输出到文件，文件支持滚动策略</li><li><code>size_trigger</code> 按照文件大小实现滚动</li><li><code>time_trigger</code> 按照日期实现滚动</li><li><code>pattern_encoder</code> 日志内容输出格式</li><li><code>gzip</code> 压缩特性</li></ul><h4 id="二、Pattern"><a href="#二、Pattern" class="headerlink" title="二、Pattern"></a>二、Pattern</h4><p>示例：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="hljs-template-variable">&#123;d(%Y-%m-%dT%H:%M:%S)&#125;</span><span class="language-xml"> </span><span class="hljs-template-variable">&#123;h(&#123;l&#125;</span><span class="language-xml">):&lt;5.5&#125; </span><span class="hljs-template-variable">&#123;M&#125;</span><span class="language-xml"> </span><span class="hljs-template-variable">&#123;f&#125;</span><span class="language-xml"> </span><span class="hljs-template-variable">&#123;L&#125;</span><span class="language-xml"> ---&gt; </span><span class="hljs-template-variable">&#123;m&#125;</span><span class="hljs-template-variable">&#123;n&#125;</span><br></code></pre></td></tr></table></figure><ul><li><code>d</code> 日期，当前时间，默认情况按照<code>ISO 8601</code>格式输出，时区默认区系统，可以指定UTC<ul><li><code>Y</code>：年</li><li><code>m</code>：月</li><li><code>d</code>：天</li><li><code>H</code>：时</li><li><code>M</code>：分</li><li><code>S</code>：秒</li></ul></li><li><code>h</code>：内容高亮<code>red:error warning blue:info</code></li><li><code>l</code>：<code>level</code> 日志级别 <code>trace</code> <code>debug</code> <code>info</code> <code>warn</code> <code>error</code></li><li><code>M</code>：模块名，日志消息来源模块，<code>???</code>未提供</li><li><code>f</code>：<code>file</code>，日志消息来源文件，<code>???</code>未提供</li><li><code>L</code>：<code>line</code>，日志消息来源行，<code>???</code>未提供</li><li><code>m</code>：<code>message</code> 消息</li><li><code>n</code>：换行</li></ul><p>完整的<code>Pattern</code>配置可以查看如下文档</p><p><a href="https://docs.rs/log4rs/latest/log4rs/encode/pattern/index.html#formatters">https://docs.rs/log4rs/latest/log4rs/encode/pattern/index.html#formatters</a></p><h4 id="三、Appender"><a href="#三、Appender" class="headerlink" title="三、Appender"></a>三、Appender</h4><p>日志文件输出位置，支持控制台<code>Console</code>以及文件</p><h5 id="1、console"><a href="#1、console" class="headerlink" title="1、console"></a>1、console</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">console_name:</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">console</span><br><span class="hljs-attr">target:</span> <span class="hljs-string">stdout</span><br><span class="hljs-attr">encoder:</span><br><span class="hljs-attr">pattern:</span> <span class="hljs-string">xxx</span><br></code></pre></td></tr></table></figure><ul><li><code>kind</code>：指定日志输出目标为 <code>console</code>，需要开启<code>console_appender</code>特征</li><li><code>target</code>：支持 <code>stdout</code> 和 <code>stderr</code>，默认为 <code>stdout</code></li><li><code>encoder</code>：输出格式</li></ul><h5 id="2、Rolling-file"><a href="#2、Rolling-file" class="headerlink" title="2、Rolling file"></a>2、Rolling file</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">rolling_file_name:</span><br>    <span class="hljs-attr">kind:</span> <span class="hljs-string">rolling_file</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">&quot;log/requests.log&quot;</span><br>    <span class="hljs-attr">encoder:</span><br>      <span class="hljs-attr">pattern:</span> <span class="hljs-string">&quot;&#123;d(%Y-%m-%dT%H:%M:%S)&#125; &#123;h(&#123;l&#125;):&lt;5.5&#125; &#123;M&#125; &#123;f&#125; &#123;L&#125; ---&gt; &#123;m&#125;&#123;n&#125;&quot;</span><br>    <span class="hljs-attr">policy:</span><br>      <span class="hljs-attr">trigger:</span><br>          <span class="hljs-comment"># 按照时间滚动</span><br>          <span class="hljs-attr">kind:</span> <span class="hljs-string">time</span><br>          <span class="hljs-attr">interval:</span> <span class="hljs-number">1</span> <span class="hljs-string">second</span> <span class="hljs-comment"># second minute hour day week month year</span><br>          <span class="hljs-comment"># 按照大小限制</span><br>          <span class="hljs-comment"># kind: size</span><br>          <span class="hljs-comment"># limit: 1mb  # b kb mb gb tb</span><br>      <span class="hljs-attr">roller:</span><br>          <span class="hljs-attr">kind:</span> <span class="hljs-string">fixed_window</span><br>          <span class="hljs-attr">pattern:</span> <span class="hljs-string">&quot;log/old-rolling_file-&#123;&#125;.gz&quot;</span>  <span class="hljs-comment"># 重命名文件,必须包含 &#123;&#125;，用于索引占位 如果文件名后缀以 .gz 结尾并启用 gzip 特性，归档文件会被压缩</span><br>          <span class="hljs-attr">base:</span> <span class="hljs-number">0</span><br>          <span class="hljs-attr">count:</span> <span class="hljs-number">2</span>  <span class="hljs-comment"># 文件总数</span><br></code></pre></td></tr></table></figure><ul><li><code>kind</code>：指定日志输出目标为<code>rolling file</code>，需要开启<code>rolling_file_appender</code>特征</li><li><code>path</code>：指定当前活动日志文件路径，文件名称</li><li><code>encoder</code>：指定输出消息格式</li><li><code>policy</code>：滚动策略</li><li><code>trigger</code>：触发器<ul><li><code>kind</code>：类型，支持 <code>time</code> 和 <code>size</code></li><li><code>interval</code>：当<code>kind</code>为<code>time</code>时生效，时间周期，支持 <code>second minute hour day week month year</code></li><li><code>limit</code>：当<code>kind</code>为<code>size</code>时生效，按照文件大小上限滚动，支持 <code>b kb mb gb tb</code></li></ul></li><li><code>roller</code>：日志归档滚动策略<ul><li><code>kind</code>：支持 <code>fixed_window</code>固定文件数量和<code>delete</code>，<code>delete</code>时不需要指定其他格式</li><li><code>pattern</code>：日志文件归档转储时文件名格式，其中 <code>&#123;&#125;</code>为必须用于指定文件索引数，如果文件名以<code>.gz</code>结尾且启用 <code>gzip</code>特征，转储时会对文件进行压缩</li><li><code>base</code>：归档文件开始索引</li><li><code>count</code>：归档文件总数，超过上限后，会不断滚动覆盖索引为最小的文件</li></ul></li></ul><p>参考：</p><p><a href="https://github.com/estk/log4rs/blob/main/docs/Configuration.md#appender-config">https://github.com/estk/log4rs/blob/main/docs/Configuration.md#appender-config</a></p><h4 id="四、Logger"><a href="#四、Logger" class="headerlink" title="四、Logger"></a>四、Logger</h4><p>用于指定不同模块日志级别以及日志输出目标</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">root:</span><br>  <span class="hljs-attr">level:</span> <span class="hljs-string">info</span><br>  <span class="hljs-attr">appenders:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">stdout</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">requests</span><br></code></pre></td></tr></table></figure><ul><li><code>root</code>：固定，默认处理方式</li><li><code>level</code>：日志级别</li><li><code>appenders</code>：输出目标，支持配置多个</li></ul><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">loggers:</span><br>  app::<span class="hljs-params">requests:</span><br>    <span class="hljs-params">level:</span> info<br>    <span class="hljs-params">appenders:</span><br>      <span class="hljs-operator">-</span> requests<br>    <span class="hljs-params">additive:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><ul><li><code>loggers</code>：对于特定路径日志级别或者输出目标自定义</li><li><code>app::requests</code>：路径</li><li><code>additive</code>：<code>true</code>或<code>false</code> 是否将日至消息追加到上级 <code>appenders</code>中</li></ul><h4 id="五、示例"><a href="#五、示例" class="headerlink" title="五、示例"></a>五、示例</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs rust">log4rs::<span class="hljs-title function_ invoke__">init_file</span>(<span class="hljs-string">&quot;log4rs.yml&quot;</span>, <span class="hljs-built_in">Default</span>::<span class="hljs-title function_ invoke__">default</span>()).<span class="hljs-title function_ invoke__">unwrap</span>();<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs yam"># Scan this file for changes every 30 seconds<br>refresh_rate: 30 seconds<br><br>appenders:<br>  # An appender named &quot;stdout&quot; that writes to stdout<br>  stdout:<br>    kind: console<br>    encoder:<br>      pattern: &quot;&#123;d(%Y-%m-%dT%H:%M:%S)&#125; &#123;h(&#123;l&#125;):&lt;5.5&#125; &#123;M&#125; &#123;f&#125; &#123;L&#125; ---&gt; &#123;m&#125;&#123;n&#125;&quot;<br><br>  # An appender named &quot;requests&quot; that writes to a file with a custom pattern encoder<br>  requests:<br>    kind: rolling_file<br>    path: &quot;log/requests.log&quot;<br>    encoder:<br>      pattern: &quot;&#123;d(%Y-%m-%dT%H:%M:%S)&#125; &#123;h(&#123;l&#125;):&lt;5.5&#125; &#123;M&#125; &#123;f&#125; &#123;L&#125; ---&gt; &#123;m&#125;&#123;n&#125;&quot;<br>    policy:<br>      trigger:<br>          # 按照时间滚动<br>          # kind: time<br>          # interval: 1 second # second minute hour day week month year<br>          # 按照大小限制<br>          kind: size<br>          limit: 1kb  # b kb mb gb tb<br>      roller:<br>          kind: fixed_window<br>          pattern: &quot;log/old-rolling_file-&#123;&#125;.gz&quot;  # 重命名文件,必须包含 &#123;&#125;，用于索引占位 如果文件名后缀以 .gz 结尾并启用 gzip 特性，归档文件会被压缩<br>          base: 0<br>          count: 5  # 文件总数<br><br># Set the default logging level to &quot;warn&quot; and attach the &quot;stdout&quot; appender to the root<br>root:<br>  level: info<br>  appenders:<br>    - stdout<br>    - requests<br><br>loggers:<br>  # Raise the maximum log level for events sent to the &quot;app::backend::db&quot; logger to &quot;info&quot;<br>  app::backend::db:<br>    level: info<br><br>  # Route log events sent to the &quot;app::requests&quot; logger to the &quot;requests&quot; appender,<br>  # and *not* the normal appenders installed at the root<br>  app::requests:<br>    level: info<br>    appenders:<br>      - requests<br>    additive: false<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Rust</category>
      
    </categories>
    
    
    <tags>
      
      <tag>log</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Rust使用serde进行序列化</title>
    <link href="/rust/serde.html"/>
    <url>/rust/serde.html</url>
    
    <content type="html"><![CDATA[<h3 id="1、添加依赖"><a href="#1、添加依赖" class="headerlink" title="1、添加依赖"></a>1、添加依赖</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">cargo <span class="hljs-built_in">add</span> serde <span class="hljs-attribute">--features</span>=derive<br>cargo <span class="hljs-built_in">add</span> serde_json<br></code></pre></td></tr></table></figure><h3 id="2、常用属性"><a href="#2、常用属性" class="headerlink" title="2、常用属性"></a>2、常用属性</h3><h4 id="2-1-全局修改属性名称格式"><a href="#2-1-全局修改属性名称格式" class="headerlink" title="2.1 全局修改属性名称格式"></a>2.1 全局修改属性名称格式</h4><ul><li><p>位置：增加在 <code>struct</code>位置</p></li><li><p>配置：<code>#[serde(rename_all = &quot;...&quot;)]</code>，支持 <code>&quot;lowercase&quot;</code>, <code>&quot;UPPERCASE&quot;</code>, <code>&quot;PascalCase&quot;</code>, <code>&quot;camelCase&quot;</code>, <code>&quot;snake_case&quot;</code>, <code>&quot;SCREAMING_SNAKE_CASE&quot;</code>, <code>&quot;kebab-case&quot;</code>, <code>&quot;SCREAMING-KEBAB-CASE&quot;</code></p></li><li><p>属性名称需要以 下划线(<code>_</code>)分割</p><p>示例：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#[derive(Serialize, Deserialize, Debug)]</span><br><span class="hljs-meta">#[serde(rename_all=<span class="hljs-string">&quot;camelCase&quot;</span>)]</span>  <span class="hljs-comment">// json字段格式为 camelCase 例如 stringName</span><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">StructWithCustomDate</span> &#123;<br>    <span class="hljs-keyword">pub</span> user_name: <span class="hljs-type">String</span>,<br>&#125;<br></code></pre></td></tr></table></figure><p>序列化时要求<code>json</code>中字段名为 <code>userName</code></p></li></ul><h4 id="2-2-默认值-serde-default"><a href="#2-2-默认值-serde-default" class="headerlink" title="2.2 默认值 #[serde(default)]"></a>2.2 默认值 <code>#[serde(default)]</code></h4><p>使用属性类型默认值，即由 <code>Default Trait</code>提供的默认值，例如：<code>i32 默认为0</code></p><p>需要在具体属性上标注</p><p>示例：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 默认值</span><br><span class="hljs-meta">#[serde(default)]</span><br><span class="hljs-keyword">pub</span> age: <span class="hljs-type">i32</span>,<br></code></pre></td></tr></table></figure><h4 id="2-3-默认值，指定函数-serde-default-path"><a href="#2-3-默认值，指定函数-serde-default-path" class="headerlink" title="2.3 默认值，指定函数 #[serde(default = &quot;path&quot;)]"></a>2.3 默认值，指定函数 <code>#[serde(default = &quot;path&quot;)]</code></h4><p>由指定的函数提供属性缺省值。</p><p>需要在具体属性上标注</p><p>示例：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 自定义默认值处理函数</span><br><span class="hljs-meta">#[serde(default=<span class="hljs-string">&quot;my_sex&quot;</span>)]</span><br><span class="hljs-keyword">pub</span> sex: <span class="hljs-type">String</span>,<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">my_sex</span>() <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123;<br>    <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;Female&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-4-属性跳过-serde-skip"><a href="#2-4-属性跳过-serde-skip" class="headerlink" title="2.4 属性跳过 #[serde(skip)]"></a>2.4 属性跳过 <code>#[serde(skip)]</code></h4><p>可以通过 <code>#[serde(skip_serializing)]</code> 和 <code>#[serde(skip_deserializing)]</code>  单独针对序列化或反序列化过程</p><p>在反序列化的时候，<code>serde</code>会使用 <code>Default::default()</code> 或 <code>default = &quot;...&quot;</code> 提供属性默认值</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#[serde(skip)]</span><br>bidder: <span class="hljs-type">String</span>,<br></code></pre></td></tr></table></figure><h4 id="2-5-外部module自定义序列化过程-serde-with-module"><a href="#2-5-外部module自定义序列化过程-serde-with-module" class="headerlink" title="2.5 外部module自定义序列化过程 #[serde(with = &quot;module&quot;)]"></a>2.5 外部module自定义序列化过程 <code>#[serde(with = &quot;module&quot;)]</code></h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">mod</span> my_who_care &#123;<br>    <span class="hljs-keyword">use</span> serde::&#123;<span class="hljs-keyword">self</span>, Deserialize, Serializer, Deserializer&#125;;<br><br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">serialize</span>&lt;S&gt;(属性名: 属性类型, serializer: S) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Result</span>&lt;S::<span class="hljs-literal">Ok</span>, S::Error&gt;<br>        <span class="hljs-keyword">where</span> S: Serializer, &#123;<br>            <span class="hljs-comment">// 序列化逻辑</span><br>        serializer.<span class="hljs-title function_ invoke__">serialize_str</span>()<br>    &#125;<br><br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">deserialize</span>&lt;<span class="hljs-symbol">&#x27;de</span>, D&gt;(deserializer: D,) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Result</span>&lt;<span class="hljs-type">String</span>, D::Error&gt;<br>    <span class="hljs-keyword">where</span> D: Deserializer&lt;<span class="hljs-symbol">&#x27;de</span>, &gt; &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">deserialize</span>(deserializer)?;<br>        <span class="hljs-comment">// 反序列化逻辑</span><br>        <span class="hljs-title function_ invoke__">Ok</span>()<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3、自定义日期序列化"><a href="#3、自定义日期序列化" class="headerlink" title="3、自定义日期序列化"></a>3、自定义日期序列化</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> chrono::&#123;DateTime, Utc&#125;;<br><span class="hljs-keyword">use</span> serde::&#123;Serialize, Deserialize&#125;;<br><br><span class="hljs-meta">#[derive(Serialize, Deserialize, Debug)]</span><br><span class="hljs-meta">#[serde(rename_all=<span class="hljs-string">&quot;camelCase&quot;</span>)]</span>  <span class="hljs-comment">// json字段格式为 camelCase 例如 stringName</span><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">StructWithCustomDate</span> &#123;<br>    <span class="hljs-comment">// DateTime supports Serde out of the box, but uses RFC3339 format. Provide</span><br>    <span class="hljs-comment">// some custom logic to make it use our desired format.</span><br>    <span class="hljs-meta">#[serde(with = <span class="hljs-string">&quot;my_date_format&quot;</span>)]</span><br>    <span class="hljs-keyword">pub</span> time_stamp: DateTime&lt;Utc&gt;,<br>&#125;<br><br><span class="hljs-keyword">mod</span> my_date_format &#123;<br>    <span class="hljs-keyword">use</span> chrono::&#123;DateTime, Utc, NaiveDateTime&#125;;<br>    <span class="hljs-keyword">use</span> serde::&#123;<span class="hljs-keyword">self</span>, Deserialize, Serializer, Deserializer&#125;;<br><br>    <span class="hljs-keyword">const</span> FORMAT: &amp;<span class="hljs-symbol">&#x27;static</span> <span class="hljs-type">str</span> = <span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>;<br><br>    <span class="hljs-comment">// The signature of a serialize_with function must follow the pattern:</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">//    fn serialize&lt;S&gt;(&amp;T, S) -&gt; Result&lt;S::Ok, S::Error&gt;</span><br>    <span class="hljs-comment">//    where</span><br>    <span class="hljs-comment">//        S: Serializer</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// although it may also be generic over the input types T.</span><br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">serialize</span>&lt;S&gt;(<br>        date: &amp;DateTime&lt;Utc&gt;,<br>        serializer: S,<br>    ) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Result</span>&lt;S::<span class="hljs-literal">Ok</span>, S::Error&gt;<br>    <span class="hljs-keyword">where</span><br>        S: Serializer,<br>    &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span> = <span class="hljs-built_in">format!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, date.format(FORMAT));<br>        serializer.<span class="hljs-title function_ invoke__">serialize_str</span>(&amp;s)<br>    &#125;<br><br>    <span class="hljs-comment">// The signature of a deserialize_with function must follow the pattern:</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">//    fn deserialize&lt;&#x27;de, D&gt;(D) -&gt; Result&lt;T, D::Error&gt;</span><br>    <span class="hljs-comment">//    where</span><br>    <span class="hljs-comment">//        D: Deserializer&lt;&#x27;de&gt;</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-comment">// although it may also be generic over the output types T.</span><br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">deserialize</span>&lt;<span class="hljs-symbol">&#x27;de</span>, D&gt;(<br>        deserializer: D,<br>    ) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Result</span>&lt;DateTime&lt;Utc&gt;, D::Error&gt;<br>    <span class="hljs-keyword">where</span><br>        D: Deserializer&lt;<span class="hljs-symbol">&#x27;de</span>&gt;,<br>    &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">deserialize</span>(deserializer)?;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">dt</span> = NaiveDateTime::<span class="hljs-title function_ invoke__">parse_from_str</span>(&amp;s, FORMAT).<span class="hljs-title function_ invoke__">map_err</span>(serde::de::Error::custom)?;<br>        <span class="hljs-title function_ invoke__">Ok</span>(DateTime::&lt;Utc&gt;::<span class="hljs-title function_ invoke__">from_naive_utc_and_offset</span>(dt, Utc))<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">json_str</span> = <span class="hljs-string">r#&quot;</span><br><span class="hljs-string">      &#123;</span><br><span class="hljs-string">        &quot;timeStamp&quot;: &quot;2017-02-16 21:54:30&quot;,</span><br><span class="hljs-string">        &quot;bidder&quot;: &quot;Skrillex&quot;,</span><br><span class="hljs-string">        &quot;whoCare&quot;: &quot;probiecoder&quot;</span><br><span class="hljs-string">      &#125;</span><br><span class="hljs-string">    &quot;#</span>;<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">data</span>: StructWithCustomDate = serde_json::<span class="hljs-title function_ invoke__">from_str</span>(json_str).<span class="hljs-title function_ invoke__">unwrap</span>();<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:#?&#125;&quot;</span>, data);<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">serialized</span> = serde_json::<span class="hljs-title function_ invoke__">to_string_pretty</span>(&amp;data).<span class="hljs-title function_ invoke__">unwrap</span>();<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, serialized);<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs subunit">StructWithCustomDate &#123;<br>    time_stamp: 2017<span class="hljs-string">-02</span><span class="hljs-string">-16</span>T21:54:30Z,<br>&#125;<br>&#123;<br>  &quot;timeStamp&quot;: &quot;2017<span class="hljs-string">-02</span><span class="hljs-string">-16</span> 21:54:30&quot;<br>&#125;<br></code></pre></td></tr></table></figure><p>更多内容请查阅<code>serde</code>官网内容：<a href="https://serde.rs/">https://serde.rs/</a></p>]]></content>
    
    
    <categories>
      
      <category>Rust</category>
      
    </categories>
    
    
    <tags>
      
      <tag>serde</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Rust操作mongo基础语法介绍</title>
    <link href="/rust/mongo.html"/>
    <url>/rust/mongo.html</url>
    
    <content type="html"><![CDATA[<h3 id="一、添加依赖"><a href="#一、添加依赖" class="headerlink" title="一、添加依赖"></a>一、添加依赖</h3><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-attr">futures</span> = <span class="hljs-string">&quot;0.3.31&quot;</span><br><span class="hljs-attr">mongodb</span> = <span class="hljs-string">&quot;3.1.1&quot;</span><br><span class="hljs-attr">serde</span> = &#123;version = <span class="hljs-string">&quot;1.0.217&quot;</span>, features = [<span class="hljs-string">&quot;derive&quot;</span>]&#125;<br><span class="hljs-attr">tokio</span> = &#123;version = <span class="hljs-string">&quot;1.42.0&quot;</span>, features = [<span class="hljs-string">&quot;full&quot;</span>]&#125;<br></code></pre></td></tr></table></figure><ul><li><code>futures</code>: 结果集中使用<code>try_next</code>获取数据时使用</li><li><code>mongodb</code>:连接<code>mongo</code>数据库驱动包</li><li><code>serde</code>: 用于将文档和<code>struct</code>进行转换，提供序列号和反序列化的能力</li><li><code>tokio</code>:提供异步运行时环境</li></ul><h3 id="二、基础语法"><a href="#二、基础语法" class="headerlink" title="二、基础语法"></a>二、基础语法</h3><h4 id="1、配置连接client"><a href="#1、配置连接client" class="headerlink" title="1、配置连接client"></a>1、配置连接client</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-variable">uri</span> = <span class="hljs-string">&quot;连接字符串&quot;</span>;<br><br><span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">client_options</span> = ClientOptions::<span class="hljs-title function_ invoke__">parse</span>(uri).<span class="hljs-keyword">await</span>?;<br>client_options.max_pool_size = <span class="hljs-title function_ invoke__">Some</span>(<span class="hljs-number">50</span>);  <span class="hljs-comment">// 设置最大连接数</span><br>client_options.min_pool_size = <span class="hljs-title function_ invoke__">Some</span>(<span class="hljs-number">50</span>);<br>client_options.connect_timeout = <span class="hljs-title function_ invoke__">Some</span>(Duration::<span class="hljs-title function_ invoke__">from_secs</span>(<span class="hljs-number">1</span>));  <span class="hljs-comment">// 连接超时时间</span><br><br><span class="hljs-keyword">let</span> <span class="hljs-variable">client</span> = Client::<span class="hljs-title function_ invoke__">with_options</span>(client_options)?;<br></code></pre></td></tr></table></figure><p>完整的连接选项文档：<a href="https://www.mongodb.com/zh-cn/docs/drivers/rust/current/fundamentals/connections/connection-options/">https://www.mongodb.com/zh-cn/docs/drivers/rust/current/fundamentals/connections/connection-options/</a></p><h4 id="2、获取数据库和集合"><a href="#2、获取数据库和集合" class="headerlink" title="2、获取数据库和集合"></a>2、获取数据库和集合</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-variable">database</span> = client.<span class="hljs-title function_ invoke__">database</span>(<span class="hljs-string">&quot;test&quot;</span>);<br><span class="hljs-keyword">let</span> <span class="hljs-variable">instance_coll</span>: Collection&lt;Document&gt; = database.<span class="hljs-title function_ invoke__">collection</span>(<span class="hljs-string">&quot;instance&quot;</span>);<br></code></pre></td></tr></table></figure><h4 id="3、数据查询"><a href="#3、数据查询" class="headerlink" title="3、数据查询"></a>3、数据查询</h4><p>获取数据集<code>collection</code></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-variable">instance_coll</span>: Collection&lt;Document&gt; = database.<span class="hljs-title function_ invoke__">collection</span>(<span class="hljs-string">&quot;instance&quot;</span>);<br></code></pre></td></tr></table></figure><p>此处集合数据类型可以使用 <code>Document</code>或者自定义<code>Struct</code></p><p>使用 <code>find_one</code>查询一条记录</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-variable">camunda_instance_id</span> = <span class="hljs-string">&quot;2ca88c71-3636-11ec-b356-26c4328fcfef&quot;</span>;<br><span class="hljs-keyword">let</span> <span class="hljs-variable">instance</span> =instance_coll.<span class="hljs-title function_ invoke__">find_one</span>(doc! &#123;<br>    <span class="hljs-string">&quot;instance_id&quot;</span>: camunda_instance_id<br>&#125;).<span class="hljs-keyword">await</span>?;<br></code></pre></td></tr></table></figure><p>使用<code>find</code>查询多条记录，返回集合</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs rust"><br><span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">cursor</span> = instance_coll.<span class="hljs-title function_ invoke__">find</span>(doc! &#123;<br>    <span class="hljs-string">&quot;apply&quot;</span>: <span class="hljs-string">&quot;duw17&quot;</span><br>&#125;).<span class="hljs-keyword">await</span>?;<br><br><span class="hljs-keyword">while</span> <span class="hljs-keyword">let</span> <span class="hljs-variable">Some</span>(doc) = cursor.<span class="hljs-title function_ invoke__">try_next</span>().<span class="hljs-keyword">await</span>? &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:#?&#125;&quot;</span>, doc);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong><code>try_next</code>需要添加<code>futures crate</code>后，引入 <code>use futures::TryStreamExt;</code></strong></p><h4 id="4、数据插入"><a href="#4、数据插入" class="headerlink" title="4、数据插入"></a>4、数据插入</h4><p>使用 <code>insert_one</code>插入单个文档</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 使用doc!不指定具体数据类型</span><br><span class="hljs-keyword">let</span> <span class="hljs-variable">insert_doc</span> = doc! &#123;<br>    <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">222222222222222222i64</span>,<br>    <span class="hljs-string">&quot;instance_id&quot;</span>: <span class="hljs-string">&quot;222222222222222222&quot;</span>,<br>    <span class="hljs-string">&quot;example_status&quot;</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-string">&quot;apply&quot;</span>: <span class="hljs-string">&quot;duw17&quot;</span>,<br>    <span class="hljs-string">&quot;template_code&quot;</span>: <span class="hljs-string">&quot;314837782482464786&quot;</span>,<br>&#125;;<br><br><span class="hljs-comment">// 自定义数据struct</span><br><span class="hljs-comment">// let insert_struct = Instance &#123;</span><br><span class="hljs-comment">//     id: 11111111111111111u64,</span><br><span class="hljs-comment">//     instance_id: &quot;11111111111111111&quot;.to_string(),</span><br><span class="hljs-comment">//     example_status: 1,</span><br><span class="hljs-comment">//     apply: &quot;duw17&quot;.to_string(),</span><br><span class="hljs-comment">//     template_code: &quot;314837782482464786&quot;.to_string(),</span><br><span class="hljs-comment">// &#125;;</span><br><br><span class="hljs-keyword">let</span> <span class="hljs-variable">res</span> = instance_coll.<span class="hljs-title function_ invoke__">insert_one</span>(insert_doc).<span class="hljs-keyword">await</span>?;<br><span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Inserted a document with _id: &#123;&#125;&quot;</span>, res.inserted_id);<br></code></pre></td></tr></table></figure><p>使用 <code>insert_many</code> 插入多个文档</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 此处同理可以使用具体的 struct</span><br><span class="hljs-keyword">let</span> <span class="hljs-variable">insert_docs</span> = <span class="hljs-built_in">vec!</span>[<br>    doc! &#123;<br>        <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">33333333333333333i64</span>,<br>        <span class="hljs-string">&quot;instance_id&quot;</span>: <span class="hljs-string">&quot;33333333333333333&quot;</span>,<br>        <span class="hljs-string">&quot;example_status&quot;</span>: <span class="hljs-number">0</span>,<br>        <span class="hljs-string">&quot;apply&quot;</span>: <span class="hljs-string">&quot;liuy2905&quot;</span>,<br>        <span class="hljs-string">&quot;template_code&quot;</span>: <span class="hljs-string">&quot;314837782482464786&quot;</span>,<br>    &#125;,<br>    doc! &#123;<br>        <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">4444444444444444444i64</span>,<br>        <span class="hljs-string">&quot;instance_id&quot;</span>: <span class="hljs-string">&quot;4444444444444444444&quot;</span>,<br>        <span class="hljs-string">&quot;example_status&quot;</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-string">&quot;apply&quot;</span>: <span class="hljs-string">&quot;duw17&quot;</span>,<br>        <span class="hljs-string">&quot;template_code&quot;</span>: <span class="hljs-string">&quot;314837782482464786&quot;</span>,<br>    &#125;,<br>];<br><br><span class="hljs-keyword">let</span> <span class="hljs-variable">insert_many_result</span> = instance_coll.<span class="hljs-title function_ invoke__">insert_many</span>(insert_docs).<span class="hljs-keyword">await</span>?;<br><span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Inserted documents with _ids:&quot;</span>);<br><span class="hljs-keyword">for</span> (_key, value) <span class="hljs-keyword">in</span> &amp;insert_many_result.inserted_ids &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, value);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="三、示例"><a href="#三、示例" class="headerlink" title="三、示例"></a>三、示例</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::time::Duration;<br><br><span class="hljs-keyword">use</span> mongodb::&#123;<br>    bson::&#123;doc, Document&#125;, options::ClientOptions, Client, Collection<br>&#125;;<br><span class="hljs-keyword">use</span> futures::TryStreamExt;<br><span class="hljs-keyword">use</span> serde::&#123;Deserialize, Serialize&#125;;<br><br><span class="hljs-meta">#[derive(Debug, Serialize, Deserialize)]</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Instance</span> &#123;<br>    id: <span class="hljs-type">u64</span>,<br>    instance_id: <span class="hljs-type">String</span>,<br>    example_status: <span class="hljs-type">u8</span>,<br>    apply: <span class="hljs-type">String</span>,<br>    template_code: <span class="hljs-type">String</span>,<br>&#125;<br><br><span class="hljs-meta">#[tokio::main]</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() <span class="hljs-punctuation">-&gt;</span> mongodb::error::<span class="hljs-type">Result</span>&lt;()&gt; &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">uri</span> = <span class="hljs-string">&quot;mongodb://mongo_testopr:Bpp_2023@10.0.195.200:22001,10.0.195.201:22001,10.0.195.202:22001/bpp_test?authSource=admin&amp;replicaSet=rs1&amp;readPreference=secondaryPreferred&quot;</span>;<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">client_options</span> = ClientOptions::<span class="hljs-title function_ invoke__">parse</span>(uri).<span class="hljs-keyword">await</span>?;<br>    client_options.max_pool_size = <span class="hljs-title function_ invoke__">Some</span>(<span class="hljs-number">50</span>);<br>    client_options.min_pool_size = <span class="hljs-title function_ invoke__">Some</span>(<span class="hljs-number">50</span>);<br>    client_options.connect_timeout = <span class="hljs-title function_ invoke__">Some</span>(Duration::<span class="hljs-title function_ invoke__">from_secs</span>(<span class="hljs-number">1</span>));<br>    <br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">client</span> = Client::<span class="hljs-title function_ invoke__">with_options</span>(client_options)?;<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">database</span> = client.<span class="hljs-title function_ invoke__">database</span>(<span class="hljs-string">&quot;bpp_test&quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">instance_coll</span>: Collection&lt;Document&gt; = database.<span class="hljs-title function_ invoke__">collection</span>(<span class="hljs-string">&quot;instance&quot;</span>);<br><br>    <span class="hljs-comment">// let instance_coll_count = instance_coll.count_documents(doc! &#123;&#125;).await?;</span><br>    <span class="hljs-comment">// println!(&quot;instance_coll_count: &#123;&#125;&quot;, instance_coll_count);</span><br><br>    <span class="hljs-comment">// let instance_id: u64 = 240873362090934272;</span><br>    <span class="hljs-comment">// let camunda_instance_id = &quot;2ca88c71-3636-11ec-b356-26c4328fcfef&quot;;</span><br>    <span class="hljs-comment">// let instance =instance_coll.find_one(doc! &#123;</span><br>    <span class="hljs-comment">//     &quot;instance_id&quot;: camunda_instance_id</span><br>    <span class="hljs-comment">// &#125;).await?;</span><br><br>    <span class="hljs-comment">// println!(&quot;Found a instance:\n&#123;:#?&#125;&quot;, instance);</span><br><br>    <span class="hljs-comment">// let mut cursor = instance_coll.find(doc! &#123;</span><br>    <span class="hljs-comment">//     &quot;apply&quot;: &quot;duw17&quot;</span><br>    <span class="hljs-comment">// &#125;).await?;</span><br><br>    <span class="hljs-comment">// while let Some(doc) = cursor.try_next().await? &#123;</span><br>    <span class="hljs-comment">//     println!(&quot;&#123;:#?&#125;&quot;, doc);</span><br>    <span class="hljs-comment">// &#125;</span><br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">insert_doc</span> = doc! &#123;<br>        <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">222222222222222222i64</span>,<br>        <span class="hljs-string">&quot;instance_id&quot;</span>: <span class="hljs-string">&quot;222222222222222222&quot;</span>,<br>        <span class="hljs-string">&quot;example_status&quot;</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-string">&quot;apply&quot;</span>: <span class="hljs-string">&quot;duw17&quot;</span>,<br>        <span class="hljs-string">&quot;template_code&quot;</span>: <span class="hljs-string">&quot;314837782482464786&quot;</span>,<br>    &#125;;<br><br>    <span class="hljs-comment">// let insert_struct = Instance &#123;</span><br>    <span class="hljs-comment">//     id: 11111111111111111u64,</span><br>    <span class="hljs-comment">//     instance_id: &quot;11111111111111111&quot;.to_string(),</span><br>    <span class="hljs-comment">//     example_status: 1,</span><br>    <span class="hljs-comment">//     apply: &quot;duw17&quot;.to_string(),</span><br>    <span class="hljs-comment">//     template_code: &quot;314837782482464786&quot;.to_string(),</span><br>    <span class="hljs-comment">// &#125;;</span><br><br>    <span class="hljs-comment">// let res = instance_coll.insert_one(insert_doc).await?;</span><br>    <span class="hljs-comment">// println!(&quot;Inserted a document with _id: &#123;&#125;&quot;, res.inserted_id);</span><br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">insert_docs</span> = <span class="hljs-built_in">vec!</span>[<br>        doc! &#123;<br>            <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">33333333333333333i64</span>,<br>            <span class="hljs-string">&quot;instance_id&quot;</span>: <span class="hljs-string">&quot;33333333333333333&quot;</span>,<br>            <span class="hljs-string">&quot;example_status&quot;</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-string">&quot;apply&quot;</span>: <span class="hljs-string">&quot;liuy2905&quot;</span>,<br>            <span class="hljs-string">&quot;template_code&quot;</span>: <span class="hljs-string">&quot;314837782482464786&quot;</span>,<br>        &#125;,<br>        doc! &#123;<br>            <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">4444444444444444444i64</span>,<br>            <span class="hljs-string">&quot;instance_id&quot;</span>: <span class="hljs-string">&quot;4444444444444444444&quot;</span>,<br>            <span class="hljs-string">&quot;example_status&quot;</span>: <span class="hljs-number">1</span>,<br>            <span class="hljs-string">&quot;apply&quot;</span>: <span class="hljs-string">&quot;duw17&quot;</span>,<br>            <span class="hljs-string">&quot;template_code&quot;</span>: <span class="hljs-string">&quot;314837782482464786&quot;</span>,<br>        &#125;,<br>    ];<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">insert_many_result</span> = instance_coll.<span class="hljs-title function_ invoke__">insert_many</span>(insert_docs).<span class="hljs-keyword">await</span>?;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Inserted documents with _ids:&quot;</span>);<br>    <span class="hljs-keyword">for</span> (_key, value) <span class="hljs-keyword">in</span> &amp;insert_many_result.inserted_ids &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, value);<br>    &#125;<br><br>    <span class="hljs-title function_ invoke__">Ok</span>(())<br>&#125;<br>                <br></code></pre></td></tr></table></figure><h3 id="四、参考文档"><a href="#四、参考文档" class="headerlink" title="四、参考文档"></a>四、参考文档</h3><p><a href="https://www.mongodb.com/zh-cn/docs/drivers/rust/current/quick-start/">https://www.mongodb.com/zh-cn/docs/drivers/rust/current/quick-start/</a></p>]]></content>
    
    
    <categories>
      
      <category>Rust</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mongo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用sqlx与数据库交流</title>
    <link href="/rust/sqlx.html"/>
    <url>/rust/sqlx.html</url>
    
    <content type="html"><![CDATA[<h3 id="一、依赖添加"><a href="#一、依赖添加" class="headerlink" title="一、依赖添加"></a>一、依赖添加</h3><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-attr">chrono</span> = &#123;version = <span class="hljs-string">&quot;0.4.38&quot;</span>, features = [<span class="hljs-string">&quot;serde&quot;</span>]&#125;<br><span class="hljs-attr">serde</span> = &#123; version = <span class="hljs-string">&quot;1.0.210&quot;</span>, features = [<span class="hljs-string">&quot;derive&quot;</span>] &#125;<br><span class="hljs-attr">serde_json</span> = <span class="hljs-string">&quot;1.0.132&quot;</span><br><span class="hljs-attr">sqlx</span> = &#123; version = <span class="hljs-string">&quot;0.8.2&quot;</span>, features = [<span class="hljs-string">&quot;mysql&quot;</span>, <span class="hljs-string">&quot;runtime-tokio&quot;</span>, <span class="hljs-string">&quot;chrono&quot;</span>, <span class="hljs-string">&quot;json&quot;</span>, <span class="hljs-string">&quot;tls-rustls&quot;</span>] &#125;<br><span class="hljs-attr">tokio</span> = &#123; version = <span class="hljs-string">&quot;1.40.0&quot;</span>, features = [<span class="hljs-string">&quot;full&quot;</span>]&#125;<br></code></pre></td></tr></table></figure><ul><li><code>chrono</code>:处理日期类型字段，提供 <code>NaiveDateTime</code>和<code>DateTime&lt;Utc&gt;</code>,其中<code>NaiveDateTime</code>不包含时区信息，对应数据库的<code>DATETIME</code>类型，<code>DateTime&lt;Utc&gt;</code>包含<code>UTC</code>时区信息，对应数据库<code>TIMESTAMP</code>类型；<code>chrono</code>默认未实现<code>serde</code>的<code>Serialize</code>，需要启用<code>serde feature</code>支持。</li><li><code>serde</code>和<code>serde_json</code>:用于处理数据的序列化。</li><li><code>sqlx</code>: 用于与数据库交付的核心<code>crate</code></li><li><code>tokio</code>: 异步运行<code>crate</code></li></ul><h3 id="二、操作示例"><a href="#二、操作示例" class="headerlink" title="二、操作示例"></a>二、操作示例</h3><h4 id="1、创建连接池"><a href="#1、创建连接池" class="headerlink" title="1、创建连接池"></a>1、创建连接池</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-variable">pool</span> = MySqlPoolOptions::<span class="hljs-title function_ invoke__">new</span>()<br>        .<span class="hljs-title function_ invoke__">max_connections</span>(<span class="hljs-number">5</span>)<br>        .<span class="hljs-title function_ invoke__">min_connections</span>(<span class="hljs-number">2</span>)<br>        .<span class="hljs-title function_ invoke__">idle_timeout</span>(Duration::<span class="hljs-title function_ invoke__">from_secs</span>(<span class="hljs-number">10</span>))<br>        .<span class="hljs-title function_ invoke__">acquire_timeout</span>(Duration::<span class="hljs-title function_ invoke__">from_secs</span>(<span class="hljs-number">1</span>))<br>        .<span class="hljs-title function_ invoke__">connect</span>(<span class="hljs-string">&quot;mysql://root:Root@localhost:3306/rust&quot;</span>)<br>        .<span class="hljs-keyword">await</span>?;<br></code></pre></td></tr></table></figure><h4 id="2、数据插入"><a href="#2、数据插入" class="headerlink" title="2、数据插入"></a>2、数据插入</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-variable">insert_sql</span> = <span class="hljs-string">r#&quot;</span><br><span class="hljs-string">    insert into student (name,age,birthday,create_date) values (?,?,?,?)&quot;#</span>;<br><br><span class="hljs-keyword">for</span> <span class="hljs-variable">i</span> <span class="hljs-keyword">in</span> <span class="hljs-number">0</span>..<span class="hljs-number">10</span> &#123;<br>    sqlx::<span class="hljs-title function_ invoke__">query</span>(&amp;insert_sql)<br>        .<span class="hljs-title function_ invoke__">bind</span>(<span class="hljs-built_in">format!</span>(<span class="hljs-string">&quot;probie-&#123;&#125;&quot;</span>, i))<br>        .<span class="hljs-title function_ invoke__">bind</span>(<span class="hljs-number">10</span> + i)<br>        .<span class="hljs-title function_ invoke__">bind</span>(NaiveDateTime::<span class="hljs-title function_ invoke__">parse_from_str</span>(<br>            <span class="hljs-string">&quot;1991-01-13 05:11:00&quot;</span>,<br>            <span class="hljs-string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>,<br>        )?)<br>        .<span class="hljs-title function_ invoke__">bind</span>(Utc::<span class="hljs-title function_ invoke__">now</span>())<br>        .<span class="hljs-title function_ invoke__">execute</span>(&amp;pool)<br>        .<span class="hljs-keyword">await</span>?;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p><code>bind</code>用于变量绑定替换，在<code>MySQL</code>中使用 <code>?</code> 作为变量占位符</p></li><li><p><code>execute</code>用于<code>sql</code>执行</p></li><li><p><code>NaiveDateTime::parse_from_str</code>用于将字符串格式日期转为 <code>NaiveDateTime</code>,常用的格式：</p><p><code>%Y</code>：四位年份</p><p><code>%m</code>：两位月份</p><p><code>%d</code>：两位日期</p><p><code>%H</code>：24 小时制的小时</p><p><code>%M</code>：分钟</p><p><code>%S</code>：秒</p></li></ul><h4 id="3、数据查询并映射到-serde-json-Value"><a href="#3、数据查询并映射到-serde-json-Value" class="headerlink" title="3、数据查询并映射到 serde_json.Value"></a>3、数据查询并映射到 <code>serde_json.Value</code></h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-variable">select_sql</span> = <span class="hljs-string">&quot;select * from student&quot;</span>;<br><span class="hljs-keyword">let</span> <span class="hljs-variable">rows</span> = sqlx::<span class="hljs-title function_ invoke__">query</span>(select_sql).<span class="hljs-title function_ invoke__">fetch_all</span>(&amp;pool).<span class="hljs-keyword">await</span>?;<br><br><span class="hljs-comment">// 将结果映射为serde_json::Value</span><br><span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">json_rows</span>: <span class="hljs-type">Vec</span>&lt;Value&gt; = <span class="hljs-type">Vec</span>::<span class="hljs-title function_ invoke__">new</span>();<br><br><span class="hljs-keyword">for</span> <span class="hljs-variable">row</span> <span class="hljs-keyword">in</span> rows &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">json_row</span> = HashMap::<span class="hljs-title function_ invoke__">new</span>();<br><br>    <span class="hljs-comment">// 遍历所有列</span><br>    <span class="hljs-keyword">for</span> (i, column) <span class="hljs-keyword">in</span> row.<span class="hljs-title function_ invoke__">columns</span>().<span class="hljs-title function_ invoke__">iter</span>().<span class="hljs-title function_ invoke__">enumerate</span>() &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">column_name</span> = column.<span class="hljs-title function_ invoke__">name</span>();<br>        <span class="hljs-comment">// 动态获取列的值并判断类型</span><br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">value</span>: Value = <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> <span class="hljs-variable">Ok</span>(v) = row.try_get::&lt;<span class="hljs-type">i64</span>, _&gt;(column_name) &#123;<br>            json!(v)<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> <span class="hljs-variable">Ok</span>(v) = row.try_get::&lt;<span class="hljs-type">f64</span>, _&gt;(column_name) &#123;<br>            json!(v)<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> <span class="hljs-variable">Ok</span>(v) = row.try_get::&lt;<span class="hljs-type">String</span>, _&gt;(column_name) &#123;<br>            json!(v)<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> <span class="hljs-variable">Ok</span>(v) = row.try_get::&lt;<span class="hljs-type">bool</span>, _&gt;(column_name) &#123;<br>            json!(v)<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> <span class="hljs-variable">Ok</span>(v) = row.try_get::&lt;NaiveDateTime, _&gt;(column_name) &#123;<br>            json!(v)<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> <span class="hljs-variable">Ok</span>(v) = row.try_get::&lt;DateTime&lt;Utc&gt;, _&gt;(column_name) &#123;<br>            json!(v)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            Value::Null<br>        &#125;;<br><br>        json_row.<span class="hljs-title function_ invoke__">insert</span>(column_name.<span class="hljs-title function_ invoke__">to_string</span>(), value);<br>    &#125;<br>    json_rows.<span class="hljs-title function_ invoke__">push</span>(json!(json_row));<br>&#125;<br><br><span class="hljs-comment">// 打印 JSON 结果</span><br><span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, serde_json::<span class="hljs-title function_ invoke__">to_string_pretty</span>(&amp;json_rows)?);<br></code></pre></td></tr></table></figure><h4 id="4、使用-query-as-将结果映射到struct"><a href="#4、使用-query-as-将结果映射到struct" class="headerlink" title="4、使用 query_as 将结果映射到struct"></a>4、使用 query_as 将结果映射到struct</h4><p><code>query_as</code>函数运行时解析 SQL 语句，适合动态生成的查询，但没有编译时的类型安全检查</p><ul><li><p><code>struct</code>需要通过<code>sqlx::FromRow</code>进行类型转换</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#[derive(Debug, FromRow)]</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Student</span> &#123;<br>    id: <span class="hljs-type">i64</span>,<br>    name: <span class="hljs-type">String</span>,<br>    age: <span class="hljs-type">i8</span>,<br>    birthday: NaiveDateTime,<br>    create_date: <span class="hljs-type">Option</span>&lt;DateTime&lt;Utc&gt;&gt;,<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用 <code>sqlx::query_as::&lt;struct, _&gt;()</code>指定需要解析的类型</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 将结果映射到 struct</span><br><span class="hljs-keyword">let</span> <span class="hljs-variable">select_one_sql</span> = <span class="hljs-string">&quot;select * from student where id = ?&quot;</span>;<br><span class="hljs-keyword">let</span> <span class="hljs-variable">student</span>: Student = sqlx::query_as::&lt;_, Student&gt;(select_one_sql)<br>    .<span class="hljs-title function_ invoke__">bind</span>(<span class="hljs-number">1</span>) <span class="hljs-comment">// 使用 bind 来绑定查询参数</span><br>    .<span class="hljs-title function_ invoke__">fetch_one</span>(&amp;pool)<br>    .<span class="hljs-keyword">await</span>?;<br></code></pre></td></tr></table></figure></li></ul><h4 id="5、使用query-as-宏将结果映射到struct"><a href="#5、使用query-as-宏将结果映射到struct" class="headerlink" title="5、使用query_as!宏将结果映射到struct"></a>5、使用query_as!宏将结果映射到struct</h4><p><code>query_as!</code>宏会在编译时检查 <code>SQL</code> 语句的正确性，要求 <code>SQL </code>是静态字符串，确保类型匹配，另外<code>query_as!</code>宏不要求<code>struct</code>通过<code>sqlx::FromRow</code>进行类型转换</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-variable">student</span> = sqlx::query_as!(Student, <span class="hljs-string">&quot;SELECT * FROM student WHERE id = ?&quot;</span>, <span class="hljs-number">1</span>)<br>        .<span class="hljs-title function_ invoke__">fetch_one</span>(&amp;pool)<br>        .<span class="hljs-keyword">await</span>?;<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:?&#125;&quot;</span>, student);<br></code></pre></td></tr></table></figure><p>错误提示：</p><ul><li><code>expected string literal </code>:<code>SQL</code>语句不是直接的字符串，而是通过变量等形式引用，无法在编译期确定</li><li><code>error: set DATABASE_URL to use query macros online, or run cargo sqlx prepare to update the query cache</code>:在根目录下创建<code>.env</code>文件并添加<code>DATABASE_URL</code>环境变量可以解决问题</li></ul><h3 id="三、参考"><a href="#三、参考" class="headerlink" title="三、参考"></a>三、参考</h3><p><a href="https://docs.rs/sqlx/0.8.2/sqlx/index.html">https://docs.rs/sqlx/0.8.2/sqlx/index.html</a></p><p><a href="https://crates.io/crates/sqlx#usage">https://crates.io/crates/sqlx#usage</a></p>]]></content>
    
    
    <categories>
      
      <category>Rust</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sqlx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shell日常使用记录</title>
    <link href="/shell/common.html"/>
    <url>/shell/common.html</url>
    
    <content type="html"><![CDATA[<h3 id="一、使用find查找某个日期以后修改的文件"><a href="#一、使用find查找某个日期以后修改的文件" class="headerlink" title="一、使用find查找某个日期以后修改的文件"></a>一、使用find查找某个日期以后修改的文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">find . -newermt &quot;2022-03-22&quot; -type f<br></code></pre></td></tr></table></figure><p>此处的日期可以使用变量替换实现动态查询<br>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">curr_date=$(date &quot;+%Y-%m-%d&quot;)<br>find . -newermt &quot;$&#123;curr_date&#125;&quot; -type f<br></code></pre></td></tr></table></figure><h3 id="二、Shell中使用Map对象"><a href="#二、Shell中使用Map对象" class="headerlink" title="二、Shell中使用Map对象"></a>二、Shell中使用Map对象</h3><h4 id="1、Map声明"><a href="#1、Map声明" class="headerlink" title="1、Map声明"></a>1、Map声明</h4><p>方式一：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">declare -A myMap<br>myMap[&quot;key&quot;]=&quot;value&quot;<br></code></pre></td></tr></table></figure><p>方式二：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">declare -A myMap=([&quot;key1&quot;]=&quot;value1&quot; [&quot;key2&quot;]=&quot;value2&quot;)<br></code></pre></td></tr></table></figure><h4 id="2、获取Map的大小"><a href="#2、获取Map的大小" class="headerlink" title="2、获取Map的大小"></a>2、获取Map的大小</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &quot;$&#123;#myMap[@]&#125;&quot;<br></code></pre></td></tr></table></figure><h4 id="3、输出所有的Key"><a href="#3、输出所有的Key" class="headerlink" title="3、输出所有的Key"></a>3、输出所有的Key</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &quot;$&#123;!myMap[@]&#125;&quot;<br></code></pre></td></tr></table></figure><h4 id="4、输出所有的Value"><a href="#4、输出所有的Value" class="headerlink" title="4、输出所有的Value"></a>4、输出所有的Value</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &quot;$&#123;myMap[@]&#125;&quot;<br></code></pre></td></tr></table></figure><h4 id="5、遍历Map对象"><a href="#5、遍历Map对象" class="headerlink" title="5、遍历Map对象"></a>5、遍历Map对象</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">遍历所有的key</span><br>for key in $&#123;!myMap[@]&#125;;<br>do<br>    echo &quot;key=$&#123;key&#125;&quot;<br>    echo &quot;value=$&#123;myMap[$&#123;key&#125;]&#125;&quot;<br>done<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">遍历所有的value</span><br>for value in $&#123;myMap[@]&#125;;<br>do<br>    echo &quot;value=$&#123;value&#125;&quot;<br>done<br></code></pre></td></tr></table></figure><h3 id="三、使用awk实现数据分组统计"><a href="#三、使用awk实现数据分组统计" class="headerlink" title="三、使用awk实现数据分组统计"></a>三、使用awk实现数据分组统计</h3><p>数据实例：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs 1c">苹果<span class="hljs-string">|1</span><br>香蕉<span class="hljs-string">|2</span><br>苹果<span class="hljs-string">|1</span><br>香蕉<span class="hljs-string">|2</span><br>苹果<span class="hljs-string">|1</span><br></code></pre></td></tr></table></figure><h4 id="1、对数据分组后统计出现次数"><a href="#1、对数据分组后统计出现次数" class="headerlink" title="1、对数据分组后统计出现次数"></a>1、对数据分组后统计出现次数</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">-F 指定分隔符为 |</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">count[<span class="hljs-variable">$1</span>] 按照第一列数据进行分组统计</span><br>awk -F &#x27;|&#x27; &#x27;&#123;count[$1]++;&#125; END &#123;for(i in count) &#123;print i &quot;=&quot; count[i]&#125;&#125;&#x27; test.txt<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Shell</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java普通类操作Spring Bean</title>
    <link href="/spring/operation_bean.html"/>
    <url>/spring/operation_bean.html</url>
    
    <content type="html"><![CDATA[<p>基于spring boot 1.5.6版本<br>synchronized 防止实例同时访问修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringBeanTool</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ApplicationContextAware</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">applicationContext</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setApplicationContext</span><span class="hljs-params">(ApplicationContext applicationContext)</span> &#123;<br>        <span class="hljs-keyword">if</span> (SpringBeanTool.applicationContext == <span class="hljs-literal">null</span>) &#123;<br>            SpringBeanTool.applicationContext = applicationContext;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> ApplicationContext <span class="hljs-title function_">getApplicationContext</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> applicationContext;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getBean</span><span class="hljs-params">(Class clazz)</span> &#123;<br>        <span class="hljs-keyword">return</span> getApplicationContext().getBean(clazz);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>单例模式的RestTemplate</title>
    <link href="/spring/singleton_resttemplate.html"/>
    <url>/spring/singleton_resttemplate.html</url>
    
    <content type="html"><![CDATA[<p>在<code>Spring Boot</code> 升级到 <code>2.0</code> 以后，无法使用 <code>@Autowired</code> 直接注入 <code>RestTemplate</code> , 需要通过 <code>RestTemplateBuilder</code> 产生。基于此实现了一个单例模式的工具类，用于获取 <code>RestTemplate</code>，同时学习单例模式的写法。   </p><p>以下方法基于 <code>Spring Boot 2.1.5.RELEASE</code>测试通过</p><p>本文实现了三种方式：  </p><h4 id="1、线程安全的懒汉模式"><a href="#1、线程安全的懒汉模式" class="headerlink" title="1、线程安全的懒汉模式"></a>1、线程安全的懒汉模式</h4><p>由于方法锁的缘由，在并发访问的时候效率会降低</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RestTemplateUtil</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> RestTemplate restTemplate;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">RestTemplateUtil</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> RestTemplate <span class="hljs-title function_">getRestTemplate</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (restTemplate == <span class="hljs-literal">null</span>) &#123;<br>            restTemplate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplateBuilder</span>().builder();<br>        &#125;<br>        <span class="hljs-keyword">return</span> restTemplate;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、饿汉模式"><a href="#2、饿汉模式" class="headerlink" title="2、饿汉模式"></a>2、饿汉模式</h4><p>在类加载的时候初始化，常驻内存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RestTemplateUtil</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">RestTemplate</span> <span class="hljs-variable">restTemplate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplateBuilder</span>().builder();<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">RestTemplateUtil</span><span class="hljs-params">()</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> RestTemplate <span class="hljs-title function_">getRestTemplate</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> restTemplate;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3、枚举方式"><a href="#3、枚举方式" class="headerlink" title="3、枚举方式"></a>3、枚举方式</h4><p>推荐方法，参考《Effective Java》</p><ul><li>自有序列号  </li><li>保证只有一个实例  </li><li>线程安全</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">RestTemplateUtil</span> &#123;<br>    INSTANCE;<br><br>    <span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title function_">getRestTemplate</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplateBuilder</span>().builder()<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4、私有类模式"><a href="#4、私有类模式" class="headerlink" title="4、私有类模式"></a>4、私有类模式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RestTemplateUtil</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LazySingleton</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Singleton</span> <span class="hljs-variable">INSTANCE</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplateUtil</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> RestTemplateUtil <span class="hljs-title function_">getRestTemplateUtil</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> LazySingleton.INSTANCE;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RestTemplate</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自定义处理RestTemplate非200响应</title>
    <link href="/spring/resttemplate_statuscode.html"/>
    <url>/spring/resttemplate_statuscode.html</url>
    
    <content type="html"><![CDATA[<p><code>RestTemplate</code>对非200错误的响应默认做了处理，会丢失很多信息。尤其接口方在抛出错误的时候，将错误信息放在响应体的中；<br>这个时候如果不对响应做自定义处理是无法拿到响应结果的。  </p><p>自定义处理方式：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RestTemplateResponseErrorHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ResponseErrorHandler</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasError</span><span class="hljs-params">(ClientHttpResponse response)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">// 自定义响应码的正确性</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;   <span class="hljs-comment">// 认为所有结果都是正确的，转到上层处理</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleError</span><span class="hljs-params">(ClientHttpResponse response)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//对错误的处理，可以不做任何处理</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RestTemplate</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Boot JMS</title>
    <link href="/spring/jms.html"/>
    <url>/spring/jms.html</url>
    
    <content type="html"><![CDATA[<p>   使用spring-jms实现简单异步消息队列，用于异步通知以及异步事务处理。<br>项目：</p><ul><li>spring boot 2.2.2</li><li>基于内存模式的activiMQ消息队列</li><li>使用默认的Container</li></ul><h4 id="一、pom依赖"><a href="#一、pom依赖" class="headerlink" title="一、pom依赖"></a>一、pom依赖</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-boot-starter-activemq&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;org.apache.activemq&lt;/groupId&gt;<br>    &lt;artifactId&gt;activemq-broker&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;<br>    &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h4 id="二、JMS-config配置"><a href="#二、JMS-config配置" class="headerlink" title="二、JMS config配置"></a>二、JMS config配置</h4><p>进行文本的序列化(使用jackson)，支持对象参数<br>自定义ContainerFactory(自定义配置以后，需要在Listener处指定containerFactory)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    自定义配置</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> JmsListenerContainerFactory&lt;?&gt; myFactory(ConnectionFactory connectionFactory,<br>                                                    DefaultJmsListenerContainerFactoryConfigurer configurer) &#123;<br>        <span class="hljs-type">DefaultJmsListenerContainerFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultJmsListenerContainerFactory</span>();<br>        configurer.configure(factory, connectionFactory);<br>        <span class="hljs-keyword">return</span> factory;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span> <span class="hljs-comment">// 序列化文本,可以支持对象参数</span><br>    <span class="hljs-keyword">public</span> MessageConverter <span class="hljs-title function_">jacksonJmsMessageConverter</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">MappingJackson2MessageConverter</span> <span class="hljs-variable">converter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MappingJackson2MessageConverter</span>();<br>        converter.setTargetType(MessageType.TEXT);<br>        converter.setTypeIdPropertyName(<span class="hljs-string">&quot;_type&quot;</span>);   <span class="hljs-comment">// 不能为空,反序列化为object时需要</span><br>        <span class="hljs-keyword">return</span> converter;<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="三、消息生产者"><a href="#三、消息生产者" class="headerlink" title="三、消息生产者"></a>三、消息生产者</h4><ul><li>destinationName 消息消费者名称  </li><li>parameter 消费者所需参数，可以为对象<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> JmsTemplate jmsTemplate;<br><br>jmsTemplate.convertAndSend(destinationName, parameter);<br></code></pre></td></tr></table></figure></li></ul><h4 id="四、消息消费者"><a href="#四、消息消费者" class="headerlink" title="四、消息消费者"></a>四、消息消费者</h4><ul><li>destination 定义消费者名称，用户生产者调用；必须</li><li>containerFactory 指定自定义Container; 可选<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@JmsListener(destination = &quot;mailbox&quot;, containerFactory = &quot;myFactory&quot;)</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="五、其他"><a href="#五、其他" class="headerlink" title="五、其他"></a>五、其他</h4><p>需要在启动类允许jms <code>@EnableJms</code></p>]]></content>
    
    
    <categories>
      
      <category>JMS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Jms</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Feign调用全局header参数设置</title>
    <link href="/spring/feign_headers.html"/>
    <url>/spring/feign_headers.html</url>
    
    <content type="html"><![CDATA[<h3 id="一、实现-RequestInterceptor"><a href="#一、实现-RequestInterceptor" class="headerlink" title="一、实现 RequestInterceptor"></a>一、实现 <code>RequestInterceptor</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> feign.RequestInterceptor;<br><span class="hljs-keyword">import</span> feign.RequestTemplate;<br><span class="hljs-keyword">import</span> org.apache.commons.lang3.StringUtils;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.web.context.request.RequestContextHolder;<br><span class="hljs-keyword">import</span> org.springframework.web.context.request.ServletRequestAttributes;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> java.util.Objects;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FeignClientInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">RequestInterceptor</span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">apply</span><span class="hljs-params">(RequestTemplate template)</span> &#123;<br>        <span class="hljs-type">ServletRequestAttributes</span> <span class="hljs-variable">requestAttributes</span> <span class="hljs-operator">=</span> (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();<br>        <span class="hljs-keyword">if</span> (Objects.nonNull(requestAttributes)) &#123;<br>            <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> requestAttributes.getRequest();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">userLang</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;UserLang&quot;</span>);<br>            <span class="hljs-keyword">if</span> (StringUtils.isNotBlank(userLang)) &#123;<br>                template.header(<span class="hljs-string">&quot;UserLang&quot;</span>, userLang);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Spring Boot问题解决汇总</title>
    <link href="/spring/problems.html"/>
    <url>/spring/problems.html</url>
    
    <content type="html"><![CDATA[<h3 id="一、Invalid-value-type-for-attribute-factoryBeanObjectType-java-lang-String"><a href="#一、Invalid-value-type-for-attribute-factoryBeanObjectType-java-lang-String" class="headerlink" title="一、Invalid value type for attribute &#39;factoryBeanObjectType&#39;: java.lang.String"></a>一、<code>Invalid value type for attribute &#39;factoryBeanObjectType&#39;: java.lang.String</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><br>org.springframework.beans.factory.BeanDefinitionStoreException: Invalid bean definition with name <span class="hljs-string">&#x27;userMapper&#x27;</span> defined in file [shop-user/target/classes/cn/probiecoder/shopuser/mapper/UserMapper.class]: Invalid value type <span class="hljs-keyword">for</span> attribute <span class="hljs-string">&#x27;factoryBeanObjectType&#x27;</span>: java.lang.String<br>at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:<span class="hljs-number">857</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.12</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.12</span>]<br>at org.springframework.beans.factory.support.AbstractBeanFactory.getType(AbstractBeanFactory.java:<span class="hljs-number">743</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.12</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.12</span>]<br>at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAnnotationOnBean(DefaultListableBeanFactory.java:<span class="hljs-number">735</span>) ~[spring-beans-<span class="hljs-number">6.1</span><span class="hljs-number">.12</span>.jar:<span class="hljs-number">6.1</span><span class="hljs-number">.12</span>]<br>at org.springframework.boot.sql.init.dependency.AnnotationDependsOnDatabaseInitializationDetector.detect(AnnotationDependsOnDatabaseInitializationDetector.java:<span class="hljs-number">36</span>) ~[spring-boot-<span class="hljs-number">3.3</span><span class="hljs-number">.3</span>.jar:<span class="hljs-number">3.3</span><span class="hljs-number">.3</span>]<br>at <br></code></pre></td></tr></table></figure><p>升级<code>POM</code>依赖中<code>mybatis-spring</code>的版本高于<code>3.0.3</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果使用的是<code>mybatis-plus-boot-starter</code>需要先排除<code>mybatis-plus</code>引用的旧版本的<code>mybatis-spring</code>：&#96;</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;mybatis-plus.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="二-java-java-lang-NoSuchFieldError-Class-com-sun-tools-javac-tree-JCTree-JCImport-does-not-have-member-field-com-sun-tools-javac-tree-JCTree-qualid"><a href="#二-java-java-lang-NoSuchFieldError-Class-com-sun-tools-javac-tree-JCTree-JCImport-does-not-have-member-field-com-sun-tools-javac-tree-JCTree-qualid" class="headerlink" title="二 java: java.lang.NoSuchFieldError: Class com.sun.tools.javac.tree.JCTree$JCImport does not have member field &#39;com.sun.tools.javac.tree.JCTree qualid&#39;"></a>二 <code>java: java.lang.NoSuchFieldError: Class com.sun.tools.javac.tree.JCTree$JCImport does not have member field &#39;com.sun.tools.javac.tree.JCTree qualid&#39;</code></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">java: java.lang.NoSuchFieldError: Class com.sun.tools.javac.tree.JCTree$JCImport does not have member field <span class="hljs-string">&#x27;com.sun.tools.javac.tree.JCTree qualid&#x27;</span><br><br></code></pre></td></tr></table></figure><p>问题原因：</p><p><code>JDK21</code>版本要求的最低<code>lombok</code>版本为<code>1.18.30</code>，升级版本：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.34<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Spring EL表达式</title>
    <link href="/spring/spring_el.html"/>
    <url>/spring/spring_el.html</url>
    
    <content type="html"><![CDATA[<h4 id=""><a href="#" class="headerlink" title=""></a></h4><h3 id="一、Spring拦截器中获取自定义注解并计算el表达式"><a href="#一、Spring拦截器中获取自定义注解并计算el表达式" class="headerlink" title="一、Spring拦截器中获取自定义注解并计算el表达式"></a>一、Spring拦截器中获取自定义注解并计算el表达式</h3><table><thead><tr><th>类名</th><th>描述</th></tr></thead><tbody><tr><td><code>ExpressionParser</code></td><td>表达式的解析器，主要用来生产表达式</td></tr><tr><td><code>Expression</code></td><td>表达式对象</td></tr><tr><td><code>EvaluationContext</code></td><td>表达式运行的上下文。包含了表达式运行时的参数，以及需要执行方法的类</td></tr></tbody></table><h4 id="1、自定义注解"><a href="#1、自定义注解" class="headerlink" title="1、自定义注解"></a>1、自定义注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(ElementType.METHOD)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> CompletionInstance &#123;<br>    String <span class="hljs-title function_">instanceId</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、注解使用SpEL"><a href="#2、注解使用SpEL" class="headerlink" title="2、注解使用SpEL"></a>2、注解使用SpEL</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@CompletionInstance(instanceId = &quot;#dto.instanceId&quot;)</span><br></code></pre></td></tr></table></figure><p><code>dto</code>为一个对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dto</span> &#123;<br>    <span class="hljs-keyword">private</span> Long instanceId;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3、定义Aspect拦截"><a href="#3、定义Aspect拦截" class="headerlink" title="3、定义Aspect拦截"></a>3、定义Aspect拦截</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Order</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CompletionInstanceAspect</span> &#123;<br>    <span class="hljs-meta">@Around(value = &quot;@annotation(completionInstance)&quot;)</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">doProcess</span><span class="hljs-params">(ProceedingJoinPoint pjp, CompletionInstance completionInstance)</span> &#123;<br>        <span class="hljs-comment">// xxx</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>@Order</code>指定<code>Aspect</code>拦截优先级</li><li><code>@annotation</code>括号中为方法定义的需要拦截的注解参数名</li></ul><h4 id="4、解析SpEL获取实际值"><a href="#4、解析SpEL获取实际值" class="headerlink" title="4、解析SpEL获取实际值"></a>4、解析SpEL获取实际值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">MethodSignature</span> <span class="hljs-variable">signature</span> <span class="hljs-operator">=</span> (MethodSignature) pjp.getSignature();<br><span class="hljs-comment">// 获取方法参数</span><br>Object[] args = pjp.getArgs();<br><br><span class="hljs-comment">// 创建SpEL解析器</span><br><span class="hljs-type">ExpressionParser</span> <span class="hljs-variable">parser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpelExpressionParser</span>();<br><br><span class="hljs-comment">// 创建SpEL上下文</span><br><span class="hljs-type">StandardEvaluationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StandardEvaluationContext</span>();<br><span class="hljs-comment">// 此处设置SpEL表达式计算所需变量</span><br>String[] parameterNames = signature.getParameterNames();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; parameterNames.length; i++) &#123;<br>    context.setVariable(parameterNames[i], args[i]);<br>&#125;<br><br><span class="hljs-comment">// 获取注解上的SpEL表达式</span><br><span class="hljs-type">String</span> <span class="hljs-variable">expressionString</span> <span class="hljs-operator">=</span> completionInstance.instanceId();<br><br><span class="hljs-comment">// 解析和计算SpEL表达式</span><br><span class="hljs-type">Expression</span> <span class="hljs-variable">expression</span> <span class="hljs-operator">=</span> parser.parseExpression(expressionString);<br><span class="hljs-type">Long</span> <span class="hljs-variable">instanceId</span> <span class="hljs-operator">=</span> expression.getValue(context, Long.class);<br></code></pre></td></tr></table></figure><p><strong>可以将SpEL解析逻辑按需抽取</strong></p>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Spring 通过构造器自动注入所有子类</title>
    <link href="/spring/construct_autowired_subclass.html"/>
    <url>/spring/construct_autowired_subclass.html</url>
    
    <content type="html"><![CDATA[<p><strong>目的：</strong>通过反射的方式动态调用子类方法</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestContent</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RequestHandler</span>&gt;, RequestHandler&gt; handlerMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>();<br>    <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">RequestContext</span><span class="hljs-params">(Map&lt;String, RequestHandler&gt; handlers)</span> &#123;<br>        handler.forEach((k, v) -&gt; <span class="hljs-built_in">this</span>.handlerMap.put(v.getClass(), v));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Primevue+Tailwind CSS使用配置</title>
    <link href="/vue/primevue_tailwindcss.html"/>
    <url>/vue/primevue_tailwindcss.html</url>
    
    <content type="html"><![CDATA[<h4 id="1、创建vue项目"><a href="#1、创建vue项目" class="headerlink" title="1、创建vue项目"></a>1、创建vue项目</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm create vue@latest<br></code></pre></td></tr></table></figure><h4 id="2、安装primevue"><a href="#2、安装primevue" class="headerlink" title="2、安装primevue"></a>2、安装primevue</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install primevue<br></code></pre></td></tr></table></figure><p>在<code>main.js</code>中启用<code>primevue</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">PrimeVue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;primevue/config&#x27;</span>;<br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>);<br><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">PrimeVue</span>, &#123; <span class="hljs-comment">/* options */</span> &#125;);<br></code></pre></td></tr></table></figure><h4 id="3、启用组件自动导入"><a href="#3、启用组件自动导入" class="headerlink" title="3、启用组件自动导入"></a>3、启用组件自动导入</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i unplugin-vue-components -D<br>npm i @primevue/auto-import-resolver -D<br></code></pre></td></tr></table></figure><p>在<code>vite.config.js</code>中配置组件自动解析</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-keyword">import</span> &#123; defineConfig &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vite&#x27;</span><br><span class="hljs-keyword">import</span> vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@vitejs/plugin-vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Components</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;unplugin-vue-components/vite&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123;<span class="hljs-title class_">PrimeVueResolver</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@primevue/auto-import-resolver&#x27;</span>;<br><br><span class="hljs-comment">// https://vitejs.dev/config/</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>(&#123;<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-title function_">vue</span>(),<br>    <span class="hljs-title class_">Components</span>(&#123;<br>      <span class="hljs-attr">resolvers</span>: [<br>        <span class="hljs-title class_">PrimeVueResolver</span>()<br>      ]<br>    &#125;),<br>  ]<br>&#125;)<br><br></code></pre></td></tr></table></figure><h4 id="4、安装主题theme"><a href="#4、安装主题theme" class="headerlink" title="4、安装主题theme"></a>4、安装主题theme</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install @primevue/themes<br></code></pre></td></tr></table></figure><p>在<code>main.js</code>文件中配置主题：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">PrimeVue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;primevue/config&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Aura</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@primevue/themes/aura&#x27;</span>;<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>);<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">PrimeVue</span>, &#123;<br>    <span class="hljs-attr">theme</span>: &#123;<br>        <span class="hljs-attr">preset</span>: <span class="hljs-title class_">Aura</span><br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>当前<code>primevue</code>内置支持4种主题：<code>Aura, Material, Lara, Nora </code></p><h4 id="5、使用-primevueicons"><a href="#5、使用-primevueicons" class="headerlink" title="5、使用 primevueicons"></a>5、使用 primevueicons</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install primeicons<br></code></pre></td></tr></table></figure><h4 id="6、集成-tailwind-css"><a href="#6、集成-tailwind-css" class="headerlink" title="6、集成 tailwind css"></a>6、集成 tailwind css</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i tailwindcss-primeui<br><br>-- 生成 tailwind.config.js文件<br>npx tailwindcss init<br></code></pre></td></tr></table></figure><p>在应用<code>sytle.css</code>中加入以下内容：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">@tailwind base;<br>@tailwind components;<br>@tailwind utilities;<br></code></pre></td></tr></table></figure><p>在 <code>tailwind.config.js</code>文件中引入<code>primevue</code>支持</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> primeui = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;tailwindcss-primeui&#x27;</span>);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-attr">content</span>: [<span class="hljs-string">&#x27;./index.html&#x27;</span>, <span class="hljs-string">&#x27;./src/**/*.&#123;vue,js,ts,jsx,tsx&#125;&#x27;</span>],<br>    <span class="hljs-attr">darkMode</span>: [<span class="hljs-string">&#x27;selector&#x27;</span>, <span class="hljs-string">&#x27;[class=&quot;p-dark&quot;]&#x27;</span>],<br>    <span class="hljs-attr">plugins</span>: [primeui]<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="7、Noir主题js内容"><a href="#7、Noir主题js内容" class="headerlink" title="7、Noir主题js内容"></a>7、Noir主题js内容</h4><p>基于 <code>Aura</code>定制主题</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; definePreset &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@primevue/themes&#x27;</span>;<br>        <span class="hljs-keyword">import</span> <span class="hljs-title class_">Aura</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@primevue/themes/aura&#x27;</span>;<br><br>        <span class="hljs-keyword">const</span> <span class="hljs-title class_">Noir</span> = <span class="hljs-title function_">definePreset</span>(<span class="hljs-title class_">Aura</span>, &#123;<br>            <span class="hljs-attr">semantic</span>: &#123;<br>                <span class="hljs-attr">primary</span>: &#123;<br>                <span class="hljs-number">50</span>: <span class="hljs-string">&#x27;&#123;surface.50&#125;&#x27;</span>,<br>                <span class="hljs-number">100</span>: <span class="hljs-string">&#x27;&#123;surface.100&#125;&#x27;</span>,<br>                <span class="hljs-number">200</span>: <span class="hljs-string">&#x27;&#123;surface.200&#125;&#x27;</span>,<br>                <span class="hljs-number">300</span>: <span class="hljs-string">&#x27;&#123;surface.300&#125;&#x27;</span>,<br>                <span class="hljs-number">400</span>: <span class="hljs-string">&#x27;&#123;surface.400&#125;&#x27;</span>,<br>                <span class="hljs-number">500</span>: <span class="hljs-string">&#x27;&#123;surface.500&#125;&#x27;</span>,<br>                <span class="hljs-number">600</span>: <span class="hljs-string">&#x27;&#123;surface.600&#125;&#x27;</span>,<br>                <span class="hljs-number">700</span>: <span class="hljs-string">&#x27;&#123;surface.700&#125;&#x27;</span>,<br>                <span class="hljs-number">800</span>: <span class="hljs-string">&#x27;&#123;surface.800&#125;&#x27;</span>,<br>                <span class="hljs-number">900</span>: <span class="hljs-string">&#x27;&#123;surface.900&#125;&#x27;</span>,<br>                <span class="hljs-number">950</span>: <span class="hljs-string">&#x27;&#123;surface.950&#125;&#x27;</span><br>                &#125;,<br>                <span class="hljs-attr">colorScheme</span>: &#123;<br>                    <span class="hljs-attr">light</span>: &#123;<br>                        <span class="hljs-attr">primary</span>: &#123;<br>                        <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;&#123;primary.950&#125;&#x27;</span>,<br>                        <span class="hljs-attr">contrastColor</span>: <span class="hljs-string">&#x27;#ffffff&#x27;</span>,<br>                        <span class="hljs-attr">hoverColor</span>: <span class="hljs-string">&#x27;&#123;primary.900&#125;&#x27;</span>,<br>                        <span class="hljs-attr">activeColor</span>: <span class="hljs-string">&#x27;&#123;primary.800&#125;&#x27;</span><br>                        &#125;,<br>                        <span class="hljs-attr">highlight</span>: &#123;<br>                        <span class="hljs-attr">background</span>: <span class="hljs-string">&#x27;&#123;primary.950&#125;&#x27;</span>,<br>                        <span class="hljs-attr">focusBackground</span>: <span class="hljs-string">&#x27;&#123;primary.700&#125;&#x27;</span>,<br>                        <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;#ffffff&#x27;</span>,<br>                        <span class="hljs-attr">focusColor</span>: <span class="hljs-string">&#x27;#ffffff&#x27;</span><br>                        &#125;,<br>                    &#125;,<br>                    <span class="hljs-attr">dark</span>: &#123;<br>                        <span class="hljs-attr">primary</span>: &#123;<br>                        <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;&#123;primary.50&#125;&#x27;</span>,<br>                        <span class="hljs-attr">contrastColor</span>: <span class="hljs-string">&#x27;&#123;primary.950&#125;&#x27;</span>,<br>                        <span class="hljs-attr">hoverColor</span>: <span class="hljs-string">&#x27;&#123;primary.100&#125;&#x27;</span>,<br>                        <span class="hljs-attr">activeColor</span>: <span class="hljs-string">&#x27;&#123;primary.200&#125;&#x27;</span><br>                        &#125;,<br>                        <span class="hljs-attr">highlight</span>: &#123;<br>                        <span class="hljs-attr">background</span>: <span class="hljs-string">&#x27;&#123;primary.50&#125;&#x27;</span>,<br>                        <span class="hljs-attr">focusBackground</span>: <span class="hljs-string">&#x27;&#123;primary.300&#125;&#x27;</span>,<br>                        <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;&#123;primary.950&#125;&#x27;</span>,<br>                        <span class="hljs-attr">focusColor</span>: <span class="hljs-string">&#x27;&#123;primary.950&#125;&#x27;</span><br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;);<br><br>        <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Noir</span>;<br>        <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>使用Resilience4j CircuitBreaker实现服务调用熔断</title>
    <link href="/resilience4j/circuitbreaker.html"/>
    <url>/resilience4j/circuitbreaker.html</url>
    
    <content type="html"><![CDATA[<p>断路器<code>CircitBreaker</code>是 Resilience4j 的核心机制，通过<strong>有限状态机</strong>和<strong>环形位缓冲区（Ring Bit Buffer）</strong> 实现故障检测与熔断</p><p><code>CircitBreaker</code>采用装饰器模式对原有请求进行装饰，同时会增加方法执行时间的计算，方法执行结束后发生状态的流转。</p><h2 id="一、基础概念"><a href="#一、基础概念" class="headerlink" title="一、基础概念"></a>一、基础概念</h2><h3 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h3><p>滑动窗口可以类比为一个环形的圆圈，这个圆圈存储的元素上限就是<code>slidingWindowSize</code>。对于时间计数而言，这个圆圈代表的就是<code>slidingWindowSize</code>秒内接受处理的请求，对这些请求进行聚合计算，超过滑动窗口的调用会被丢弃；对于次数计数而言，这个圆圈代表的就是最近<code>slidingWindowSize</code>次调用，对最近的这些请求进行聚合计算。</p><h3 id="状态流转"><a href="#状态流转" class="headerlink" title="状态流转"></a>状态流转</h3><p><code>Resilience4j</code>支持的状态包含三个普通状态：<code>CLOSED</code>、<code>OPEN</code>和<code>HALF_OPEN</code>以及三个特殊状态：<code>METRICS_ONLY</code>、<code>DISABLED</code>和<code>FORCED_OPEN</code>；熔断主要使用前三个状态。</p><p><img src="https://raw.githubusercontent.com/duwei0227/picbed/main/39cdd54-state_machine.jpg" alt="img"></p><p><code>CLOSED --&gt; OPEN</code>状态变更：</p><p>前提：调用次数需要达到最小调用次数<code>minimumNumberOfCalls</code>要求</p><ul><li>失败调用（默认所有异常都算作失败）比例超过阈值<code>ailureRateThreshold</code></li><li>慢调用比例超过阈值<code>slowCallRateThreshold</code></li></ul><p><code>OPEN --&gt; HALF_OPEN</code>状态变更：</p><p>状态处于<code>OPEN</code>时，所有的请求会字节被熔断并抛出 <code>CallNotPermittedException</code> 异常。</p><p>前提：等待时间已经达到<code>OPEN</code>状态最大等待时间<code>waitDurationInOpenState</code>，熔断器尝试开始接受请求</p><ul><li>启用自动状态转换配置<code>automaticTransitionFromOpenToHalfOpenEnabled</code>，会由监控线程将状态变更为<code>HALF_OPEN</code>接受请求</li><li>超过最大等待时间后，在尝试获取凭证时，会将状态变更为<code>HALF_OPEN</code></li></ul><p><code>HALF_OPEN --&gt; OPEN</code>状态变更：</p><ul><li>允许执行请求的授权凭证<code>permittedNumberOfCallsInHalfOpenState</code>聚合计算后，失败比例或者慢调用还是超过阈值</li><li>设置<code>HALF_OPEN</code>状态最大等待时间<code>maxWaitDurationInHalfOpenState</code>非0时，超过等待时间，请请求记录无法计算阈值比较时，会将状态变更为<code>OPEN</code></li></ul><p><code>HALF_OPEN --&gt; CLOSED</code>状态变更：</p><ul><li>失败比例和慢调用比例低于失败阈值和慢调用阈值</li></ul><h2 id="二、配置属性"><a href="#二、配置属性" class="headerlink" title="二、配置属性"></a>二、配置属性</h2><h3 id="1、滑动窗口定义"><a href="#1、滑动窗口定义" class="headerlink" title="1、滑动窗口定义"></a>1、滑动窗口定义</h3><table><thead><tr><th>配置属性</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td><code>slidingWindowType</code></td><td><code>count_based</code></td><td>滑动窗口类型，支持<code>count_based</code>和<code>time_based</code>，如果类型为<code>count_based</code>，最近的<code>slidingWindowSize</code>会记录和聚合，如果类型为<code>time_based</code>，最近的<code>slidingWindowSize</code>秒的请求会记录和聚合</td></tr><tr><td><code>slidingWindowSize</code></td><td>100</td><td>滑动窗口的大小，当状态为<code>CLOSED</code>时记录请求结果</td></tr><tr><td><code>minimumNumberOfCalls</code></td><td>100</td><td>每个窗口周期最小调用次数，达到最小调用次数时才会用于失败率和慢调用。例如，配置值为10时，调用次数必须到达10次，才会进行结果计算，如果在窗口周期内只调用了9次，即使全部失败也不会触发熔断器计算</td></tr></tbody></table><h3 id="2、失败、超时阈值"><a href="#2、失败、超时阈值" class="headerlink" title="2、失败、超时阈值"></a>2、失败、超时阈值</h3><table><thead><tr><th>配置属性</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td><code>failureRateThreshold</code></td><td>50</td><td>失败阈值，百分比；如果失败比例大于等与阈值时，状态由<code>CLOSED</code>变为<code>OPEN</code></td></tr><tr><td><code>slowCallRateThreshold</code></td><td>100</td><td>慢调用阈值，百分比；如果调用执行事件大于 <code>slowCallDurationThreshold</code>时认为是慢调用</td></tr><tr><td><code>slowCallDurationThreshold</code></td><td>60s</td><td>慢调用阈值，超过当前值考虑为慢调用</td></tr></tbody></table><h3 id="3、状态轮转"><a href="#3、状态轮转" class="headerlink" title="3、状态轮转"></a>3、状态轮转</h3><table><thead><tr><th>配置属性</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td><code>permittedNumberOfCallsInHalfOpenState</code></td><td>10</td><td>状态为<code>HALF_OPEN</code>时允许通过的调用凭证数</td></tr><tr><td><code>maxWaitDurationInHalfOpenState</code></td><td>0[ms]</td><td><code>HALF_OPEN</code>状态保持的最大时间，超过该时间状态会变为<code>OPEN</code>；如果配置为0时会等待所有的凭证完成请求</td></tr><tr><td><code>automaticTransitionFromOpenToHalfOpenEnabled</code></td><td><code>false</code></td><td><code>true</code>:状态会自动由<code>OPEN</code>变为<code>HALF_OPEN</code>,不需要由请求触发，同时会创建一个线程监控实例是否已经达到<code>waitDurationInOpenState</code>时间<br/><code>false</code>:状态不会自动发生转换，需要有请求发生触发状态变更为<code>HALF_OPEN</code>，同时也不会启动一个监控线程检查</td></tr><tr><td><code>waitDurationInOpenState</code></td><td>60s</td><td><code>OPEN</code>状态时，状态变为<code>HALF_OPEN</code>的最大等待时间，启用状态自动变化时才生效</td></tr><tr><td><code>enableExponentialBackoff</code></td><td></td><td>采用指数增长计算<code>OPEN</code>状态等待时间<br/><code>wait_time = initial_interval * (multiplier ^ (retry_attempt - 1))</code></td></tr><tr><td><code>exponentialBackoffMultiplier</code></td><td></td><td>指数增长因子</td></tr><tr><td><code>exponentialMaxWaitDurationInOpenState</code></td><td></td><td>指数增长方式允许的最大值</td></tr><tr><td><code>enableRandomizedWait</code></td><td></td><td>是否采用随即时间等待，随机值：当前值 * 随机因子</td></tr><tr><td><code>randomizedWaitFactor</code></td><td></td><td>随机因子</td></tr></tbody></table><h3 id="4、失败异常"><a href="#4、失败异常" class="headerlink" title="4、失败异常"></a>4、失败异常</h3><table><thead><tr><th>配置属性</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td><code>recordExceptions</code></td><td><code>null</code>默认记录所有异常</td><td>需要作为失败记录的异常列表，和列表匹配或者时继承列表中的异常都会算作失败；如果指定了异常列表，默认其他异常都作为成功，除非明确在<code>ignoreException</code>列出</td></tr><tr><td><code>ignoreExceptions</code></td><td><code>null</code></td><td>一个异常列表，即不作为成功也不作为失败，不会导致成功和失败数目增加</td></tr><tr><td><code>recordFailurePredicate</code></td><td><code>throwable -&gt; true</code> 默认记录所有异常</td><td>一个自定义的<code>Predicate</code>，用于判断异常是否作为失败异常记录</td></tr><tr><td><code>ignoreExceptionPredicate</code></td><td><code>throwable -&gt; false</code></td><td>一个自定义的<code>Predicate</code>，用于判断异常是否需要被忽略</td></tr><tr><td><code>writableStackTraceEnabled</code></td><td><code>true</code></td><td>是否打印详细日志堆栈，此配置只针对断路器处于<code>OPEN</code>状态时熔断请求时抛出异常<code>CallNotPermittedException</code></td></tr></tbody></table><h3 id="5、检测指标"><a href="#5、检测指标" class="headerlink" title="5、检测指标"></a>5、检测指标</h3><ul><li><code>resilience4j.circuitbreaker.metrics.enabled = true</code></li><li><code>resilience4j.circuitbreaker.configs.defaults.register-health-indicator = true</code></li><li><code>management.health.circuitbreakers.enabled = true</code></li></ul><h2 id="三、使用示例"><a href="#三、使用示例" class="headerlink" title="三、使用示例"></a>三、使用示例</h2><h3 id="1、基础置"><a href="#1、基础置" class="headerlink" title="1、基础置"></a>1、基础置</h3><h4 id="1-1-pom依赖"><a href="#1-1-pom依赖" class="headerlink" title="1.1 pom依赖"></a>1.1 <code>pom</code>依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.github.resilience4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>resilience4j-spring-boot3<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.vavr<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>vavr<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.10.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="1-2-yaml配置"><a href="#1-2-yaml配置" class="headerlink" title="1.2 yaml配置"></a>1.2 yaml配置</h4><ul><li><code>resilience4j.circuitbreaker.configs</code>：定义<code>CircuitBreaker</code>配置信息</li><li><code>resilience4j.circuitbreaker.instances</code>：定义<code>CircuitBreaker</code>实例信息</li><li><code>resilience4j.circuitbreaker.metrics</code>：定义<code>CircuitBreaker</code>指标信息</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">management:</span><br>  <span class="hljs-attr">endpoints:</span><br>    <span class="hljs-attr">web:</span><br>      <span class="hljs-attr">exposure:</span><br>        <span class="hljs-attr">include:</span> <span class="hljs-string">&#x27;*&#x27;</span>  <span class="hljs-comment"># 暴露所有端口，可以根据需要暴露</span><br>  <span class="hljs-attr">endpoint:</span><br>    <span class="hljs-attr">health:</span><br>      <span class="hljs-attr">show-details:</span> <span class="hljs-string">always</span><br><br>  <span class="hljs-attr">health:</span><br>    <span class="hljs-attr">circuitbreakers:</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># 将 circuitbreaker 注册到 /actuator/health  </span><br><br><span class="hljs-attr">resilience4j:</span><br>  <span class="hljs-attr">circuitbreaker:</span><br>    <span class="hljs-attr">configs:</span><span class="hljs-comment"># 定义配置信息，可以在instance配置或者代码中引用</span><br>      <span class="hljs-attr">default:</span>   <span class="hljs-comment"># 命名为 default 可以作为全局默认配置</span><br>        <span class="hljs-attr">register-health-indicator:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">sliding-window-size:</span> <span class="hljs-number">10</span>  <span class="hljs-comment"># 基于时间时，单位为秒，统计数据会随着时间窗口滚动丢弃超过10秒的数据</span><br>        <span class="hljs-attr">sliding-window-type:</span> <span class="hljs-string">time_based</span><br>        <span class="hljs-attr">minimum-number-of-calls:</span> <span class="hljs-number">5</span><br>        <span class="hljs-attr">slow-call-duration-threshold:</span> <span class="hljs-string">1s</span><br>        <span class="hljs-attr">slow-call-rate-threshold:</span> <span class="hljs-number">50</span><br>        <span class="hljs-attr">permitted-number-of-calls-in-half-open-state:</span> <span class="hljs-number">3</span>  <span class="hljs-comment"># 半打开状态时，也会计算比例</span><br>        <span class="hljs-attr">automatic-transition-from-open-to-half-open-enabled:</span> <span class="hljs-literal">true</span>   <span class="hljs-comment"># 为true时，等待一定时间后自动变更状态为 half_open</span><br>        <span class="hljs-attr">wait-duration-in-open-state:</span> <span class="hljs-string">15s</span><br>        <span class="hljs-attr">enable-exponential-backoff:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 是否开启指数递增失败等待</span><br>        <span class="hljs-attr">exponential-backoff-multiplier:</span> <span class="hljs-number">2</span>   <span class="hljs-comment"># 乘数，当失败率超过阈值时，等待时间会乘以这个乘数，直到达到最大等待时间</span><br>        <span class="hljs-attr">exponential-max-wait-duration-in-open-state:</span> <span class="hljs-string">5m</span><br>        <span class="hljs-attr">enable-randomized-wait:</span> <span class="hljs-literal">false</span><br>        <span class="hljs-attr">randomized-wait-factor:</span> <span class="hljs-number">0.5</span><br>        <span class="hljs-attr">max-wait-duration-in-half-open-state:</span> <span class="hljs-string">0ms</span> <span class="hljs-comment"># 0ms 表示一直等待，直到所有的 permitted 调用完成，非0时达到最大等待时间后，会将状态变更为 open</span><br>        <span class="hljs-attr">failure-rate-threshold:</span> <span class="hljs-number">50</span><br>        <span class="hljs-attr">event-consumer-buffer-size:</span> <span class="hljs-number">10</span><br><span class="hljs-comment">#        writable-stack-trace-enabled: true   # 是否记录 CallNotPermittedException 异常完整堆栈信息</span><br><br>        <span class="hljs-attr">record-exceptions:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">org.springframework.web.client.HttpServerErrorException</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">java.util.concurrent.TimeoutException</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">java.io.IOException</span><br>        <span class="hljs-attr">ignore-exceptions:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">cn.probiecoder.spring_boot_resilience4j_demo.exception.BusinessException</span><br><br>      <span class="hljs-attr">shared:</span><br>        <span class="hljs-attr">sliding-window-type:</span> <span class="hljs-string">count_based</span><br>        <span class="hljs-attr">sliding-window-size:</span> <span class="hljs-number">8</span><br>        <span class="hljs-attr">minimum-number-of-calls:</span> <span class="hljs-number">4</span><br>        <span class="hljs-attr">automatic-transition-from-open-to-half-open-enabled:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">permitted-number-of-calls-in-half-open-state:</span> <span class="hljs-number">2</span><br>        <span class="hljs-attr">wait-duration-in-open-state:</span> <span class="hljs-string">3s</span><br>        <span class="hljs-attr">failure-rate-threshold:</span> <span class="hljs-number">50</span><br>        <span class="hljs-attr">event-consumer-buffer-size:</span> <span class="hljs-number">10</span><br>        <span class="hljs-attr">ignore-exceptions:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-string">cn.probiecoder.spring_boot_resilience4j_demo.exception.BusinessException</span><br>    <span class="hljs-attr">instances:</span>  <span class="hljs-comment"># 定义 CircuitBreaker 实例</span><br>      <span class="hljs-attr">backendA:</span><br>        <span class="hljs-attr">base-config:</span> <span class="hljs-string">default</span> <span class="hljs-comment"># 引用config配置</span><br>      <span class="hljs-attr">backendB:</span><br>        <span class="hljs-attr">register-health-indicator:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">sliding-window-size:</span> <span class="hljs-number">10</span><br>        <span class="hljs-attr">minimum-number-of-calls:</span> <span class="hljs-number">10</span><br>        <span class="hljs-attr">permitted-number-of-calls-in-half-open-state:</span> <span class="hljs-number">3</span><br>        <span class="hljs-attr">wait-duration-in-open-state:</span><br>          <span class="hljs-attr">seconds:</span> <span class="hljs-number">5</span><br>        <span class="hljs-attr">failure-rate-threshold:</span> <span class="hljs-number">50</span><br>        <span class="hljs-attr">event-consumer-buffer-size:</span> <span class="hljs-number">10</span><br>        <span class="hljs-attr">record-failure-predicate:</span> <span class="hljs-string">cn.probiecoder.spring_boot_resilience4j_demo.exception.RecordFailurePredicate</span><br>    <span class="hljs-attr">metrics:</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># 启用指标数据监控</span><br></code></pre></td></tr></table></figure><h3 id="2、使用注解"><a href="#2、使用注解" class="headerlink" title="2、使用注解"></a>2、使用注解</h3><h4 id="2-1-使用固定名称并指定fallback"><a href="#2-1-使用固定名称并指定fallback" class="headerlink" title="2.1 使用固定名称并指定fallback"></a>2.1 使用固定名称并指定fallback</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">BACKEND_A</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;backendA&quot;</span>;<br><br><span class="hljs-meta">@CircuitBreaker(name = BACKEND_A, fallbackMethod = &quot;fallback&quot;)</span><br></code></pre></td></tr></table></figure><h4 id="2-2-使用方法名作为CircuitBreaker名称"><a href="#2-2-使用方法名作为CircuitBreaker名称" class="headerlink" title="2.2 使用方法名作为CircuitBreaker名称"></a>2.2 使用方法名作为CircuitBreaker名称</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@CircuitBreaker(name = &quot;#root.methodName&quot;)</span><br></code></pre></td></tr></table></figure><h4 id="2-3-使用Spel表达时动态获取参数作为CircuitBreaker名称"><a href="#2-3-使用Spel表达时动态获取参数作为CircuitBreaker名称" class="headerlink" title="2.3 使用Spel表达时动态获取参数作为CircuitBreaker名称"></a>2.3 使用Spel表达时动态获取参数作为CircuitBreaker名称</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@CircuitBreaker(name = &quot;#p0&quot;)</span><br><br><span class="hljs-meta">@CircuitBreaker(name = &quot;#root.args[0]&quot;)</span><br><br><span class="hljs-meta">@CircuitBreaker(name = &quot;#a0&quot;)</span><br></code></pre></td></tr></table></figure><h3 id="3、代码自定义装饰"><a href="#3、代码自定义装饰" class="headerlink" title="3、代码自定义装饰"></a>3、代码自定义装饰</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> CircuitBreakerRegistry circuitBreakerRegistry;  <span class="hljs-comment">// 使用全局的registry</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">BackendAServiceImpl</span><span class="hljs-params">(CircuitBreakerRegistry circuitBreakerRegistry)</span> &#123;<br>    <span class="hljs-built_in">this</span>.circuitBreakerRegistry = circuitBreakerRegistry;<br>&#125;<br><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">customConfigFailure</span><span class="hljs-params">()</span> &#123;<br>    io.github.resilience4j.circuitbreaker.<span class="hljs-type">CircuitBreaker</span> <span class="hljs-variable">circuitBreaker</span> <span class="hljs-operator">=</span> circuitBreakerRegistry.circuitBreaker(<span class="hljs-string">&quot;customConfig&quot;</span>, <span class="hljs-string">&quot;shared&quot;</span>);<br><br><br>    Supplier&lt;String&gt; supplier = io.github.resilience4j.circuitbreaker.CircuitBreaker.decorateSupplier(circuitBreaker, () -&gt;&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpServerErrorException</span>(HttpStatus.INTERNAL_SERVER_ERROR, <span class="hljs-string">&quot;This is a remote exception&quot;</span>);<br>    &#125;);<br><br>    <span class="hljs-comment">// 此处使用 Try 需要引入 vavr 包</span><br>    <span class="hljs-keyword">return</span> Try.ofSupplier(supplier).recover(th -&gt; <span class="hljs-string">&quot;Recovered: &quot;</span> + th.toString()).get();<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="四、附录"><a href="#四、附录" class="headerlink" title="四、附录"></a>四、附录</h2><p><a href="https://github.com/resilience4j/resilience4j-spring-boot3-demo/tree/master">https://github.com/resilience4j/resilience4j-spring-boot3-demo/tree/master</a></p><p><a href="https://resilience4j.readme.io/docs/circuitbreaker">https://resilience4j.readme.io/docs/circuitbreaker</a></p>]]></content>
    
    
    <categories>
      
      <category>Resilience4j</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SQL知识点</title>
    <link href="/mysql/common.html"/>
    <url>/mysql/common.html</url>
    
    <content type="html"><![CDATA[<p>SQL知识点记录</p><h3 id="1、Oracle查询支持正则化"><a href="#1、Oracle查询支持正则化" class="headerlink" title="1、Oracle查询支持正则化"></a>1、Oracle查询支持正则化</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> job <span class="hljs-keyword">where</span> regexp_like(name, <span class="hljs-string">&#x27;^[0-9]+&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="2、MySql索引相关"><a href="#2、MySql索引相关" class="headerlink" title="2、MySql索引相关"></a>2、MySql索引相关</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 查询表索引<br><span class="hljs-keyword">show</span> index <span class="hljs-keyword">from</span> table_name;<br><br># 创建索引<br><span class="hljs-keyword">alter table</span> table_name <span class="hljs-keyword">add</span> <span class="hljs-keyword">unique</span> index (column_name);<br># 追加索引之前需要删除旧的索引，使用如下方式重新创建，否则索引不生效<br><span class="hljs-keyword">alter table</span> table_name <span class="hljs-keyword">add</span> <span class="hljs-keyword">unique</span> index (column_old_index, column_new_index);<br><br># 删除索引<br><span class="hljs-keyword">alter table</span> table_name <span class="hljs-keyword">drop</span> index column_name;<br></code></pre></td></tr></table></figure><h3 id="3、删除column"><a href="#3、删除column" class="headerlink" title="3、删除column"></a>3、删除column</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter table</span> table_name <span class="hljs-keyword">drop</span> <span class="hljs-keyword">column</span> column_name;<br></code></pre></td></tr></table></figure><h3 id="4、Mysql-字符串格式日期转换"><a href="#4、Mysql-字符串格式日期转换" class="headerlink" title="4、Mysql 字符串格式日期转换"></a>4、Mysql 字符串格式日期转换</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">str_to_date(date, format)<br>%Y:年<br>%m:月<br>%d:天<br>%H:时<br>%i:分<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SQL</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MySQL数据库表关联</title>
    <link href="/mysql/join.html"/>
    <url>/mysql/join.html</url>
    
    <content type="html"><![CDATA[<pre><code class="hljs">在实际业务项目中经常会存在不同的业务表进行关联查询的需要，本文从如下几个方式讲解。</code></pre><h3 id="1、where"><a href="#1、where" class="headerlink" title="1、where"></a>1、where</h3><p>语法格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">from</span> a, b <span class="hljs-keyword">where</span> a.id <span class="hljs-operator">=</span> b.id<br></code></pre></td></tr></table></figure><p><code>where</code>使用a表和b表的一个或者多个字段进行数据关联，如果关联时其中一方没有符合条件的记录，那么查询结果返回为空</p><h4 id="1-1-a和b有一条记录匹配"><a href="#1-1-a和b有一条记录匹配" class="headerlink" title="1.1 a和b有一条记录匹配"></a>1.1 a和b有一条记录匹配</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> a, b <span class="hljs-keyword">where</span> a.id <span class="hljs-operator">=</span> b.id <span class="hljs-keyword">and</span> a.id <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">----+-----+----+-----+</span><br><span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> var <span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> var <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+-----+----+-----+</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">2</span> <span class="hljs-operator">|</span> C   <span class="hljs-operator">|</span>  <span class="hljs-number">2</span> <span class="hljs-operator">|</span> D   <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+-----+----+-----+</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><h4 id="1-2-a和b表数据量不匹配"><a href="#1-2-a和b表数据量不匹配" class="headerlink" title="1.2 a和b表数据量不匹配"></a>1.2 a和b表数据量不匹配</h4><p>当a和b表匹配条件的数据量不一致时，所有符合条件的记录都会返回;数据量少的一方会将结果进行复制拼接返回到客户端 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> a, b <span class="hljs-keyword">where</span> a.id <span class="hljs-operator">=</span> b.id <span class="hljs-keyword">and</span> a.id <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">----+-----+----+-----+</span><br><span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> var <span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> var <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+-----+----+-----+</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> B   <span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> A   <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> A   <span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> A   <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+-----+----+-----+</span><br><span class="hljs-number">2</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.01</span> sec)<br></code></pre></td></tr></table></figure><h4 id="1-3-无匹配的记录"><a href="#1-3-无匹配的记录" class="headerlink" title="1.3 无匹配的记录"></a>1.3 无匹配的记录</h4><p>当根据条件匹配查询无记录时，<code>MySQL</code>不会返回任何记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> a, b <span class="hljs-keyword">where</span> a.id <span class="hljs-operator">=</span> b.id <span class="hljs-keyword">and</span> b.id <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br><span class="hljs-keyword">Empty</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><h3 id="2、左关联left-join"><a href="#2、左关联left-join" class="headerlink" title="2、左关联left join"></a>2、左关联left join</h3><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">xxx <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> yyy <span class="hljs-keyword">on</span> <br></code></pre></td></tr></table></figure><p><code>left join</code>以左边表为驱动表(主表)，在进行数据匹配时，驱动表的记录只要符合查询条件都会返回，从表的记录如果符合查询条件会拼接到结果集右边，如果没有记录匹配设置字段值为<code>NULL</code>拼接到结果集右边返回到客户端</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> t1.<span class="hljs-operator">*</span>, t2.<span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> a t1 <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> b t2 <span class="hljs-keyword">on</span> t1.id <span class="hljs-operator">=</span> t2.id <span class="hljs-keyword">where</span> t1.id <span class="hljs-keyword">in</span> (<span class="hljs-number">2</span>, <span class="hljs-number">4</span>);<br><span class="hljs-operator">+</span><span class="hljs-comment">----+-----+------+------+</span><br><span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> var <span class="hljs-operator">|</span> id   <span class="hljs-operator">|</span> var  <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+-----+------+------+</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">2</span> <span class="hljs-operator">|</span> C   <span class="hljs-operator">|</span>    <span class="hljs-number">2</span> <span class="hljs-operator">|</span> D    <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">4</span> <span class="hljs-operator">|</span> F   <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+-----+------+------+</span><br><span class="hljs-number">2</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><h3 id="3、右关联-right-join"><a href="#3、右关联-right-join" class="headerlink" title="3、右关联 right join"></a>3、右关联 right join</h3><p>语法格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">xxx <span class="hljs-keyword">right</span> <span class="hljs-keyword">join</span> yyy <span class="hljs-keyword">on</span> <br></code></pre></td></tr></table></figure><p><code>right join</code>和<code>left join</code>原理类似，只是驱动表是右边表,同样的优先匹配驱动表记录，驱动表的记录只要符合查询条件都会返回，从表的记录如果符合查询条件会拼接到结果集左边，如果没有记录匹配设置字段值为<code>NULL</code>拼接到结果集左边返回到客户端</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> t1.<span class="hljs-operator">*</span>, t2.<span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> a t1 <span class="hljs-keyword">right</span> <span class="hljs-keyword">join</span> b t2 <span class="hljs-keyword">on</span> t1.id <span class="hljs-operator">=</span> t2.id <span class="hljs-keyword">where</span> t2.id <span class="hljs-keyword">in</span> (<span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br><span class="hljs-operator">+</span><span class="hljs-comment">------+------+----+-----+</span><br><span class="hljs-operator">|</span> id   <span class="hljs-operator">|</span> var  <span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> var <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------+------+----+-----+</span><br><span class="hljs-operator">|</span>    <span class="hljs-number">2</span> <span class="hljs-operator">|</span> C    <span class="hljs-operator">|</span>  <span class="hljs-number">2</span> <span class="hljs-operator">|</span> D   <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span> <span class="hljs-operator">|</span>  <span class="hljs-number">3</span> <span class="hljs-operator">|</span> E   <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">------+------+----+-----+</span><br><span class="hljs-number">2</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><h3 id="4、union并集关联"><a href="#4、union并集关联" class="headerlink" title="4、union并集关联"></a>4、union并集关联</h3><p>语法格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> xxx <span class="hljs-keyword">from</span> a <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> yyy <span class="hljs-keyword">from</span> b; <br></code></pre></td></tr></table></figure><p><code>union</code>操作不需要<code>left join</code>或<code>right join</code>的<code>on</code>进行条件关联，但是查询结果字段位数需要一一对应，<code>union</code>操作会将结果集进行纵向合并返回;各自的<code>sql</code>语句独立可以有自己的<code>where</code>条件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> t1.<span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> a t1 <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> t2.<span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> b t2;<br><span class="hljs-operator">+</span><span class="hljs-comment">----+-----+</span><br><span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> var <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+-----+</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> A   <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> B   <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">2</span> <span class="hljs-operator">|</span> C   <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">4</span> <span class="hljs-operator">|</span> F   <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">2</span> <span class="hljs-operator">|</span> D   <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">3</span> <span class="hljs-operator">|</span> E   <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+-----+</span><br><span class="hljs-number">6</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.01</span> sec)<br></code></pre></td></tr></table></figure><p>查询子句包含<code>where</code>条件：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> t1.<span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> a t1 <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> t2.<span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> b t2 <span class="hljs-keyword">where</span> t2.id <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>    <span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span> ;<br><span class="hljs-operator">+</span><span class="hljs-comment">----+-----+</span><br><span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> var <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+-----+</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> A   <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> B   <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">2</span> <span class="hljs-operator">|</span> C   <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">4</span> <span class="hljs-operator">|</span> F   <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+-----+</span><br><span class="hljs-number">4</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><h3 id="5、附录"><a href="#5、附录" class="headerlink" title="5、附录"></a>5、附录</h3><h4 id="5-1-建表语句"><a href="#5-1-建表语句" class="headerlink" title="5.1 建表语句"></a>5.1 建表语句</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create table</span> a (<br>    id <span class="hljs-type">int</span> <span class="hljs-keyword">not null</span>,<br>    val <span class="hljs-type">varchar</span>(<span class="hljs-number">5</span>) <span class="hljs-keyword">not null</span><br>);<br><br><span class="hljs-keyword">create table</span> b(<br>    id <span class="hljs-type">int</span> <span class="hljs-keyword">not null</span>,<br>    val <span class="hljs-type">varchar</span>(<span class="hljs-number">5</span>) <span class="hljs-keyword">not null</span><br>);<br></code></pre></td></tr></table></figure><h4 id="5-2-初始数据"><a href="#5-2-初始数据" class="headerlink" title="5.2 初始数据"></a>5.2 初始数据</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert into</span> a <span class="hljs-keyword">values</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;A&#x27;</span>), (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;B&#x27;</span>), (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;C&#x27;</span>), (<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;F&#x27;</span>);<br><span class="hljs-keyword">insert into</span> b <span class="hljs-keyword">values</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;A&#x27;</span>), (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;D&#x27;</span>), (<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;E&#x27;</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MySQL安装</title>
    <link href="/mysql/install.html"/>
    <url>/mysql/install.html</url>
    
    <content type="html"><![CDATA[<h2 id="一、-Fedora-系统安装-MySQL-Server"><a href="#一、-Fedora-系统安装-MySQL-Server" class="headerlink" title="一、 Fedora 系统安装 MySQL Server"></a>一、 Fedora 系统安装 MySQL Server</h2><h3 id="1-更新软件包索引"><a href="#1-更新软件包索引" class="headerlink" title="1. 更新软件包索引"></a>1. <strong>更新软件包索引</strong></h3><p>首先，确保你的软件包索引是最新的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> dnf update<br></code></pre></td></tr></table></figure><h3 id="2-安装-MySQL-Server"><a href="#2-安装-MySQL-Server" class="headerlink" title="2. 安装 MySQL Server"></a>2. <strong>安装 MySQL Server</strong></h3><p>MySQL 在 Fedora 上提供了官方的 <code>mysql-server</code> 包。运行以下命令来安装 MySQL：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> dnf install mysql-server<br></code></pre></td></tr></table></figure><h3 id="3-启动-MySQL-服务"><a href="#3-启动-MySQL-服务" class="headerlink" title="3. 启动 MySQL 服务"></a>3. <strong>启动 MySQL 服务</strong></h3><p>安装完成后，需要启动 MySQL 服务。运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl start mysqld<br></code></pre></td></tr></table></figure><h3 id="4-启用-MySQL-在系统启动时自动启动"><a href="#4-启用-MySQL-在系统启动时自动启动" class="headerlink" title="4. 启用 MySQL 在系统启动时自动启动"></a>4. <strong>启用 MySQL 在系统启动时自动启动</strong></h3><p>为了确保 MySQL 服务在系统启动时自动启动，可以使用以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl <span class="hljs-built_in">enable</span> mysqld<br></code></pre></td></tr></table></figure><h3 id="5-查看-MySQL-服务状态"><a href="#5-查看-MySQL-服务状态" class="headerlink" title="5. 查看 MySQL 服务状态"></a>5. <strong>查看 MySQL 服务状态</strong></h3><p>确认 MySQL 服务正在运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl status mysqld<br></code></pre></td></tr></table></figure><p>如果 MySQL 正常运行，你会看到服务状态为 <code>active (running)</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">● mysqld.service - MySQL 8.0 database server<br>     Loaded: loaded (/usr/lib/systemd/system/mysqld.service; disabled; preset: disabl&gt;<br>    Drop-In: /usr/lib/systemd/system/service.d<br>             └─10-timeout-abort.conf<br>     Active: active (running) since Wed 2024-11-06 16:07:03 CST; 5s ago<br><br></code></pre></td></tr></table></figure><h3 id="6-运行-MySQL-安全配置"><a href="#6-运行-MySQL-安全配置" class="headerlink" title="6. 运行 MySQL 安全配置"></a>6. <strong>运行 MySQL 安全配置</strong></h3><p>运行 MySQL 的安全配置脚本以设置 root 密码、删除默认的匿名用户、禁用远程 root 登录等安全选项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> mysql_secure_installation<br></code></pre></td></tr></table></figure><p>按提示设置 MySQL root 用户的密码，并选择是否删除匿名用户、禁用远程 root 登录等。</p><h3 id="8-登录到-MySQL"><a href="#8-登录到-MySQL" class="headerlink" title="8. 登录到 MySQL"></a>8. <strong>登录到 MySQL</strong></h3><p>使用设置的 root 密码登录到 MySQL：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql -u root -p<br></code></pre></td></tr></table></figure><p>系统会提示你输入密码，输入你在安全配置过程中设置的 root 密码即可。</p><h3 id="9-验证-MySQL-安装"><a href="#9-验证-MySQL-安装" class="headerlink" title="9. 验证 MySQL 安装"></a>9. <strong>验证 MySQL 安装</strong></h3><p>登录后，你可以运行以下 SQL 查询，验证 MySQL 是否正确安装并正常运行：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> VERSION();<br></code></pre></td></tr></table></figure><p>如果返回 MySQL 版本号，说明 MySQL 安装成功。</p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MySQL使用LOAD DATA导入数据</title>
    <link href="/mysql/load_data.html"/>
    <url>/mysql/load_data.html</url>
    
    <content type="html"><![CDATA[<h3 id=""><a href="#" class="headerlink" title=""></a></h3><p><strong>基础语法：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs mysql">LOAD DATA<br>    [LOW_PRIORITY | CONCURRENT] [LOCAL]<br>    INFILE &#x27;file_name&#x27;<br>    [REPLACE | IGNORE]<br>    INTO TABLE tbl_name<br>    [PARTITION (partition_name [, partition_name] ...)]<br>    [CHARACTER SET charset_name]<br>    [&#123;FIELDS | COLUMNS&#125;<br>        [TERMINATED BY &#x27;string&#x27;]<br>        [[OPTIONALLY] ENCLOSED BY &#x27;char&#x27;]<br>        [ESCAPED BY &#x27;char&#x27;]<br>    ]<br>    [LINES<br>        [STARTING BY &#x27;string&#x27;]<br>        [TERMINATED BY &#x27;string&#x27;]<br>    ]<br>    [IGNORE number &#123;LINES | ROWS&#125;]<br>    [(col_name_or_user_var<br>        [, col_name_or_user_var] ...)]<br>    [SET col_name=&#123;expr | DEFAULT&#125;<br>        [, col_name=&#123;expr | DEFAULT&#125;] ...]<br></code></pre></td></tr></table></figure><ul><li><code>Local</code>: 从本地客户端读取文件，需要服务端和客户端同时开发权限，设置<code>local_infile=ON</code></li><li><code>REPLACE</code>: 使用文件<code>key</code>匹配的行替换数据库中数据，执行结果表现为<code>deleted xx</code></li><li><code>IGNORE</code>:忽略主键冲突的数据，如果使用<code>Local</code>时，未指定<code>REPLACE</code>和<code>IGNORE</code>的时候，效果等同于 <code>IGNORE</code></li><li><code>TERMINATED BY</code>:定义属性<code>FIELDS</code>或行<code>LINES</code>终止字符，例如： <code>\n</code></li><li><code>ENCLOSED BY</code>:定义属性<code>FIELDS</code>被什么字符包括，例如：<code>&quot;张三&quot;</code>解析以后只存储<code>张三</code></li><li><code>IGNORE</code>:忽略<code>number</code>行，如果输入文件存在表头时，可以通过<code>IGNORE</code>自动忽略</li><li><code>SET</code>对输入内容进行格式转换处理，例如日期字符串格式化转换<ul><li>在字段行定义变量，例如 @timestamp</li><li><code>SET</code>位置引用变量，并设置字段值， <code>SET birtyday = STR_TO_DATE(@timestamp, &#39;%Y-%m-%d %H:%i:%s&#39;)</code></li></ul></li></ul><p><strong>使用示例：</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table load_data_test(<br>id int primary key,<br>    name varchar(20),<br>    birthday datetime<br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs csv">id,name,birthday<br>4,&quot;张三&quot;,1991-01-17 19:18:17<br>7,&quot;李四&quot;,1993-11-11 13:14:15<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">load data local <br>infile &#x27;/home/duwei/workspace/load_data.csv&#x27; <br>REPLACE <br>into table learn.load_data_test <br>FIELDS TERMINATED BY &#x27;,&#x27;  ENCLOSED BY &#x27;&quot;&#x27;  <br>LINES TERMINATED BY &#x27;\n&#x27;  <br>IGNORE 1 LINES <br>(id, name, @timestamp) <br>SET birthday = STR_TO_DATE(@timestamp, &#x27;%Y-%m-%d %H:%i:%s&#x27;);<br></code></pre></td></tr></table></figure><p><strong>问题：</strong></p><p>1、<code>ERROR 1290 (HY000): The MySQL server is running with the --secure-file-priv option so it cannot execute this statement</code></p><p>问题原因：</p><p>从<code>MySQL</code>服务器读取文件，文件不在<code>MySQL</code>服务允许的路径，可以通过 <code>show variables like &#39;secure_file_priv&#39;;</code>查看路径</p><p>解决方式：</p><ul><li>将文件转移到<code>MySQL</code>服务权限路径下执行</li><li>禁用<code>secure_file_priv</code>,在<code>/etc/my.cnf</code>文件中添加<code>secure_file_priv=&#39;&#39;</code>(在<code>[mysqld]</code>下)</li><li>自定义<code>secure_file_priv</code><strong>文件路径</strong>，自定义的路径需要对<code>mysql</code>用户授予权限，否则在服务启动或者<code>LOAD DATA</code>时提示<code>ERROR 13 (HY000)</code></li></ul><p>2、<code>ERROR 3948 (42000): Loading local data is disabled; this must be enabled on both the client and server sides</code></p><p>问题原因：</p><p>使用<code>LOAD DATA</code>时，服务端和客户端未授予相关权限</p><p>解决方式：</p><ul><li>服务端：<ul><li>会话级：<code>set global local_infile=&#39;ON&#39;;</code></li><li>永久生效：<code>/etc/my.cnf --&gt; [mysqld] --&gt; local_infile=ON</code></li></ul></li><li>客户端：<ul><li><code>mysql --local-infile=1</code></li></ul></li></ul><p><strong>参考文档：</strong></p><p><a href="https://dev.mysql.com/doc/refman/8.0/en/load-data.html">https://dev.mysql.com/doc/refman/8.0/en/load-data.html</a></p><p><a href="https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_secure_file_priv">https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_secure_file_priv</a></p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MySQL日志</title>
    <link href="/mysql/log.html"/>
    <url>/mysql/log.html</url>
    
    <content type="html"><![CDATA[<table><thead><tr><th>Log Type</th><th>Information Written to Log</th></tr></thead><tbody><tr><td>Error log</td><td>Problems encountered starting, running, or stopping          <a href="https://dev.mysql.com/doc/refman/8.4/en/mysqld.html"><strong>mysqld</strong></a></td></tr><tr><td>General query log</td><td>客户端执行的所有(成功)SQL记录</td></tr><tr><td>Binary log</td><td>Statements that change data (also used for replication)</td></tr><tr><td>Relay log</td><td>Data changes received from a replication source server</td></tr><tr><td>Slow query log</td><td>慢SQL记录，取决于 <a href="https://dev.mysql.com/doc/refman/8.4/en/server-system-variables.html#sysvar_long_query_time"><code>long_query_time</code></a> 系统变量</td></tr><tr><td>DDL logs</td><td>Atomic DDL operations performed by DDL statements</td></tr></tbody></table><h3 id="一、General-log-和-Slow-log"><a href="#一、General-log-和-Slow-log" class="headerlink" title="一、General log 和 Slow log"></a>一、General log 和 Slow log</h3><h3 id="1、日志存储位置"><a href="#1、日志存储位置" class="headerlink" title="1、日志存储位置"></a>1、日志存储位置</h3><p>支持如下存储方式：</p><ul><li><code>FILE</code>：文件，默认存储方式</li><li><code>TABLE</code>: 数据表 </li><li><code>NONE</code>：不存储</li></ul><h3 id="1-1-查看当前日志存储方式"><a href="#1-1-查看当前日志存储方式" class="headerlink" title="1.1 查看当前日志存储方式"></a>1.1 查看当前日志存储方式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show variable like &#x27;log_output&#x27;;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; show variables like &#x27;log_output&#x27;;<br>+---------------+------------+<br>| Variable_name | Value      |<br>+---------------+------------+<br>| log_output    | FILE       |<br>+---------------+------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="1-2-全局修改日志存储方式"><a href="#1-2-全局修改日志存储方式" class="headerlink" title="1.2 全局修改日志存储方式"></a>1.2 全局修改日志存储方式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">set global log_output = &#x27;TABLE,FILE&#x27;;<br></code></pre></td></tr></table></figure><h3 id="1-3-设置持久化"><a href="#1-3-设置持久化" class="headerlink" title="1.3 设置持久化"></a>1.3 设置持久化</h3><p>通过<code>global</code>设置的系统变量，在<code>mysql</code>服务重启后会重新还原为默认值，需要在<code>my.cnf</code>中修改进行持久化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cnf">[mysqld]<br>log_output=TABLE,FILE<br></code></pre></td></tr></table></figure><h3 id="2、General-Log"><a href="#2、General-Log" class="headerlink" title="2、General Log"></a>2、General Log</h3><p>记录客户端执行的所有SQL</p><h3 id="2-1-查看当前日志记录开启以及文件保存位置"><a href="#2-1-查看当前日志记录开启以及文件保存位置" class="headerlink" title="2.1 查看当前日志记录开启以及文件保存位置"></a>2.1 查看当前日志记录开启以及文件保存位置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show variables like &#x27;general_log%&#x27;;<br></code></pre></td></tr></table></figure><p><strong>如果<code>log_output</code>支持<code>TABLE</code>时，日志信息会记录在 <code>mysql.general_log</code>数据表中</strong></p><h3 id="2-2-日志文件日志内容"><a href="#2-2-日志文件日志内容" class="headerlink" title="2.2 日志文件日志内容"></a>2.2 日志文件日志内容</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-type">Time</span>                 Id Command    Argument<br><span class="hljs-number">2024</span><span class="hljs-number">-11</span><span class="hljs-number">-08</span>T00:<span class="hljs-number">42</span>:<span class="hljs-number">06.651126</span>Z   <span class="hljs-number">11</span> Query<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> learn.shop<br></code></pre></td></tr></table></figure><h3 id="2-3-数据表日志内容"><a href="#2-3-数据表日志内容" class="headerlink" title="2.3 数据表日志内容"></a>2.3 数据表日志内容</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select *, convert(argument using utf8) args from mysql.general_log \G<br><br>*************************** 1. row ***************************<br>  event_time: 2024-11-08 08:42:06.651126<br>   user_host: root[root] @ localhost []<br>   thread_id: 11<br>   server_id: 1<br>command_type: Query<br>    argument: 0x73656C656374202A2066726F6D206C6561726E2E73686F70<br>args: select * from learn.shop<br><br></code></pre></td></tr></table></figure><p>默认情况下，<code>general_log</code>数据表中存储<code>SQL</code>语句的字段(<code>argument</code>)进行了编码，需要通过<code>convert(argument using utf8)</code>函数进行解码</p><h3 id="2-4-设置持久化"><a href="#2-4-设置持久化" class="headerlink" title="2.4 设置持久化"></a>2.4 设置持久化</h3><p>通过<code>global</code>设置的系统变量，在<code>mysql</code>服务重启后会重新还原为默认值，需要在<code>my.cnf</code>中修改进行持久化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cnf">[mysqld]<br>general_log=ON<br>general_log_file=/var/lib/mysql/general_08.log<br></code></pre></td></tr></table></figure><p>修改完成后通过<code>sudo systemctl restart mysqld</code>重启<code>mysql</code>服务让配置生效</p><h3 id="3、Slow-Query-Log"><a href="#3、Slow-Query-Log" class="headerlink" title="3、Slow Query Log"></a>3、Slow Query Log</h3><p>记录执行时间超过<code>long_query_time</code>变量定义的值时会记录慢<code>SQL</code>日志</p><h3 id="3-1-查看慢SQL日志开启以及文件保存位置"><a href="#3-1-查看慢SQL日志开启以及文件保存位置" class="headerlink" title="3.1 查看慢SQL日志开启以及文件保存位置"></a>3.1 查看慢SQL日志开启以及文件保存位置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show variables like &#x27;slow_query_log%&#x27;;<br></code></pre></td></tr></table></figure><h3 id="3-2-查看慢SQL时间阈值"><a href="#3-2-查看慢SQL时间阈值" class="headerlink" title="3.2 查看慢SQL时间阈值"></a>3.2 查看慢SQL时间阈值</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show variables like &#x27;long_query_time&#x27;;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; show variables like &#x27;long_query_time&#x27;;<br>+-----------------+-----------+<br>| Variable_name   | Value     |<br>+-----------------+-----------+<br>| long_query_time | 10.000000 |<br>+-----------------+-----------+<br>1 row in set (0.01 sec)<br></code></pre></td></tr></table></figure><h3 id="3-3-修改慢SQL时间阈值"><a href="#3-3-修改慢SQL时间阈值" class="headerlink" title="3.3 修改慢SQL时间阈值"></a>3.3 修改慢SQL时间阈值</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">set global long_query_time=1;<br></code></pre></td></tr></table></figure><p><font color="red">通过<code>global</code>修改慢SQL阈值的需要连接重新建立后才生效</font></p><table><thead><tr><th>System Variable</th><th><code>long_query_time</code></th></tr></thead><tbody><tr><td>生效范围</td><td>Global, Session</td></tr><tr><td>动态修改</td><td>Yes</td></tr><tr><td>数据类型</td><td>Numeric</td></tr><tr><td>默认值</td><td><code>10</code></td></tr><tr><td>最小值</td><td><code>0</code></td></tr><tr><td>最大值</td><td><code>31536000</code>(365天)</td></tr><tr><td>单位</td><td>秒</td></tr></tbody></table><p>如果<code>log_output</code>支持<code>TABLE</code>时，日志信息会记录在 <code>mysql.slow_log</code>数据表中</p><h3 id="3-4-慢SQL日志文件内容"><a href="#3-4-慢SQL日志文件内容" class="headerlink" title="3.4 慢SQL日志文件内容"></a>3.4 慢SQL日志文件内容</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"># <span class="hljs-type">Time</span>: <span class="hljs-number">2024</span><span class="hljs-number">-11</span><span class="hljs-number">-08</span>T00:<span class="hljs-number">34</span>:<span class="hljs-number">07.522426</span>Z<br># <span class="hljs-keyword">User</span><span class="hljs-variable">@Host</span>: root[root] @ localhost []  Id:    <span class="hljs-number">11</span><br># Query_time: <span class="hljs-number">0.000312</span>  Lock_time: <span class="hljs-number">0.000004</span> Rows_sent: <span class="hljs-number">7</span>  Rows_examined: <span class="hljs-number">7</span><br><span class="hljs-keyword">SET</span> <span class="hljs-type">timestamp</span><span class="hljs-operator">=</span><span class="hljs-number">1731026047</span>;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> learn.shop;<br></code></pre></td></tr></table></figure><h3 id="3-5-慢SQL数据表日志内容"><a href="#3-5-慢SQL数据表日志内容" class="headerlink" title="3.5 慢SQL数据表日志内容"></a>3.5 慢SQL数据表日志内容</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select *, convert(sql_text using utf8) sql_detail from slow_log \G<br>*************************** 1. row ***************************<br>    start_time: 2024-11-08 08:35:50.723019<br>     user_host: root[root] @ localhost []<br>    query_time: 00:00:00.000302<br>     lock_time: 00:00:00.000004<br>     rows_sent: 7<br> rows_examined: 7<br>            db: mysql<br>last_insert_id: 0<br>     insert_id: 0<br>     server_id: 1<br>      sql_text: 0x73656C656374202A2066726F6D206C6561726E2E73686F70<br>     thread_id: 11<br>    sql_detail: select * from learn.shop<br><br></code></pre></td></tr></table></figure><p>默认情况下，<code>slow_log</code>数据表中存储<code>SQL</code>语句的字段(<code>sql_text</code>)进行了编码，需要通过<code>convert(sql_text using utf8)</code>函数进行解码</p><h3 id="3-6-设置持久化"><a href="#3-6-设置持久化" class="headerlink" title="3.6 设置持久化"></a>3.6 设置持久化</h3><p>通过<code>global</code>设置的系统变量，在<code>mysql</code>服务重启后会重新还原为默认值，需要在<code>my.cnf</code>中修改进行持久化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cnf">[mysqld]<br>slow_query_log=ON<br>slow_query_log_file=/var/lib/mysql/slow_08.log<br>long_query_time=0<br><br></code></pre></td></tr></table></figure><p>修改完成后通过<code>sudo systemctl restart mysqld</code>重启<code>mysql</code>服务让配置生效</p><h2 id="二、Bin-Log"><a href="#二、Bin-Log" class="headerlink" title="二、Bin Log"></a>二、Bin Log</h2><p>默认启用 <code>log_bin=[base_name]</code>系统变量，不指定默认为<code>binlog</code></p><p>新文件创建：</p><ul><li>服务启动或者重启</li><li>服务刷新日志</li><li>日志文件达到<code>max_binlog_size</code>设置（采用大事物时，文件大小可能会超过<code>max_binlog_size</code>的限制）</li></ul><p><code>mysqld</code>采用索引文件记录当前使用的<code>binlog</code>文件，默认情况和<code>binlog</code>保持一直的文件名(扩展名为<code>.index</code>)，可以通过 <code>--log-bin-index=[file_name]</code>命令选项修改</p><p><code>binlog</code>文件和<code>binlog</code>索引文件默认存储在数据目录中，可以通过<code>--log-bin</code>选项指定为其他目录</p><p>文件加密</p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Jmeter简单使用介绍</title>
    <link href="/other/jemeter.html"/>
    <url>/other/jemeter.html</url>
    
    <content type="html"><![CDATA[<h3 id="一、准备"><a href="#一、准备" class="headerlink" title="一、准备"></a>一、准备</h3><p>新建个人工作空间<code>Workspace</code>，后续所有操作基于该目录  </p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">Windows:</span> E:<span class="hljs-symbol">/Workspace</span><br><span class="hljs-params">Linux:</span> ~<span class="hljs-operator">/</span>Workspace<br></code></pre></td></tr></table></figure><h3 id="二、Jmeter使用"><a href="#二、Jmeter使用" class="headerlink" title="二、Jmeter使用"></a>二、Jmeter使用</h3><h4 id="1、安装jdk或者jre运行环境"><a href="#1、安装jdk或者jre运行环境" class="headerlink" title="1、安装jdk或者jre运行环境"></a>1、安装jdk或者jre运行环境</h4><h4 id="2、下载安装Jmeter"><a href="#2、下载安装Jmeter" class="headerlink" title="2、下载安装Jmeter"></a>2、下载安装Jmeter</h4><p>访问<a href="https://jmeter.apache.org/">https://jmeter.apache.org/</a>,选择左侧<code>Download Releases</code><br>选择下载<code>zip</code>文件<br><img src="/images/jmeter/jmeter-download.png" alt="jmeter-download"></p><h4 id="3、将jmeter解压到Workspace目录"><a href="#3、将jmeter解压到Workspace目录" class="headerlink" title="3、将jmeter解压到Workspace目录"></a>3、将<code>jmeter</code>解压到<code>Workspace</code>目录</h4><p><code>Windows</code>平台使用解压工具(Winrar,7Zip…)<br><code>Linux</code>平台:<code>unzip apache-jmeter-xxxx.zip</code></p><h4 id="4、运行jmeter"><a href="#4、运行jmeter" class="headerlink" title="4、运行jmeter"></a>4、运行<code>jmeter</code></h4><p>进入解压后的<code>jmeter/bin</code>目录<br><code>Windows</code>：运行<code>jmeter.bat</code><br><code>Linux</code>：<code>./jmeter.sh</code>如果无执行权限，运行 <code>chmod +x jmeter.sh</code></p><h4 id="5、运行测试集"><a href="#5、运行测试集" class="headerlink" title="5、运行测试集"></a>5、运行测试集</h4><ol><li><p>新建线程组<br><img src="/images/jmeter/thread-group.png" alt="线程组"></p></li><li><p>线程组属性配置<br>设置线程组名称<br>执行测试单元失败后的行为<br>线程数，循环次数– 并发场景测试<br><img src="/images/jmeter/thread-group-setting.png" alt="线程组属性"></p></li><li><p>保存测试计划，生成<code>jmx</code>文件<br>将文件保存到<code>Workspace/jmeter</code>  </p></li><li><p>设置http请求默认值<br>一些默认的协议、地址、端口等通用配置<br><img src="/images/jmeter/request-default.png"><br><img src="/images/jmeter/request-default-value.png"></p></li><li><p>添加HTTP信息头管理器<br>header通用参数，例如<code>Content-Type</code>,<code>Authorization</code></p></li></ol><p><img src="/images/jmeter/header-add.png"></p><p><img src="/images/jmeter/header.png"></p><ol start="6"><li><p>添加HTTP请求<br>不需要执行的HTTP请求可以禁用<br>此处根据接口定义选择对应的方法，常用有<code>GET POST DELTE PUT</code>，由于前边已经配置请求默认值，此处可以不用重复配置地址、端口、编码信息<br><img src="/images/jmeter/http-request.png"><br><img src="/images/jmeter/get.png"><br>请求参数格式为<code>json</code>对象示例：<br><img src="/images/jmeter/add.png"></p></li><li><p>添加查看结果树<br>结果树红色为请求错误，绿色为请求正确<br>检测请求结果日志，通过观察结果树，可以查看到请求参数以及相应内容<br><img src="/images/jmeter/request-result.png"><br>请求参数查看：<br><img src="/images/jmeter/result-request.png"><br>请求参数错误，请求错误返回错误信息，可以在此处查看原因<br><img src="/images/jmeter/result-response-error.png"><br>通过结果树中的日志可以确认接口是由于header中未设置<code>Content-Type</code>导致，增加后重新测试可以得到正确结果<br><img src="/images/jmeter/request-response-success.png"></p></li><li><p>结果断言<br>对请求成功的接口响应内容是否合法，符合预期做判断(http请求成功，不代表接口执行成功)<br><img src="/images/jmeter/assert.png"></p></li></ol><ul><li>响应断言 对结果文本代码等做判断  </li><li>JSON断言–返回结果为json时<br><img src="/images/jmeter/json-assert.png"></li></ul><ol start="9"><li>自定义变量<br>借助自定义变量可以将一些通用配置放置到外部文件中，例如用户名、密码<br>自定义变量取值方式：<code>$&#123;参数名&#125;</code><br>此处可以借助<code>jmeter</code>内置函数<code>__CSVReader</code>读取<code>csv</code>文本格式数据,在自定义变量中设置值为内置函数字符串时，可能存在读取换行问题，需要手动增加<code>next</code><br>可以通过将<code>csv</code>路径和取值列索引作为自定义参数(避免路径出现在多个地方，后期修改不方便)，在参数实际使用位置替换即可，并且可以实现自动读取下一行，示例如下：<br><img src="/images/jmeter/custom_params.png"><br><img src="/images/jmeter/csvreader.png"></li></ol>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Jmeter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决Chrome浏览器默认https访问</title>
    <link href="/other/chrome.html"/>
    <url>/other/chrome.html</url>
    
    <content type="html"><![CDATA[<h3 id="1、背景"><a href="#1、背景" class="headerlink" title="1、背景"></a>1、背景</h3><p>Chrome新版浏览器在访问网址时会默认添加http，对于一部分未支持https或者公司内部的项目来说很不友好</p><h3 id="2、解决方案"><a href="#2、解决方案" class="headerlink" title="2、解决方案"></a>2、解决方案</h3><h4 id="2-1-方案一"><a href="#2-1-方案一" class="headerlink" title="2.1 方案一"></a>2.1 方案一</h4><p>在Chrome浏览器地址栏输入以下内容：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">chrome:</span>//net-internals/<span class="hljs-meta">#hsts</span><br></code></pre></td></tr></table></figure><p><img src="/img/chrome-url-address.png"></p><p>找到 <code>Delete domain security policies</code><br>在<code>Domain</code>栏中输入需要删除的域名后点击<code>delete</code><br><img src="/img/chrome-delete-domain.png"></p>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Chrome</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VS code配置</title>
    <link href="/other/vscode.html"/>
    <url>/other/vscode.html</url>
    
    <content type="html"><![CDATA[<h4 id="一、中文乱码"><a href="#一、中文乱码" class="headerlink" title="一、中文乱码"></a>一、中文乱码</h4><p><code>65001</code> 代表<code>UTF-8</code>编码</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;terminal.integrated.profiles.windows&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;Command Prompt&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;/K&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;chcp 65001 &gt;null&quot;</span><span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VS Code</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux系统Typora配置GitHub图床</title>
    <link href="/other/picbed.html"/>
    <url>/other/picbed.html</url>
    
    <content type="html"><![CDATA[<p><code>Linux</code>环境下<code>Typora</code>通过<code>PicGo-Core</code>上传图片到<code>GitHub</code>配置：</p><p><code>config.json</code>配置如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;picBed&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;current&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;github&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;github&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;repo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;duwei0227/picbed&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 仓库名，格式是 username/reponame</span><br>            <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;g&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// github token</span><br>            <span class="hljs-attr">&quot;path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 自定义存储路径，比如 img/</span><br>            <span class="hljs-attr">&quot;customUrl&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 自定义域名，注意要加 http://或者 https://</span><br>            <span class="hljs-attr">&quot;branch&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;main&quot;</span> <span class="hljs-comment">// 分支名，默认是 main</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;picgoPlugins&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><code>token</code>生成：<br>1、访问 <a href="https://github.com/settings/tokens">https://github.com/settings/tokens</a></p><p>2、点击 <code>New personal access token (classic)</code></p><p>3、选择<code>token</code>实效时间，勾选<code>repo</code></p><p>4、<code>Generate token</code></p><p>5、复制生成的<code>token</code>信息（<strong>重新访问页面时，token信息无法再次查看，需要自行保存</strong>）</p><p><strong>注意事项</strong></p><ul><li><code>branch</code>需要指定，默认提交会提示分支不存在</li></ul>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PicBed</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux系统格式化U盘为fat32</title>
    <link href="/other/linux_format_to_fat32.html"/>
    <url>/other/linux_format_to_fat32.html</url>
    
    <content type="html"><![CDATA[<h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="一、插入-U-盘并确定设备名称"><a href="#一、插入-U-盘并确定设备名称" class="headerlink" title="一、插入 U 盘并确定设备名称"></a>一、插入 U 盘并确定设备名称</h3><ol><li><p>打开终端。</p></li><li><p>输入以下命令以列出所有的磁盘设备，找到 U 盘的设备名称（通常类似于 <code>/dev/sda</code>，具体取决于你插入的设备）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">lsblk<br></code></pre></td></tr></table></figure><p>可以看到类似下面的输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">duwei@probiecoder:~$ lsblk<br>NAME         MAJ:MIN RM   SIZE RO TYPE MOUNTPOINTS<br>sda            8:0    1   7.5G  0 disk <br>├─sda1         8:1    1   2.1G  0 part /run/media/duwei/Fedora-WS-Live-40-1-14<br>├─sda2         8:2    1  12.5M  0 part <br>└─sda3         8:3    1   300K  0 part <br>zram0        252:0    0     8G  0 disk [SWAP]<br>nvme0n1      259:0    0 476.9G  0 disk <br>├─nvme0n1p1  259:1    0   100M  0 part <br><br></code></pre></td></tr></table></figure><p>在此示例中，<code>sda</code> 是 U 盘的设备名称。</p></li></ol><h3 id="二、卸载-U-盘"><a href="#二、卸载-U-盘" class="headerlink" title="二、卸载 U 盘"></a>二、卸载 U 盘</h3><p>在格式化之前，需要卸载 U 盘。假设 U 盘的设备名是 <code>/dev/sda1</code>，可以运行以下命令来卸载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> umount /dev/sda1<br></code></pre></td></tr></table></figure><h3 id="三、格式化-U-盘为-FAT32"><a href="#三、格式化-U-盘为-FAT32" class="headerlink" title="三、格式化 U 盘为 FAT32"></a>三、格式化 U 盘为 FAT32</h3><p>使用 <code>mkfs.vfat</code> 命令将 U 盘格式化为 <code>FAT32</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> mkfs.vfat -F 32 /dev/sda<br></code></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：<code>/dev/sda</code> 是整个磁盘，不要加分区编号（如 <code>/dev/sda1</code>）。请根据实际设备名替换 <code>/dev/sda</code>。</p></blockquote><p>如果报错提示如下信息，需要调整命令参数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkfs.fat 4.2 (2021-01-31)<br>mkfs.vfat: Partitions or virtual mappings on device &#x27;/dev/sda&#x27;, not making filesystem (use -I to override)<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo mkfs.vfat -I -F 32 /dev/sda<br></code></pre></td></tr></table></figure><h3 id="四、验证格式化"><a href="#四、验证格式化" class="headerlink" title="四、验证格式化"></a>四、验证格式化</h3><p>格式化完成后，可以再次使用 <code>lsblk</code> 命令查看设备，确保 U 盘已成功格式化为 <code>FAT32</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">lsblk -f<br></code></pre></td></tr></table></figure><p>输出中应该显示 U 盘的文件系统类型为 <code>vfat</code>，这表示 FAT32 文件系统。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">duwei@probiecoder:~$ lsblk -f<br>NAME         FSTYPE FSVER LABEL  UUID                                 FSAVAIL FSUSE% MOUNTPOINTS<br>sda          vfat   FAT32 PROBIE 49F5-F4C7                               7.4G     1% /run/media/duwei/PROBIE<br><br></code></pre></td></tr></table></figure><h3 id="可选：为分区设置卷标"><a href="#可选：为分区设置卷标" class="headerlink" title="可选：为分区设置卷标"></a>可选：为分区设置卷标</h3><p>如果你想为 U 盘设置一个卷标，可以使用 <code>-n</code> 选项，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> mkfs.vfat -F 32 -n PROBIE /dev/sda<br></code></pre></td></tr></table></figure><p>这样，U 盘的卷标将设置为 <code>PROBIE</code>。</p>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>常用网站汇总</title>
    <link href="/other/common_website.html"/>
    <url>/other/common_website.html</url>
    
    <content type="html"><![CDATA[<h4 id="一、markdown转为微信公众号文章格式"><a href="#一、markdown转为微信公众号文章格式" class="headerlink" title="一、markdown转为微信公众号文章格式"></a>一、markdown转为微信公众号文章格式</h4><p><a href="https://markdown.com.cn/editor/">https://markdown.com.cn/editor/</a></p><h4 id="二、文生图"><a href="#二、文生图" class="headerlink" title="二、文生图"></a>二、文生图</h4><p><a href="https://www.stablevideo.com/">https://www.stablevideo.com/</a></p>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>雪花id生成示例</title>
    <link href="/other/snowflake.html"/>
    <url>/other/snowflake.html</url>
    
    <content type="html"><![CDATA[<h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>Twitter Snowflake ID 是一个 64 位的整数，结构如下：</p><table><thead><tr><th>位数</th><th>含义</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>符号位</td><td>总是 0，表示正数</td></tr><tr><td>41</td><td>时间戳（毫秒级）</td><td>相对于某个时间纪元的时间差</td></tr><tr><td>10</td><td>机器标识</td><td>通常由数据中心 ID 和机器 ID 组成，保证分布式系统中机器唯一性</td></tr><tr><td>12</td><td>序列号</td><td>每毫秒内生成的序列号，用于避免同一毫秒内的 ID 冲突</td></tr></tbody></table><p><strong>实现步骤</strong></p><ol><li>定义一个固定的时间纪元（epoch）。</li><li>使用高精度时间戳获取当前时间，计算与 epoch 的差值作为时间部分。</li><li>将机器 ID 和序列号填充到对应位上。</li><li>按照位移规则生成最终的 64 位整数。</li></ol><p>重点是对于时间戳的比较：</p><ul><li>时间戳相同：需要考虑序号生产的唯一性，如果超过最大序列需要等待到下一毫秒</li><li>当前时间大于上一时间：从0开始直接计数</li><li>当前时间小于上一时间：可能发生了时钟回拨，可以报错或者按照上一时间继续处理生成</li></ul><p>另外需要根据每一块数据区域位数计算允许的最大上限值，例如工作中心允许的位数为5，允许的最大值：<code>(1 &lt;&lt; 5 ) - 1</code></p><h3 id="一、Rust语言"><a href="#一、Rust语言" class="headerlink" title="一、Rust语言"></a>一、Rust语言</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::sync::atomic::&#123;AtomicU64, Ordering&#125;;<br><span class="hljs-keyword">use</span> std::sync::Arc;<br><span class="hljs-keyword">use</span> std::thread;<br><span class="hljs-keyword">use</span> std::thread::JoinHandle;<br><span class="hljs-keyword">use</span> std::time::SystemTime;<br><br><span class="hljs-comment">/// 位数含义描述</span><br><span class="hljs-comment">/// 1符号位总是 0，表示正数</span><br><span class="hljs-comment">/// 41时间戳（毫秒级）相对于某个时间纪元的时间差</span><br><span class="hljs-comment">/// 10机器标识通常由数据中心 ID 和机器 ID 组成，保证分布式系统中机器唯一性</span><br><span class="hljs-comment">/// 12序列号每毫秒内生成的序列号，用于避免同一毫秒内的 ID 冲突</span><br><br><span class="hljs-keyword">const</span> EPOCH: <span class="hljs-type">u64</span> = <span class="hljs-number">1735689600000</span>; <span class="hljs-comment">// 自定义纪元（2025-01-01 00:00:00 UTC）</span><br><span class="hljs-keyword">const</span> DATA_CENTER_ID_BITS: <span class="hljs-type">u64</span> = <span class="hljs-number">5</span>; <span class="hljs-comment">// 数据中心 ID 位数</span><br><span class="hljs-keyword">const</span> MACHINE_ID_BITS: <span class="hljs-type">u64</span> = <span class="hljs-number">5</span>; <span class="hljs-comment">// 机器 ID 位数</span><br><span class="hljs-keyword">const</span> SEQUENCE_BITS: <span class="hljs-type">u64</span> = <span class="hljs-number">12</span>; <span class="hljs-comment">// 序列号位数</span><br><br><span class="hljs-keyword">const</span> MAX_DATA_CENTER_ID: <span class="hljs-type">u64</span> = (<span class="hljs-number">1</span> &lt;&lt; DATA_CENTER_ID_BITS) - <span class="hljs-number">1</span>;<br><span class="hljs-keyword">const</span> MAX_MACHINE_ID: <span class="hljs-type">u64</span> = (<span class="hljs-number">1</span> &lt;&lt; MACHINE_ID_BITS) - <span class="hljs-number">1</span>;<br><span class="hljs-keyword">const</span> MAX_SEQUENCE: <span class="hljs-type">u64</span> = (<span class="hljs-number">1</span> &lt;&lt; SEQUENCE_BITS) - <span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">const</span> MACHINE_ID_SHIFT: <span class="hljs-type">u64</span> = SEQUENCE_BITS;<br><span class="hljs-keyword">const</span> DATA_CENTER_ID_SHIFT: <span class="hljs-type">u64</span> = SEQUENCE_BITS + MACHINE_ID_BITS;<br><span class="hljs-keyword">const</span> TIMESTAMP_SHIFT: <span class="hljs-type">u64</span> = SEQUENCE_BITS + MACHINE_ID_BITS + DATA_CENTER_ID_BITS;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Snowflake</span> &#123;<br>    last_timestamp: AtomicU64,<br>    data_center_id: <span class="hljs-type">u64</span>,<br>    machine_id: <span class="hljs-type">u64</span>,<br>    sequence: AtomicU64,<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Snowflake</span> &#123;<br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>(data_center_id: <span class="hljs-type">u64</span>, machine_id: <span class="hljs-type">u64</span>) <span class="hljs-punctuation">-&gt;</span> Snowflake &#123;<br>        <span class="hljs-keyword">if</span> data_center_id &gt; MAX_DATA_CENTER_ID &#123;<br>            <span class="hljs-built_in">panic!</span>(<span class="hljs-string">&quot;Data center ID exceeds the maximum value!&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> machine_id &gt; MAX_MACHINE_ID &#123;<br>            <span class="hljs-built_in">panic!</span>(<span class="hljs-string">&quot;Machine ID exceeds the maximum value!&quot;</span>);<br>        &#125;<br><br>        Snowflake &#123;<br>            last_timestamp: AtomicU64::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-number">0</span>),<br>            data_center_id,<br>            machine_id,<br>            sequence: AtomicU64::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-number">0</span>),<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">next_id</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">u64</span> &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">timestamp</span> = <span class="hljs-title function_ invoke__">current_millis</span>();<br><br>        <span class="hljs-comment">// 获取并更新最后的时间戳</span><br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">last_timestamp</span> = <span class="hljs-keyword">self</span>.last_timestamp.<span class="hljs-title function_ invoke__">load</span>(Ordering::Relaxed);<br><br>        <span class="hljs-keyword">if</span> timestamp &lt; last_timestamp &#123;<br>            <span class="hljs-comment">// 处理时钟会退</span><br>            <span class="hljs-built_in">eprintln!</span>(<br>                <span class="hljs-string">&quot;Clock moved backwards. Refusing to generate ID for &#123;&#125; milliseconds.&quot;</span>,<br>                last_timestamp - timestamp<br>            );<br>            timestamp = last_timestamp;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> timestamp == last_timestamp &#123;<br>            <span class="hljs-comment">// 同一毫秒内增加序列号</span><br>            <span class="hljs-comment">// 确保序号在一个时间单位内循环使用，避免超出位数限制，保证 ID 格式的正确性</span><br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">seq</span> = <span class="hljs-keyword">self</span>.sequence.<span class="hljs-title function_ invoke__">fetch_add</span>(<span class="hljs-number">1</span>, Ordering::Relaxed) &amp; MAX_SEQUENCE;<br>            <span class="hljs-keyword">if</span> seq == <span class="hljs-number">0</span> &#123;<br>                <span class="hljs-comment">// 序列号耗尽，等待下一毫秒</span><br>                timestamp = <span class="hljs-title function_ invoke__">wait_next_millis</span>(last_timestamp);<br>                <span class="hljs-keyword">self</span>.sequence.<span class="hljs-title function_ invoke__">store</span>(<span class="hljs-number">0</span>, Ordering::Relaxed);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 不同毫秒内重置序列号</span><br>            <span class="hljs-keyword">self</span>.sequence.<span class="hljs-title function_ invoke__">store</span>(<span class="hljs-number">0</span>, Ordering::Relaxed);<br>        &#125;<br><br>        <span class="hljs-comment">// 更新最后的时间戳</span><br>        <span class="hljs-keyword">self</span>.last_timestamp.<span class="hljs-title function_ invoke__">store</span>(timestamp, Ordering::Relaxed);<br><br>        <span class="hljs-comment">// 生成雪花 ID</span><br>        ((timestamp - EPOCH) &lt;&lt; TIMESTAMP_SHIFT)<br>            | (<span class="hljs-keyword">self</span>.data_center_id &lt;&lt; DATA_CENTER_ID_SHIFT)<br>            | (<span class="hljs-keyword">self</span>.machine_id &lt;&lt; MACHINE_ID_SHIFT)<br>            | <span class="hljs-keyword">self</span>.sequence.<span class="hljs-title function_ invoke__">load</span>(Ordering::Relaxed)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">current_millis</span>() <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">u64</span> &#123;<br>    SystemTime::<span class="hljs-title function_ invoke__">now</span>()<br>        .<span class="hljs-title function_ invoke__">duration_since</span>(SystemTime::UNIX_EPOCH)<br>        .<span class="hljs-title function_ invoke__">unwrap</span>()<br>        .<span class="hljs-title function_ invoke__">as_millis</span>() <span class="hljs-keyword">as</span> <span class="hljs-type">u64</span><br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">wait_next_millis</span>(last_timestamp: <span class="hljs-type">u64</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">u64</span> &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">timestamp</span> = <span class="hljs-title function_ invoke__">current_millis</span>();<br>    <span class="hljs-keyword">while</span> timestamp &lt;= last_timestamp &#123;<br>        timestamp = <span class="hljs-title function_ invoke__">current_millis</span>();<br>    &#125;<br>    timestamp<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">snowflake</span> = Arc::<span class="hljs-title function_ invoke__">new</span>(Snowflake::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>));<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">handlers</span>: <span class="hljs-type">Vec</span>&lt;_&gt; = (<span class="hljs-number">0</span>..<span class="hljs-number">10</span>)<br>        .<span class="hljs-title function_ invoke__">map</span>(|_| &#123;<br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">snowflake</span> = snowflake.<span class="hljs-title function_ invoke__">clone</span>();<br>            thread::<span class="hljs-title function_ invoke__">spawn</span>(<span class="hljs-keyword">move</span> || &#123;<br>                <span class="hljs-keyword">for</span> <span class="hljs-variable">_</span> <span class="hljs-keyword">in</span> <span class="hljs-number">0</span>..<span class="hljs-number">10</span> &#123;<br>                    <span class="hljs-keyword">let</span> <span class="hljs-variable">id</span> = snowflake.<span class="hljs-title function_ invoke__">next_id</span>();<br>                    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Generate ID: &#123;&#125;&quot;</span>, id);<br>                &#125;<br>            &#125;)<br>        &#125;)<br>        .<span class="hljs-title function_ invoke__">collect</span>();<br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">h</span> <span class="hljs-keyword">in</span> handlers &#123;<br>        h.<span class="hljs-title function_ invoke__">join</span>().<span class="hljs-title function_ invoke__">unwrap</span>();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>使用Python操作MySql</title>
    <link href="/python/pymysql.html"/>
    <url>/python/pymysql.html</url>
    
    <content type="html"><![CDATA[<h3 id="一、准备"><a href="#一、准备" class="headerlink" title="一、准备"></a>一、准备</h3><ul><li>python <code>3.7.4 docker</code></li><li>mysql <code>Ver 8.0.18 for Linux on x86_64</code> docker</li><li>PyMySQL <code>pip install PyMySQL</code></li></ul><h3 id="二、注意事项"><a href="#二、注意事项" class="headerlink" title="二、注意事项"></a>二、注意事项</h3><ul><li>mysql host需要使用docker容器内部分配的ip(使用 <code>ifconfig</code>查看) – idea可以直接使用<code>localhost:映射端口</code>连接，有一定误导</li><li>事务不会自动提交，需要主动控制 <code>commit</code>或<code>rollback</code></li><li><code>drop</code>操作需要数据表实际存在（<code>drop table if exists user</code>）</li><li><code>create table</code>中<code>int(10)</code>在创建后的数据库表中字段大小<strong>10</strong>已经丢失，在当前数据库版本中会有警告</li><li>实际值大小要和字段匹配</li><li>占位符使用<code>%s</code>,参数使用元组(<code>(p,)</code>)</li><li>连接关闭建议使用<code>with</code>上下文管理，保证资源释放</li></ul><h3 id="三、主要代码"><a href="#三、主要代码" class="headerlink" title="三、主要代码"></a>三、主要代码</h3><h4 id="1、连接"><a href="#1、连接" class="headerlink" title="1、连接"></a>1、连接</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-variable language_">self</span>.db = pymysql.connect(host=<span class="hljs-variable language_">self</span>.host,<br>                                      user=<span class="hljs-variable language_">self</span>.user,<br>                                      password=<span class="hljs-variable language_">self</span>.password,<br>                                      database=<span class="hljs-variable language_">self</span>.database,<br>                                      port=<span class="hljs-variable language_">self</span>.port,<br>                                      charset=<span class="hljs-variable language_">self</span>.charset,<br>                                      cursorclass=<span class="hljs-variable language_">self</span>.cursorclass)<br><span class="hljs-variable language_">self</span>.cursor = <span class="hljs-variable language_">self</span>.db.cursor()<br></code></pre></td></tr></table></figure><h4 id="2、执行execute"><a href="#2、执行execute" class="headerlink" title="2、执行execute"></a>2、执行<code>execute</code></h4><p><code>execute</code> 返回命中记录数<br>通过<code>cursor.fetchone</code>、<code>fetchall</code>、<code>fetchmany(size)</code>获取实际数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">select_sql = <span class="hljs-string">&#x27;select id, name, cellphone, balance, create_time, status from user where id = %s&#x27;</span><br><br>data_id = <span class="hljs-number">5</span>  <span class="hljs-comment"># 在insert完成结果中返回是最好的,待解决</span><br>cursor.execute(select_sql, (data_id, ))<br>result = cursor.fetchone()  <span class="hljs-comment"># 返回为dict, 一条</span><br><span class="hljs-comment"># result = cursor.fetchall()  # 返回为dict，全部</span><br><span class="hljs-comment"># result = cursor.fetchmany(size=5)  # 返回为dict，指定大小</span><br></code></pre></td></tr></table></figure><h4 id="3、事务"><a href="#3、事务" class="headerlink" title="3、事务"></a>3、事务</h4><p>此处使用数据库<code>connect</code>操作事务</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-variable language_">self</span>.connect.commit()<br><span class="hljs-variable language_">self</span>.connect.rollback()<br></code></pre></td></tr></table></figure><h4 id="4、连接关闭"><a href="#4、连接关闭" class="headerlink" title="4、连接关闭"></a>4、连接关闭</h4><p>先关闭<code>cursor</code>在关闭<code>connect</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">cursor.close()<br>connect.close()<br></code></pre></td></tr></table></figure><p>参考：<br><a href="https://www.runoob.com/python3/python3-mysql.html">菜鸟教程</a></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Pymysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Selenium简单使用介绍</title>
    <link href="/python/selenium_simple.html"/>
    <url>/python/selenium_simple.html</url>
    
    <content type="html"><![CDATA[<p>部分测试基于百度首页</p><p>本地html读取方式<code>driver.get(&#39;file:///Workspace/static-web/selenium.html&#39;) </code>  </p><p>以下内容基于:<br><code>Python 3.7.4</code><br><code>selenium 3.141.0</code><br><code>Chrome 80.0.3987.132 64bit</code></p><h3 id="一、安装准备"><a href="#一、安装准备" class="headerlink" title="一、安装准备"></a>一、安装准备</h3><ul><li><code>python</code>模块安装<blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install selenium<br>conda install selenium<br></code></pre></td></tr></table></figure></blockquote></li><li><code>WebDriver</code>下载安装<blockquote><p><a href="https://chromedriver.storage.googleapis.com/index.html" target="_blank">Google</a> 驱动版本需要与浏览器版本对应<br><a href="https://github.com/mozilla/geckodriver/releases" target="_blank">Firefox</a></p></blockquote></li><li>驱动识别引入<blockquote><p>将文件路径添加到系统环境变量 <code>PATH</code>中<br>直接将驱动文件放置到python安装目录下的 <code>bin</code> 目录中</p></blockquote></li></ul><h3 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h3><h4 id="1、控制并打开浏览器窗口"><a href="#1、控制并打开浏览器窗口" class="headerlink" title="1、控制并打开浏览器窗口"></a>1、控制并打开浏览器窗口</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><br><span class="hljs-number">1</span>、selenium版本较高时，推荐使用，避免测试结束忘记关闭<br><span class="hljs-keyword">with</span> webdriver.Chrome() <span class="hljs-keyword">as</span> driver:<br>    driver.get(<span class="hljs-string">&quot;http://www.baidu.com&quot;</span>)<br><br><span class="hljs-number">2</span>、学习阶段建议使用，可以观察到某些变化<br>driver = webdriver.Chrome()<br>driver.get(<span class="hljs-string">&quot;htttp://www.baidu.com&quot;</span>)<br>driver.close()<br></code></pre></td></tr></table></figure><h4 id="2、元素定位"><a href="#2、元素定位" class="headerlink" title="2、元素定位"></a>2、元素定位</h4><p>推荐顺序 id &gt; css 选择器<br><code>XPATH</code>定位准确编写复杂且不利于<code>debug</code><br>链接文本(部分)只适用于 <code>a</code> 链接元素</p><p>以下内容返回第一个匹配的元素，适用<code>find_elements_xx</code>可返回多个元素</p><table><thead><tr><th>定位元素</th><th>示例</th><th>使用方式</th></tr></thead><tbody><tr><td>class名称</td><td><code>class=&quot;index-logo-src&quot;</code></td><td><code>driver.find_element_by_class_name(&#39;index-logo-src&#39;)</code></td></tr><tr><td>css选择器</td><td><code>#lg .index-logo-src</code></td><td><code>driver.find_element_by_css_selector(&#39;#lg .index-logo-src&#39;)</code></td></tr><tr><td>id</td><td><code>#lg</code></td><td><code>driver.find_element_by_id(&#39;#lg&#39;)</code></td></tr><tr><td>name</td><td><code>name=&quot;mp&quot;</code></td><td><code>driver.find_element_by_name(&#39;mp&#39;)</code></td></tr><tr><td>链接部分显示不符</td><td><code>&lt;a&gt;更多产品&lt;/a&gt;</code></td><td><code>driver.find_element_by_link_text(&#39;更多产品&#39;)</code></td></tr><tr><td>链接文本部分</td><td><code>&lt;a&gt;更多产品&lt;/a&gt;</code></td><td><code>driver.find_element_by_partial_link_text(&#39;更多&#39;)</code></td></tr><tr><td>tag标签</td><td><code>&lt;map&gt;&lt;/map&gt;</code></td><td><code>driver.find_element_by_tag_name(&#39;map&#39;)</code></td></tr><tr><td>xpath选择</td><td><code>class=&quot;index-logo-src&quot;</code></td><td><code>driver.find_element_by_xpath(&#39;//div//img[@class=&quot;index-logo-src&quot;]&#39;)</code></td></tr></tbody></table><h4 id="3、控制浏览器"><a href="#3、控制浏览器" class="headerlink" title="3、控制浏览器"></a>3、控制浏览器</h4><table><thead><tr><th>操作</th><th>方法</th></tr></thead><tbody><tr><td>打开浏览器</td><td><code>driver.get(&#39;http://www.baidu.com&#39;)</code></td></tr><tr><td>当前地址</td><td><code>driver.current_url</code></td></tr><tr><td>前进</td><td><code>driver.forward()</code></td></tr><tr><td>后退</td><td><code>driver.back()</code></td></tr><tr><td>刷新</td><td><code>driver.refresh()</code></td></tr><tr><td>标题</td><td><code>driver.title</code></td></tr><tr><td>当前窗口<code>handle</code></td><td><code>driver.current_window_handle</code></td></tr><tr><td>退出</td><td><code>driver.quit()</code></td></tr><tr><td>窗口大小</td><td><code>driver.get_window_size().get(&quot;width&quot;)</code> <code>height</code></td></tr><tr><td>重置窗口</td><td><code>driver.set_window_size(1024, 768)</code></td></tr><tr><td>窗口位置</td><td><code>driver.get_window_position().get(&#39;x&#39;)</code></td></tr><tr><td>设置窗口位置</td><td><code>driver.set_window_position(0, 0)</code></td></tr><tr><td>窗口最大化</td><td><code>driver.maximize_window()</code></td></tr><tr><td>全屏</td><td><code>driver.fullscreen_window()</code></td></tr></tbody></table><p>切换窗口 – 官网示例<br>如果点击链接后会打开新的<code>tab</code>窗口，必须要切换窗口，<code>driver</code>才会跟着切换到新的窗口</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><span class="hljs-keyword">from</span> selenium.webdriver.support.ui <span class="hljs-keyword">import</span> WebDriverWait<br><span class="hljs-keyword">from</span> selenium.webdriver.support <span class="hljs-keyword">import</span> expected_conditions <span class="hljs-keyword">as</span> EC<br><br><span class="hljs-comment"># Start the driver</span><br><span class="hljs-keyword">with</span> webdriver.Firefox() <span class="hljs-keyword">as</span> driver:<br>    <span class="hljs-comment"># Open URL</span><br>    driver.get(<span class="hljs-string">&quot;https://seleniumhq.github.io&quot;</span>)<br><br>    <span class="hljs-comment"># Setup wait for later</span><br>    wait = WebDriverWait(driver, <span class="hljs-number">10</span>)<br><br>    <span class="hljs-comment"># Store the ID of the original window</span><br>    original_window = driver.current_window_handle<br><br>    <span class="hljs-comment"># Check we don&#x27;t have other windows open already</span><br>    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(driver.window_handles) == <span class="hljs-number">1</span><br><br>    <span class="hljs-comment"># Click the link which opens in a new window</span><br>    driver.find_element_by_link_text(<span class="hljs-string">&quot;new window&quot;</span>).click()<br><br>    <span class="hljs-comment"># Wait for the new window or tab</span><br>    wait.until(EC.number_of_windows_to_be(<span class="hljs-number">2</span>))<br><br>    <span class="hljs-comment"># Loop through until we find a new window handle</span><br>    <span class="hljs-keyword">for</span> window_handle <span class="hljs-keyword">in</span> driver.window_handles:<br>        <span class="hljs-keyword">if</span> window_handle != original_window:<br>            driver.switch_to.window(window_handle)<br>            <span class="hljs-keyword">break</span><br><br>    <span class="hljs-comment"># Wait for the new tab to finish loading content</span><br>    wait.until(EC.title_is(<span class="hljs-string">&quot;SeleniumHQ Browser Automation&quot;</span>))<br>  <br></code></pre></td></tr></table></figure><h4 id="4、等待"><a href="#4、等待" class="headerlink" title="4、等待"></a>4、等待</h4><p>等待期望元素加载完成。默认等待策略检测<code>document.readyState</code>状态变为<code>complete</code>，此时如果有<code>script</code>脚本创建元素，可能会出现无法定位到的情况</p><ul><li><p>显示等待</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">10</span>:等待时间 秒<br>WebDriverWait(driver, timeout=<span class="hljs-number">10</span>).until(<span class="hljs-keyword">lambda</span> d: d.find_element_by_class_name(<span class="hljs-string">&#x27;index-logo-src&#x27;</span>))<br></code></pre></td></tr></table></figure><p>  等待条件<br>  详情见<code>from selenium.webdriver.support import expected_conditions</code></p><blockquote><p>弹窗 - 警告 提示 确认<br>元素存在<br>元素可见<br>标题包含<br>标题是  </p></blockquote></li><li><p>隐式等待<br>适合于明确页面元素加载需要一定时间</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">driver = webdriver.Chrome()<br>driver.implicitly_wait(<span class="hljs-number">10</span>)<br></code></pre></td></tr></table></figure></li><li><p>FluentWait<br>可以配置等待时间，检查频率以及对某些异常的忽略  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">wait = WebDriverWait(driver, timeout=<span class="hljs-number">10</span>, poll_frequency=<span class="hljs-number">1</span>, ignored_exceptions=NoSuchElementException)<br>wait.until(EC.element_to_be_clickable(By.XPATH, <span class="hljs-string">&quot;//div&quot;</span>))<br></code></pre></td></tr></table></figure><h4 id="5、JavaScript弹窗"><a href="#5、JavaScript弹窗" class="headerlink" title="5、JavaScript弹窗"></a>5、<code>JavaScript</code>弹窗</h4><p>识别<code>JavaScript</code>弹出的<code>警告、确认、提示</code></p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">alert = wait.until(EC.alert_is_present())<br>// 警告 alert()<br>text = alert.text  <span class="hljs-comment"># 弹窗文本</span><br>alert.accept()  <span class="hljs-comment"># 确认</span><br><br>// 确认 confirm()<br>text = alert.text  <span class="hljs-comment"># 弹窗文本</span><br>alert.accept()  <span class="hljs-comment"># 确认</span><br>alert.dismiss()  <span class="hljs-comment"># 取消</span><br><br>// 提示框 prompt() 需要输入文本<br>alert = Alert(driver)<br>alert.send_keys(<span class="hljs-string">&quot;Selenium&quot;</span>)  <span class="hljs-comment"># 测试时在chrome未生效</span><br>alert.accept()<br></code></pre></td></tr></table></figure></li></ul><h4 id="6、系统键"><a href="#6、系统键" class="headerlink" title="6、系统键"></a>6、系统键</h4><p><code>ActionChains</code>需要使用<code>perform()</code>才会生效<br><strong>send_keys:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><span class="hljs-keyword">from</span> selenium.webdriver.common.keys <span class="hljs-keyword">import</span> Keys<br><br>driver = webdriver.Chrome()<br>driver.get(<span class="hljs-string">&#x27;http://www.baidu.com&#x27;</span>)<br>driver.find_element_by_id(<span class="hljs-string">&#x27;kw&#x27;</span>).send_keys(<span class="hljs-string">&#x27;selenium&#x27;</span> + Keys.ENTER)<br></code></pre></td></tr></table></figure><p><strong>keyDown:模拟按下修改键（CONTROL，SHIFT，ALT）的动作</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">action = webdriver.ActionChains(driver)<br><br>action.key_down(Keys.CONTROL).send_keys(<span class="hljs-string">&quot;a&quot;</span>).perform()<br></code></pre></td></tr></table></figure><p><strong>keyUp:模拟修改键（CONTROL，SHIFT，ALT）的向上（或）释放操作</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">search = driver.find_element_by_id(<span class="hljs-string">&#x27;kw&#x27;</span>)<br>action.key_down(Keys.SHIFT)\<br>    .send_keys_to_element(search, <span class="hljs-string">&#x27;qwerty&#x27;</span>)\<br>    .key_up(Keys.SHIFT)\<br>    .send_keys(<span class="hljs-string">&#x27;qwerty&#x27;</span>)\<br>    .perform()<br><br>传入内容：QWERTYqwerty<br></code></pre></td></tr></table></figure><p><strong>clear:清空文本</strong>  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">search.clear()<br></code></pre></td></tr></table></figure><h4 id="7、示例"><a href="#7、示例" class="headerlink" title="7、示例"></a>7、示例</h4><p>以百度搜索，进入百度翻译，并修改翻译内容为例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><span class="hljs-keyword">from</span> selenium.webdriver.common.keys <span class="hljs-keyword">import</span> Keys<br><span class="hljs-keyword">from</span> selenium.webdriver.support.ui <span class="hljs-keyword">import</span> WebDriverWait<br><span class="hljs-keyword">from</span> selenium.webdriver.support <span class="hljs-keyword">import</span> expected_conditions <span class="hljs-keyword">as</span> EC<br><span class="hljs-keyword">from</span> selenium.webdriver.common.action_chains <span class="hljs-keyword">import</span> ActionChains<br><br>driver = webdriver.Chrome()<br><br>driver.get(<span class="hljs-string">&#x27;http://www.baidu.com&#x27;</span>)<br>driver.maximize_window()<br><span class="hljs-comment"># driver.implicitly_wait(5)  # 隐式等待 不要和显示等待混用</span><br><br><span class="hljs-comment"># 返回单个元素</span><br>driver.find_element_by_id(<span class="hljs-string">&#x27;kw&#x27;</span>)\<br>    .send_keys(<span class="hljs-string">&#x27;qwerty&#x27;</span> + Keys.ENTER)<br><br>wait = WebDriverWait(driver, timeout=<span class="hljs-number">10</span>)  <span class="hljs-comment"># 显示等待 超时10秒</span><br><br>wait.until(EC.title_contains(<span class="hljs-string">&#x27;qwerty&#x27;</span>))<br><br>divs = driver.find_elements_by_css_selector(<span class="hljs-string">&#x27;#content_left div&#x27;</span>)  <span class="hljs-comment"># 返回list</span><br><br>ele = <span class="hljs-literal">None</span><br><span class="hljs-keyword">for</span> div <span class="hljs-keyword">in</span> divs:<br>    text = div.text<br>    <span class="hljs-comment"># 匹配需要的元素</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;Qwerty_百度翻译&#x27;</span> <span class="hljs-keyword">in</span> text:<br>        ele = div<br>        <span class="hljs-keyword">break</span><br><br>a = ele.find_element_by_partial_link_text(<span class="hljs-string">&#x27;百度翻译&#x27;</span>)<br><span class="hljs-built_in">print</span>(a.get_attribute(<span class="hljs-string">&#x27;href&#x27;</span>))<br><br>origin_window = driver.current_window_handle  <span class="hljs-comment"># 获取当前窗口</span><br>a.click()<br><br><span class="hljs-comment"># 迭代所有窗口,窗口切换,切换driver指向, 按需求保存窗口</span><br><span class="hljs-keyword">for</span> win <span class="hljs-keyword">in</span> driver.window_handles:<br>    <span class="hljs-built_in">print</span>(win)  <br>    <span class="hljs-keyword">if</span> win != origin_window:<br>        driver.switch_to.window(win)<br><br>wait.until(EC.title_is(<span class="hljs-string">&#x27;百度翻译&#x27;</span>))<br><br><span class="hljs-comment"># 如果不做窗口切换,driver指向的还是上一个窗口</span><br><span class="hljs-built_in">input</span> = driver.find_element_by_id(<span class="hljs-string">&#x27;baidu_translate_input&#x27;</span>)<br><span class="hljs-built_in">input</span>.clear()  <span class="hljs-comment"># 清空</span><br><span class="hljs-comment"># input.send_keys(&#x27;baidu&#x27;)</span><br><br><span class="hljs-comment"># 此处需要使用perform后才会生效</span><br>action = ActionChains(driver)<br>action.key_down(Keys.SHIFT).send_keys_to_element(<span class="hljs-built_in">input</span>, <span class="hljs-string">&#x27;baidu&#x27;</span>).perform()<br><br>driver.close()  <span class="hljs-comment"># 关闭翻译链接新创建窗口,如果需要继续使用旧的窗口,需要进行switch_to</span><br>driver.switch_to.window(origin_window)<br>driver.close()  <span class="hljs-comment"># 关闭初始创建窗口</span><br>driver.quit() <span class="hljs-comment"># 观察效果的时候需要注释   关闭窗口并且推出webdriver execute</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Selenium</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java类文件解析</title>
    <link href="/java/class.html"/>
    <url>/java/class.html</url>
    
    <content type="html"><![CDATA[<p><strong>类文件组成</strong></p><table><thead><tr><th align="left">组件</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">魔数</td><td align="left"><code>0XCAFEBABE</code></td></tr><tr><td align="left">类文件格式版本</td><td align="left">该类文件的主版本号和次版本号，确保目标JVM版本不低于编译类文件编译版本，如果不兼容，会抛出<code>UnsupportedClassVersionError</code></td></tr><tr><td align="left">常量池</td><td align="left">该类的常量池，比如类、接口和字段的名字，使用产量池表来查找值</td></tr><tr><td align="left">访问标志</td><td align="left">该类是否为抽象类、静态类等，针对类的修饰符</td></tr><tr><td align="left">当前类</td><td align="left">该类的名字，指向常量池的索引，用于识别该类相关的类型层次</td></tr><tr><td align="left">超类</td><td align="left">超类的名字，指向常量池的索引，用于识别该类相关的类型层次</td></tr><tr><td align="left">接口</td><td align="left">该类实现的接口，指向常量池的索引，用于识别该类相关的类型层次</td></tr><tr><td align="left">字段</td><td align="left">该类的所有字段，定义为类似签名的结构，包括修饰符</td></tr><tr><td align="left">方法</td><td align="left">该类的所有方法，定义为类似签名的结构，包括修饰符</td></tr><tr><td align="left">属性</td><td align="left">该类的所有属性（比如，源文件的名字，等等）</td></tr></tbody></table><p><img src="https://raw.githubusercontent.com/duwei0227/picbed/main/image-20240813082353377.png" alt="image-20240813082353377"></p><p>使用<code>javap</code>可以对<code>class</code>文件进行反汇编查看文件组成</p><ul><li><code>-c</code>输出文件的字节码信息，主要是当前类定义本身</li><li><code>-v</code>输出完整的类文件头信息和产量池详情</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>自定义注解实现数据验证</title>
    <link href="/java/data_valid_by_annotation.html"/>
    <url>/java/data_valid_by_annotation.html</url>
    
    <content type="html"><![CDATA[<h3 id="1、创建约束目标"><a href="#1、创建约束目标" class="headerlink" title="1、创建约束目标"></a>1、创建约束目标</h3><p>常见数据验证中，非空、长度等已经有内置的验证器，而对于枚举类型数据值的合法性约束缺失一个合适的方式，选择通过自定义验证器+注解约束</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">CaseMode</span> &#123;<br>    UPPER(<span class="hljs-number">0</span>),<br>    LOWER(<span class="hljs-number">1</span>),<br>    ;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> code;<br><br>    CaseMode(<span class="hljs-type">int</span> code) &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> code;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isValid</span><span class="hljs-params">(<span class="hljs-type">int</span> other)</span> &#123;<br>        <span class="hljs-keyword">for</span> (CaseMode cas : CaseMode.values()) &#123;<br>            <span class="hljs-keyword">if</span> (cas.code == other) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、定义约束注解"><a href="#2、定义约束注解" class="headerlink" title="2、定义约束注解"></a>2、定义约束注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> cn.probiecoder.springjavademo.validator.CaseValidator;<br><span class="hljs-keyword">import</span> jakarta.validation.Constraint;<br><span class="hljs-keyword">import</span> jakarta.validation.Payload;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.*;<br><br><span class="hljs-meta">@Target(&#123;ElementType.FIELD, ElementType.PARAMETER&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Constraint(validatedBy = CaseValidator.class)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> ValidCase &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 验证不通过时的，错误消息模板</span><br><span class="hljs-comment">     */</span><br>    String <span class="hljs-title function_">message</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&#123;com.mycompany.constraints.checkcase&#125;&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 验证标签，验证时可以指定 group 进行验证</span><br><span class="hljs-comment">     * 不指定时，划分在默认组 `jakarta.validation.groups.Default`</span><br><span class="hljs-comment">     */</span><br>    Class&lt;?&gt;[] groups() <span class="hljs-keyword">default</span> &#123;&#125;;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 载荷信息，可以添加额外的元数据信息</span><br><span class="hljs-comment">     */</span><br>    Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Payload</span>&gt;[] payload() <span class="hljs-keyword">default</span> &#123;&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>message：必须，定义默认消息模板，约束条件验证失败的时候，通过此属性来输出错误信息</p></li><li><p>groups：必须，指定约束条件属于哪些校验组，可以使用字符串或者一个空的无定义的<code>interface</code>，建议采用 <code>interface</code>; </p><ul><li><code>validator.validate()</code>不指定<code>group</code>时，</li></ul></li><li><p>payload：必须，<code>Bean Validation API</code> 的使用者可以通过此属性来给约束条件指定严重级别. 这个属性并不被API自身所使用，或者增加额外的元数据信息</p></li></ul><h3 id="3、定义约束校验器"><a href="#3、定义约束校验器" class="headerlink" title="3、定义约束校验器"></a>3、定义约束校验器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> cn.probiecoder.springjavademo.annotations.ValidCase;<br><span class="hljs-keyword">import</span> cn.probiecoder.springjavademo.enums.CaseMode;<br><span class="hljs-keyword">import</span> jakarta.validation.ConstraintValidator;<br><span class="hljs-keyword">import</span> jakarta.validation.ConstraintValidatorContext;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CaseValidator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ConstraintValidator</span>&lt;ValidCase, Integer&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initialize</span><span class="hljs-params">(ValidCase constraintAnnotation)</span> &#123;<br>        <span class="hljs-comment">// 初始化方法，会在 isValid前执行</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isValid</span><span class="hljs-params">(Integer value, ConstraintValidatorContext context)</span> &#123;<br>        <span class="hljs-keyword">if</span> (value == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> CaseMode.isValid(value);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>实现 <code>ConstraintValidator</code> 接口，继承 <code>isValid</code> 定义验证规则</li><li><code>initialize</code>方法为接口默认实现方法，如果不需要在验证前进行初始化，可以不实现</li><li><code>isValid</code>验证方法，验证逻辑需要在这里实现</li><li>对于<code>null</code>值，<code>Bean Validation</code>推荐按照合法的值进行处理，如果值非空通过 <code>@NotNull</code> 或者 <code>@NotBlank</code> 验证。<strong>那么如果需要缺省值有什么好方法呢？</strong></li></ul><h3 id="4、示例"><a href="#4、示例" class="headerlink" title="4、示例"></a>4、示例</h3><h4 id="4-1-所有属性验证采用默认group"><a href="#4-1-所有属性验证采用默认group" class="headerlink" title="4.1 所有属性验证采用默认group"></a>4.1 所有属性验证采用默认group</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> cn.probiecoder.springjavademo.annotations.ValidCase;<br><span class="hljs-keyword">import</span> jakarta.validation.constraints.Min;<br><span class="hljs-keyword">import</span> jakarta.validation.constraints.NotBlank;<br><span class="hljs-keyword">import</span> jakarta.validation.constraints.Size;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CaseModeDTO</span> &#123;<br>    <span class="hljs-meta">@NotBlank</span><br>    <span class="hljs-keyword">private</span> String a;<br>    <span class="hljs-meta">@Negative</span><br>    <span class="hljs-keyword">private</span> Integer b;<br>    <span class="hljs-meta">@Size(min=1, max = 10)</span><br>    <span class="hljs-keyword">private</span> String c;<br>    <span class="hljs-meta">@Min(3)</span><br>    <span class="hljs-keyword">private</span> String d;<br>    <span class="hljs-meta">@ValidCase</span><br>    <span class="hljs-keyword">private</span> Integer mode;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> (<span class="hljs-type">var</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> Validation.buildDefaultValidatorFactory()) &#123;<br>    <span class="hljs-type">var</span> <span class="hljs-variable">validator</span> <span class="hljs-operator">=</span> factory.getValidator();<br><br>    <span class="hljs-type">var</span> <span class="hljs-variable">dto</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CaseModeDTO</span>();<br>    dto.setA(<span class="hljs-string">&quot;a&quot;</span>);<br>    dto.setB(-<span class="hljs-number">3</span>);<br>    dto.setC(<span class="hljs-string">&quot;CCC&quot;</span>);<br>    dto.setD(<span class="hljs-number">2</span>);<br>    dto.setMode(CaseMode.LOWER.getCode());<br>    <span class="hljs-type">var</span> <span class="hljs-variable">violations</span> <span class="hljs-operator">=</span> validator.validate(dto);<br>    violations.forEach(System.out::println);<br>&#125;<br><br>属性D要求最小为<span class="hljs-number">3</span>,设置为<span class="hljs-number">2</span>,不符合验证规则，消息输出 must be greater than or equal to <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h4 id="4-2-属性指定不同-group，验证默认group（不指定group）"><a href="#4-2-属性指定不同-group，验证默认group（不指定group）" class="headerlink" title="4.2 属性指定不同 group，验证默认group（不指定group）"></a>4.2 属性指定不同 group，验证默认group（不指定group）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CaseModeDTO</span> &#123;<br>    <span class="hljs-meta">@NotBlank</span><br>    <span class="hljs-keyword">private</span> String a;<br>    <span class="hljs-meta">@Negative(groups = InsertChecks.class)</span><br>    <span class="hljs-keyword">private</span> Integer b;<br>    <span class="hljs-meta">@Size(min=1, max = 10, groups = InsertChecks.class)</span><br>    <span class="hljs-keyword">private</span> String c;<br>    <span class="hljs-meta">@Min(value = 3, groups = UpdateChecks.class)</span><br>    <span class="hljs-keyword">private</span> Integer d;<br>    <span class="hljs-meta">@ValidCase(groups = UpdateChecks.class)</span><br>    <span class="hljs-keyword">private</span> Integer mode;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> (<span class="hljs-type">var</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> Validation.buildDefaultValidatorFactory()) &#123;<br>    <span class="hljs-type">var</span> <span class="hljs-variable">validator</span> <span class="hljs-operator">=</span> factory.getValidator();<br><br>    <span class="hljs-type">var</span> <span class="hljs-variable">dto</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CaseModeDTO</span>();<br>    dto.setB(<span class="hljs-number">3</span>);<br>    dto.setC(<span class="hljs-string">&quot;CCC&quot;</span>);<br>    dto.setD(<span class="hljs-number">4</span>);<br>    dto.setMode(<span class="hljs-number">2</span>);<br>    <span class="hljs-type">var</span> <span class="hljs-variable">violations</span> <span class="hljs-operator">=</span> validator.validate(dto);<br>    violations.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">ConstraintViolationImpl&#123;interpolatedMessage=<span class="hljs-string">&#x27;must be less than 0&#x27;</span>, propertyPath=b, rootBeanClass=<span class="hljs-keyword">class</span> <span class="hljs-title class_">cn</span>.probiecoder.springjavademo.dto.CaseModeDTO, messageTemplate=<span class="hljs-string">&#x27;&#123;jakarta.validation.constraints.Negative.message&#125;&#x27;</span>&#125;<br><br>ConstraintViolationImpl&#123;interpolatedMessage=<span class="hljs-string">&#x27;must not be blank&#x27;</span>, propertyPath=a, rootBeanClass=<span class="hljs-keyword">class</span> <span class="hljs-title class_">cn</span>.probiecoder.springjavademo.dto.CaseModeDTO, messageTemplate=<span class="hljs-string">&#x27;&#123;jakarta.validation.constraints.NotBlank.message&#125;&#x27;</span>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>验证时不指定<code>group</code>，自定义的验证器未校验，内置的验证器被执行。</strong></p><h4 id="4-3-属性c和mode指定group，验证指定group"><a href="#4-3-属性c和mode指定group，验证指定group" class="headerlink" title="4.3 属性c和mode指定group，验证指定group"></a>4.3 属性c和mode指定group，验证指定group</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CaseModeDTO</span> &#123;<br>    <span class="hljs-meta">@NotBlank</span><br>    <span class="hljs-keyword">private</span> String a;<br>    <span class="hljs-meta">@Negative(groups = InsertChecks.class)</span><br>    <span class="hljs-keyword">private</span> Integer b;<br>    <span class="hljs-meta">@Size(min=1, max = 10, groups = UpdateChecks.class)</span><br>    <span class="hljs-keyword">private</span> String c;<br>    <span class="hljs-meta">@Min(value = 3, groups = UpdateChecks.class)</span><br>    <span class="hljs-keyword">private</span> Integer d;<br>    <span class="hljs-meta">@ValidCase(groups = UpdateChecks.class)</span><br>    <span class="hljs-keyword">private</span> Integer mode;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> (<span class="hljs-type">var</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> Validation.buildDefaultValidatorFactory()) &#123;<br>    <span class="hljs-type">var</span> <span class="hljs-variable">validator</span> <span class="hljs-operator">=</span> factory.getValidator();<br><br>    <span class="hljs-type">var</span> <span class="hljs-variable">dto</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CaseModeDTO</span>();<br>    dto.setC(<span class="hljs-string">&quot;CCC&quot;</span>);<br>    dto.setD(<span class="hljs-number">4</span>);<br>    dto.setMode(<span class="hljs-number">2</span>);<br>    <span class="hljs-type">var</span> <span class="hljs-variable">violations</span> <span class="hljs-operator">=</span> validator.validate(dto, UpdateChecks.class);<br>    violations.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><p>输出结果与期望相同：只验证了 <code>group=UpdateChecks.class</code>，<code>mode</code>不符合枚举值，被拦截，返回配置的默认消息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jav">ConstraintViolationImpl&#123;interpolatedMessage=&#x27;Invalid case mode&#x27;, propertyPath=mode, rootBeanClass=class cn.probiecoder.springjavademo.dto.CaseModeDTO, messageTemplate=&#x27;Invalid case mode&#x27;&#125;<br></code></pre></td></tr></table></figure><h3 id="5、错误消息配置"><a href="#5、错误消息配置" class="headerlink" title="5、错误消息配置"></a>5、错误消息配置</h3><h4 id="5-1-在配置message时，通过default直接指定固定的错误消息"><a href="#5-1-在配置message时，通过default直接指定固定的错误消息" class="headerlink" title="5.1 在配置message时，通过default直接指定固定的错误消息"></a>5.1 在配置message时，通过default直接指定固定的错误消息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">String <span class="hljs-title function_">message</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;case mode is invalid&quot;</span>;<br></code></pre></td></tr></table></figure><p>配置简单，灵活性不强，需要国际化时不能很好处理</p><h4 id="5-2-通过消息模板配置"><a href="#5-2-通过消息模板配置" class="headerlink" title="5.2 通过消息模板配置"></a>5.2 通过消息模板配置</h4><p>通过 <code>&#123;&#125;</code> 包括的内容会作为消息模板索引进行检索，默认的解析器(<code>MessageInterpolator</code>)解析顺序如下：</p><ul><li>先在类路径下查找名称为<code>ValidationMessages.properties</code>的<code>ResourceBundle</code>，然后将占位符和这个文件中定义的resource进行匹配</li><li>匹配Hibernate Validator自带的位于<code>/org/hibernate/validator/ValidationMessages.properties</code>的<code>ResourceBundle</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">String <span class="hljs-title function_">message</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&#123;jakarta.validation.constraints.Size.message&#125;&quot;</span>;<br></code></pre></td></tr></table></figure><h4 id="5-3-Spring-Boot-国际化消息配置"><a href="#5-3-Spring-Boot-国际化消息配置" class="headerlink" title="5.3 Spring Boot 国际化消息配置"></a>5.3 Spring Boot 国际化消息配置</h4><h5 id="5-3-1-全局异常拦截处理"><a href="#5-3-1-全局异常拦截处理" class="headerlink" title="5.3.1 全局异常拦截处理"></a>5.3.1 全局异常拦截处理</h5><p><code>Spring Boot</code>默认错误处理器(<code>DefaultHandlerExceptionResolver</code>)会按照<code>400 Bad Request</code>处理错误异常，但是无具体错误消息，对于客户端来说无实际意义，服务端需要将错误信息进行处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.probiecoder.springjavademo.errorhandler;<br><br><span class="hljs-keyword">import</span> jakarta.validation.ConstraintViolation;<br><span class="hljs-keyword">import</span> jakarta.validation.ConstraintViolationException;<br><span class="hljs-keyword">import</span> org.springframework.context.support.DefaultMessageSourceResolvable;<br><span class="hljs-keyword">import</span> org.springframework.http.HttpStatus;<br><span class="hljs-keyword">import</span> org.springframework.validation.BindException;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.MethodArgumentNotValidException;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.ResponseStatus;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestControllerAdvice;<br><br><span class="hljs-keyword">import</span> java.util.stream.Collectors;<br><br><span class="hljs-meta">@RestControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GlobalExceptionHandler</span> &#123;<br>    <span class="hljs-meta">@ResponseStatus(HttpStatus.OK)</span><br>    <span class="hljs-meta">@ExceptionHandler(BindException.class)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">bindExceptionHandler</span><span class="hljs-params">(BindException e)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> e.getBindingResult().getAllErrors().stream()<br>                .map(DefaultMessageSourceResolvable::getDefaultMessage)<br>                .collect(Collectors.joining());<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;\&quot;errors\&quot;:\&quot;&quot;</span> + message + <span class="hljs-string">&quot;\&quot;&#125;&quot;</span>;  <span class="hljs-comment">// 此处需要更优解，按照项目约定返回固定结构</span><br>    &#125;<br><br>    <span class="hljs-meta">@ResponseStatus(HttpStatus.OK)</span><br>    <span class="hljs-meta">@ExceptionHandler(MethodArgumentNotValidException.class)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">methodArgumentNotValidExceptionHandler</span><span class="hljs-params">(MethodArgumentNotValidException e)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> e.getBindingResult().getAllErrors().stream()<br>                .map(DefaultMessageSourceResolvable::getDefaultMessage)<br>                .collect(Collectors.joining());<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;\&quot;errors\&quot;:\&quot;&quot;</span> + message + <span class="hljs-string">&quot;\&quot;&#125;&quot;</span>;  <span class="hljs-comment">// 此处需要更优解，按照项目约定返回固定结构</span><br>    &#125;<br><br>    <span class="hljs-meta">@ResponseStatus(HttpStatus.OK)</span><br>    <span class="hljs-meta">@ExceptionHandler(ConstraintViolationException.class)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">constraintViolationExceptionHandler</span><span class="hljs-params">(ConstraintViolationException e)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> e.getConstraintViolations().stream()<br>                .map(ConstraintViolation::getMessage)<br>                .collect(Collectors.joining());<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;\&quot;errors\&quot;:\&quot;&quot;</span> + message + <span class="hljs-string">&quot;\&quot;&#125;&quot;</span>;  <span class="hljs-comment">// 此处需要更优解，按照项目约定返回固定结构</span><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="5-3-2-自定义验证器Validator指定文件位置和命名"><a href="#5-3-2-自定义验证器Validator指定文件位置和命名" class="headerlink" title="5.3.2 自定义验证器Validator指定文件位置和命名"></a>5.3.2 自定义验证器Validator指定文件位置和命名</h5><p>此处需要覆盖 <code>MessageResource</code>来指定具体的<code>message</code>文件，<code>hibernate</code>默认在类路径下查找<code>ValidationMessages.properties</code>文件，如果不需要指定其他<code>message</code>文件或不和业务错误<code>message</code>统一，此处也可以不覆写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.probiecoder.springjavademo.config;<br><br><span class="hljs-keyword">import</span> jakarta.validation.Validator;<br><span class="hljs-keyword">import</span> org.springframework.context.MessageSource;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ReloadableResourceBundleMessageSource;<br><span class="hljs-keyword">import</span> org.springframework.validation.beanvalidation.LocalValidatorFactoryBean;<br><span class="hljs-keyword">import</span> org.springframework.validation.beanvalidation.MethodValidationPostProcessor;<br><br><span class="hljs-keyword">import</span> java.nio.charset.StandardCharsets;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MessageHandlerConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> MessageSource <span class="hljs-title function_">messageSource</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">ReloadableResourceBundleMessageSource</span> <span class="hljs-variable">messageSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReloadableResourceBundleMessageSource</span>();<br>        messageSource.setBasename(<span class="hljs-string">&quot;classpath:messages&quot;</span>);  <span class="hljs-comment">// 消息文件格式为 messages_zh_CN.properties 此处指定消息文件前缀</span><br>        messageSource.setDefaultEncoding(StandardCharsets.UTF_8.name());<br>        <span class="hljs-keyword">return</span> messageSource;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Validator <span class="hljs-title function_">getValidator</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">LocalValidatorFactoryBean</span> <span class="hljs-variable">validator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LocalValidatorFactoryBean</span>();<br>        validator.setValidationMessageSource(messageSource());<br>        <span class="hljs-keyword">return</span> validator;<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> MethodValidationPostProcessor <span class="hljs-title function_">validationPostProcessor</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">MethodValidationPostProcessor</span> <span class="hljs-variable">processor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MethodValidationPostProcessor</span>();<br>        <span class="hljs-comment">//指定请求验证器</span><br>        processor.setValidator(getValidator());<br>        <span class="hljs-keyword">return</span> processor;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="5-3-3-指定全局验证"><a href="#5-3-3-指定全局验证" class="headerlink" title="5.3.3 指定全局验证"></a>5.3.3 指定全局验证</h5><p>此处一定需要进行全局异常拦截处理 <code>ConstraintViolationException</code>，否则<code>Spring Boot</code>默认返回<code>400</code>且无具体的错误原因</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.probiecoder.springjavademo.validator;<br><br><span class="hljs-keyword">import</span> jakarta.annotation.Resource;<br><span class="hljs-keyword">import</span> jakarta.validation.ConstraintViolation;<br><span class="hljs-keyword">import</span> jakarta.validation.ConstraintViolationException;<br><span class="hljs-keyword">import</span> jakarta.validation.Validator;<br><span class="hljs-keyword">import</span> jakarta.validation.constraints.NotNull;<br><span class="hljs-keyword">import</span> jakarta.validation.groups.Default;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppValidator</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> Validator validator;<br><br>    <span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">validate</span><span class="hljs-params">(<span class="hljs-meta">@NotNull</span> T object)</span> &#123;<br>        <span class="hljs-built_in">this</span>.validate(object, Default.class);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">validate</span><span class="hljs-params">(<span class="hljs-meta">@NotNull</span> T object, <span class="hljs-meta">@NotNull</span> Class&lt;?&gt;... groups)</span> &#123;<br>        Set&lt;ConstraintViolation&lt;T&gt;&gt; violations = <span class="hljs-built_in">this</span>.validator.validate(object, groups);<br>        <span class="hljs-keyword">if</span> (!violations.isEmpty()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstraintViolationException</span>(violations);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="5-3-4-验证"><a href="#5-3-4-验证" class="headerlink" title="5.3.4 验证"></a>5.3.4 验证</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 采用默认的 Default group，目前验证自定义的验证器如果指定group后，采用默认分组不会进行验证，而hibernate内置的验证器在指定group的情况也会生效</span><br>appValidator.validate(caseModeDTO);<br><span class="hljs-comment">// 指定具体的group</span><br>appValidator.validate(caseModeDTO, UpdateChecks.class);<br></code></pre></td></tr></table></figure><p><strong>参考：</strong></p><p>1、<a href="https://juejin.cn/post/6979165353481863182">https://juejin.cn/post/6979165353481863182</a></p><p>2、<a href="https://gist.github.com/aoudiamoncef/9eeece142d1ef0faa4d06216a41282a2">https://gist.github.com/aoudiamoncef/9eeece142d1ef0faa4d06216a41282a2</a></p><p>3、<a href="https://docs.jboss.org/hibernate/validator/4.2/reference/zh-CN/html/">https://docs.jboss.org/hibernate/validator/4.2/reference/zh-CN/html/</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>注解,Annotation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>虚拟线程Virtual threads</title>
    <link href="/java/virtual_thread.html"/>
    <url>/java/virtual_thread.html</url>
    
    <content type="html"><![CDATA[<p>虚拟线程是一种比传统 Java 线程（OS线程）更轻量的线程实现。与传统线程由操作系统管理不同，虚拟线程由 JVM 管理，多个虚拟线程可以在少量的操作系统线程（平台线程）上运行。虚拟线程的创建、切换和销毁的开销远小于传统线程，同时虚拟线程可以和普通线程一样的使用。</p><h4 id="1、虚拟线程的创建"><a href="#1、虚拟线程的创建" class="headerlink" title="1、虚拟线程的创建"></a>1、虚拟线程的创建</h4><h5 id="1-1-构建-Thread-Builder"><a href="#1-1-构建-Thread-Builder" class="headerlink" title="1.1 构建 Thread.Builder"></a>1.1 构建 Thread.Builder</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Thread.<span class="hljs-type">Builder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> Thread.ofVirtual().name(<span class="hljs-string">&quot;worker-&quot;</span>, <span class="hljs-number">0</span>);    <br></code></pre></td></tr></table></figure><p><code>name</code>有2个不同参数列表的实现</p><ul><li><code>name(String *name*)</code>指定虚拟线程的名称，后期通过<code>builder</code>启动的虚拟线程名称都是相同的</li><li><code>name(String *prefix*, long *start*)</code>指定虚拟线程的<code>prefix</code>和开始线程的索引</li></ul><h5 id="1-2-使用Builder启动虚拟线程"><a href="#1-2-使用Builder启动虚拟线程" class="headerlink" title="1.2 使用Builder启动虚拟线程"></a>1.2 使用Builder启动虚拟线程</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> builder.start();<br></code></pre></td></tr></table></figure><p>由于虚拟线程也是通过<code>Thread</code>创建产生，当<code>Thread</code>实例创建以后，后续的使用和普通线程是相同的</p><h5 id="1-3-未捕获异常处理"><a href="#1-3-未捕获异常处理" class="headerlink" title="1.3 未捕获异常处理"></a>1.3 未捕获异常处理</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">builder.uncaughtExceptionHandler((t, e) -&gt; &#123;<br>            System.out.println(t.getName() + <span class="hljs-string">&quot;抛出了异常&quot;</span> + e.getMessage());<br>        &#125;);<br></code></pre></td></tr></table></figure><h4 id="2、虚拟线程栈查看"><a href="#2、虚拟线程栈查看" class="headerlink" title="2、虚拟线程栈查看"></a>2、虚拟线程栈查看</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">jcmd &lt;PID&gt; Thread.dump_to_file -format=text &lt;file&gt;<br>jcmd &lt;PID&gt; Thread.dump_to_file -format=json &lt;file&gt;<br></code></pre></td></tr></table></figure><p>输出示例</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>   <span class="hljs-attr">&quot;tid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;20&quot;</span><span class="hljs-punctuation">,</span><br>   <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vt-worker-0&quot;</span><span class="hljs-punctuation">,</span><br>   <span class="hljs-attr">&quot;stack&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-string">&quot;java.base\/java.lang.VirtualThread.parkNanos(VirtualThread.java:635)&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;java.base\/java.lang.VirtualThread.sleepNanos(VirtualThread.java:807)&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;java.base\/java.lang.Thread.sleep(Thread.java:556)&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;java.base\/java.util.concurrent.TimeUnit.sleep(TimeUnit.java:446)&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;cn.probiecoder.concurrency.VirtualThread.lambda$0(VirtualThread.java:15)&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;java.base\/java.lang.VirtualThread.run(VirtualThread.java:329)&quot;</span><br>   <span class="hljs-punctuation">]</span><br> <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><strong>使用<code>jcmd &lt;PID&gt; Thread.print</code>直接输出线程栈信息时无详细的虚拟线程信息</strong></p><h4 id="3、线程数的设置"><a href="#3、线程数的设置" class="headerlink" title="3、线程数的设置"></a>3、线程数的设置</h4><p>可以通过如下 <code>System.property</code>设置<code>ForkJoinPool</code>的参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">jdk.virtualThreadScheduler.parallelism<br>jdk.virtualThreadScheduler.maxPoolSize<br>jdk.virtualThreadScheduler.minRunnable<br></code></pre></td></tr></table></figure><h4 id="4、底层实现"><a href="#4、底层实现" class="headerlink" title="4、底层实现"></a>4、底层实现</h4><p>在执行<code>start()</code>方法时会创建正式的虚拟线程，并指定虚拟线程名称，所依托的普通线程调度器<code>scheduler</code></p><p><code>ThreadBuilder.VirtualThreadBuilder</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Thread <span class="hljs-title function_">unstarted</span><span class="hljs-params">(Runnable task)</span> &#123;<br>    Objects.requireNonNull(task);<br>    <span class="hljs-type">var</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> newVirtualThread(scheduler, nextThreadName(), characteristics(), task);<br>    <span class="hljs-type">UncaughtExceptionHandler</span> <span class="hljs-variable">uhe</span> <span class="hljs-operator">=</span> uncaughtExceptionHandler();<br>    <span class="hljs-keyword">if</span> (uhe != <span class="hljs-literal">null</span>)<br>        thread.uncaughtExceptionHandler(uhe);<br>    <span class="hljs-keyword">return</span> thread;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>VirtualThread</code>继承<code>sealed</code>类<code>BaseVirtualThread</code>，继承<code>Thread</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">VirtualThread(Executor scheduler, String name, <span class="hljs-type">int</span> characteristics, Runnable task) &#123;<br>    <span class="hljs-built_in">super</span>(name, characteristics, <span class="hljs-comment">/*bound*/</span> <span class="hljs-literal">false</span>);<br>    Objects.requireNonNull(task);<br><br>    <span class="hljs-comment">// choose scheduler if not specified</span><br>    <span class="hljs-keyword">if</span> (scheduler == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">parent</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>        <span class="hljs-keyword">if</span> (parent <span class="hljs-keyword">instanceof</span> VirtualThread vparent) &#123;<br>            scheduler = vparent.scheduler;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            scheduler = DEFAULT_SCHEDULER;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">this</span>.scheduler = scheduler;<br>    <span class="hljs-built_in">this</span>.cont = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VThreadContinuation</span>(<span class="hljs-built_in">this</span>, task);<br>    <span class="hljs-built_in">this</span>.runContinuation = <span class="hljs-built_in">this</span>::runContinuation;<br>&#125;<br></code></pre></td></tr></table></figure><p>默认的调度器为<code>ForkJoinPool</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ForkJoinPool</span> <span class="hljs-variable">DEFAULT_SCHEDULER</span> <span class="hljs-operator">=</span> createDefaultScheduler();<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ForkJoinPool <span class="hljs-title function_">createDefaultScheduler</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">ForkJoinWorkerThreadFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> pool -&gt; &#123;<br>        PrivilegedAction&lt;ForkJoinWorkerThread&gt; pa = () -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">CarrierThread</span>(pool);<br>        <span class="hljs-keyword">return</span> AccessController.doPrivileged(pa);<br>    &#125;;<br>    PrivilegedAction&lt;ForkJoinPool&gt; pa = () -&gt; &#123;<br>        <span class="hljs-type">int</span> parallelism, maxPoolSize, minRunnable;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">parallelismValue</span> <span class="hljs-operator">=</span> System.getProperty(<span class="hljs-string">&quot;jdk.virtualThreadScheduler.parallelism&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">maxPoolSizeValue</span> <span class="hljs-operator">=</span> System.getProperty(<span class="hljs-string">&quot;jdk.virtualThreadScheduler.maxPoolSize&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">minRunnableValue</span> <span class="hljs-operator">=</span> System.getProperty(<span class="hljs-string">&quot;jdk.virtualThreadScheduler.minRunnable&quot;</span>);<br>        <span class="hljs-keyword">if</span> (parallelismValue != <span class="hljs-literal">null</span>) &#123;<br>            parallelism = Integer.parseInt(parallelismValue);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            parallelism = Runtime.getRuntime().availableProcessors();<br>        &#125;<br>        <span class="hljs-keyword">if</span> (maxPoolSizeValue != <span class="hljs-literal">null</span>) &#123;<br>            maxPoolSize = Integer.parseInt(maxPoolSizeValue);<br>            parallelism = Integer.min(parallelism, maxPoolSize);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            maxPoolSize = Integer.max(parallelism, <span class="hljs-number">256</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (minRunnableValue != <span class="hljs-literal">null</span>) &#123;<br>            minRunnable = Integer.parseInt(minRunnableValue);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            minRunnable = Integer.max(parallelism / <span class="hljs-number">2</span>, <span class="hljs-number">1</span>);<br>        &#125;<br>        Thread.<span class="hljs-type">UncaughtExceptionHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> (t, e) -&gt; &#123; &#125;;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">asyncMode</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">// FIFO</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ForkJoinPool</span>(parallelism, factory, handler, asyncMode,<br>                     <span class="hljs-number">0</span>, maxPoolSize, minRunnable, pool -&gt; <span class="hljs-literal">true</span>, <span class="hljs-number">30</span>, SECONDS);<br>    &#125;;<br>    <span class="hljs-keyword">return</span> AccessController.doPrivileged(pa);<br>&#125;<br></code></pre></td></tr></table></figure><p>将虚拟线程绑定到<code>PlatformThread</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ChangesCurrentThread</span><br><span class="hljs-meta">@ReservedStackAccess</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mount</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// notify JVMTI before mount</span><br>    notifyJvmtiMount(<span class="hljs-comment">/*hide*/</span><span class="hljs-literal">true</span>);<br><br>    <span class="hljs-comment">// sets the carrier thread</span><br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">carrier</span> <span class="hljs-operator">=</span> Thread.currentCarrierThread();<br>    setCarrierThread(carrier);<br><br>    <span class="hljs-comment">// sync up carrier thread interrupt status if needed</span><br>    <span class="hljs-keyword">if</span> (interrupted) &#123;<br>        carrier.setInterrupt();<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (carrier.isInterrupted()) &#123;<br>        <span class="hljs-keyword">synchronized</span> (interruptLock) &#123;<br>            <span class="hljs-comment">// need to recheck interrupt status</span><br>            <span class="hljs-keyword">if</span> (!interrupted) &#123;<br>                carrier.clearInterrupt();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// set Thread.currentThread() to return this virtual thread</span><br>    carrier.setCurrentThread(<span class="hljs-built_in">this</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MyBatis自定义TypeHandler</title>
    <link href="/mybatis/typehandler.html"/>
    <url>/mybatis/typehandler.html</url>
    
    <content type="html"><![CDATA[<p>背景：使用数据库存储 <code>json</code> 格式数据时，需要通过 <code>MyBatis</code> 转换映射为自定义数据类型。</p><h2 id="一、项目依赖"><a href="#一、项目依赖" class="headerlink" title="一、项目依赖"></a>一、项目依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- MyBatis --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- MySQL 驱动 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.26<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Jackson 用于 JSON 处理 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.13.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="二、编写自己的TypeHandler"><a href="#二、编写自己的TypeHandler" class="headerlink" title="二、编写自己的TypeHandler"></a>二、编写自己的TypeHandler</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.core.type.TypeReference;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class="hljs-keyword">import</span> org.apache.ibatis.type.BaseTypeHandler;<br><span class="hljs-keyword">import</span> org.apache.ibatis.type.JdbcType;<br><span class="hljs-keyword">import</span> org.apache.ibatis.type.MappedJdbcTypes;<br><span class="hljs-keyword">import</span> org.apache.ibatis.type.MappedTypes;<br><br><span class="hljs-keyword">import</span> java.sql.CallableStatement;<br><span class="hljs-keyword">import</span> java.sql.PreparedStatement;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@MappedJdbcTypes(JdbcType.VARCHAR)</span>  <span class="hljs-comment">// 处理 JDBC VARCHAR 类型字段</span><br><span class="hljs-meta">@MappedTypes(&#123;List.class&#125;)</span>          <span class="hljs-comment">// 映射到 Java 的 List 类型</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringListTypeHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseTypeHandler</span>&lt;List&lt;String&gt;&gt; &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">objectMapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br><br>    <span class="hljs-comment">//------------------- 序列化：Java → 数据库 -------------------</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNonNullParameter</span><span class="hljs-params">(PreparedStatement ps, <span class="hljs-type">int</span> i,</span><br><span class="hljs-params">                                    List&lt;String&gt; parameter, JdbcType jdbcType)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> objectMapper.writeValueAsString(parameter);<br>            ps.setString(i, json);<br>        &#125; <span class="hljs-keyword">catch</span> (JsonProcessingException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SQLException</span>(<span class="hljs-string">&quot;JSON 序列化失败: &quot;</span> + e.getMessage(), e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//------------------- 反序列化：数据库 → Java -------------------</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">getNullableResult</span><span class="hljs-params">(ResultSet rs, String columnName)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-keyword">return</span> parseJson(rs.getString(columnName));<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">getNullableResult</span><span class="hljs-params">(ResultSet rs, <span class="hljs-type">int</span> columnIndex)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-keyword">return</span> parseJson(rs.getString(columnIndex));<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">getNullableResult</span><span class="hljs-params">(CallableStatement cs, <span class="hljs-type">int</span> columnIndex)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-keyword">return</span> parseJson(cs.getString(columnIndex));<br>    &#125;<br><br>    <span class="hljs-comment">// 统一 JSON 解析逻辑</span><br>    <span class="hljs-keyword">private</span> List&lt;String&gt; <span class="hljs-title function_">parseJson</span><span class="hljs-params">(String json)</span> &#123;<br>        <span class="hljs-keyword">if</span> (json == <span class="hljs-literal">null</span> || json.isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> objectMapper.readValue(json, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeReference</span>&lt;List&lt;String&gt;&gt;() &#123;<br>            &#125;);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;JSON 反序列化失败: &quot;</span> + e.getMessage(), e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三、注册typeHandler"><a href="#三、注册typeHandler" class="headerlink" title="三、注册typeHandler"></a>三、注册typeHandler</h2><p>注册多个不同的包时使用 <strong>逗号</strong> 分割</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml">mybatis:<br>type-handlers-package: 自定义typeHandler包路径<br></code></pre></td></tr></table></figure><h2 id="四、Mapper-XML中配置属性typeHandler"><a href="#四、Mapper-XML中配置属性typeHandler" class="headerlink" title="四、Mapper XML中配置属性typeHandler"></a>四、Mapper XML中配置属性typeHandler</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;BaseResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;cn.probiecoder.Task&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;tasks&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;tasks&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span>  <span class="hljs-attr">typeHandler</span>=<span class="hljs-string">&quot;cn.probiecoder.config.StringListTypeHandler&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用<code>MyBatis</code>进行对象映射时，经过以上就可以实现</p><p><strong>注意事项：</strong></p><p>当使用 <code>MyBatis-Plus</code> 等框架时，如果同一个 <code>List</code> 需要进行不同类型的转换包装，请注意：在使用 <code>MyBatis-Plus</code> 提供的 <code>API</code>（如 <code>selectByPrimaryKey</code>）时，字段映射会默认使用第一个匹配的 <code>typeHandler</code>。因此，需要在实体字段上添加注解来指定所需的 <code>typeHandler</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ColumnType(typeHandler = StringListTypeHandler.class)</span><br></code></pre></td></tr></table></figure><h2 id="五、typeHandler支持范型"><a href="#五、typeHandler支持范型" class="headerlink" title="五、typeHandler支持范型"></a>五、typeHandler支持范型</h2><h3 id="1、-抽象父类，实现具体的类型转换逻辑"><a href="#1、-抽象父类，实现具体的类型转换逻辑" class="headerlink" title="1、 抽象父类，实现具体的类型转换逻辑"></a>1、 抽象父类，实现具体的类型转换逻辑</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JsonListTypeHandler</span>&lt;T&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">TypeReference</span>&lt;T&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">TypeHandler</span>&lt;List&lt;T&gt;&gt; &#123;&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JsonTypeHandler</span>&lt;T&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">TypeReference</span>&lt;T&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">TypeHandler</span>&lt;T&gt; &#123;&#125;<br></code></pre></td></tr></table></figure><p>反序列化类型转换：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// List集合</span><br>JSON.parseArray(json, (Class&lt;T&gt;) getRawType());<br><br><span class="hljs-comment">// 普通对象</span><br>JSON.parseObject(json, <span class="hljs-built_in">this</span>.getRawType());<br></code></pre></td></tr></table></figure><h3 id="2、子类继承父类并增加类型转换注解"><a href="#2、子类继承父类并增加类型转换注解" class="headerlink" title="2、子类继承父类并增加类型转换注解"></a>2、子类继承父类并增加类型转换注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@MappedJdbcTypes(JdbcType.VARCHAR)</span>  <span class="hljs-comment">// 处理 JDBC VARCHAR 类型字段</span><br><span class="hljs-meta">@MappedTypes(&#123;List.class&#125;)</span>          <span class="hljs-comment">// 映射到 Java 的 List 类型</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SubChildTypeHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JsonListTypeHandler</span>&lt;String&gt; &#123;&#125;<br><br><span class="hljs-meta">@MappedJdbcTypes(JdbcType.VARCHAR)</span><br><span class="hljs-meta">@MappedTypes(InstanceExtInfoVo.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SubChildTypeHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JsonTypeHandler</span>&lt;String&gt; &#123;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>MyBatis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MyBatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>虚拟机性能监控与故障处理基础工具</title>
    <link href="/java/jvm/base-tool.html"/>
    <url>/java/jvm/base-tool.html</url>
    
    <content type="html"><![CDATA[<h3 id="1、-jps：虚拟机进程状况工具"><a href="#1、-jps：虚拟机进程状况工具" class="headerlink" title="1、 jps：虚拟机进程状况工具"></a>1、<code> jps</code>：虚拟机进程状况工具</h3><p><code>JVM Process Status Tool</code>可以列出正在运行的虚拟机进程，并显示虚拟机执行主类(<code>Main Class</code>，<code>main()</code>函数所在的类)名称以及这些进程的本地虚拟机唯一ID(<code>LVMID, Local Virtual Machine Identifier</code>)。</p><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">jps [options]<br></code></pre></td></tr></table></figure><p><code>options</code>选项：</p><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td><code>-q</code></td><td>只输出<code>LVMID</code>，省略主类的名称</td></tr><tr><td><code>-m</code></td><td>输出虚拟机进程启动时传递给主类<code>main()</code>函数的参数</td></tr><tr><td><code>-l</code></td><td>输出主类的全名，如果进程执行的是<code>jar</code>包，则输出<code>JAR</code>路径</td></tr><tr><td><code>v</code></td><td>输出虚拟机经常启动时的<code>JVM</code>参数</td></tr></tbody></table><h3 id="2、jstat：虚拟机统计信息监视工具"><a href="#2、jstat：虚拟机统计信息监视工具" class="headerlink" title="2、jstat：虚拟机统计信息监视工具"></a>2、<code>jstat</code>：虚拟机统计信息监视工具</h3><p><code>JVM statistics Monitoring Tool</code>是用于监视虚拟机各种运行状态信息的命令行工具。可以显示虚拟机进程中的类加载、内存、垃圾收集、即时编译等运行时数据。</p><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">jstat -&lt;option&gt; [-h&lt;lines&gt;] &lt;vmid&gt; [&lt;interval&gt; [&lt;count&gt;]]<br></code></pre></td></tr></table></figure><ul><li><code>interval</code>：查询时间间隔，单位支持<code>ms</code>和<code>s</code>，默认为<code>ms</code></li><li><code>count</code>：查询次数</li><li><code>vmid</code>：<code>LVMID</code>，通过<code>jps</code>获取</li><li><code>lines</code></li></ul><p><code>option</code>选项：使用<code>jstat -options</code>获取完整选项列表</p><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td><code>-class</code></td><td>监视类加载、卸载数量、总空间及类装载所耗费的时间</td></tr><tr><td><code>-compiler</code></td><td>输出即时编译器编译过的方法、耗时等信息</td></tr><tr><td><code>-gc</code></td><td>监视<code>Java</code>堆情况，包括<code>Eden</code>区、2个<code>Survivor</code>区、老年代、元空间等的容量，已用空间，垃圾收集时间合计等信息</td></tr><tr><td><code>-gccapacity</code></td><td>内容与<code>-gc</code>基本相同，但输出主要关注<code>Java</code>堆各个区域使用到的最大、最小空间</td></tr><tr><td><code>-gccause</code></td><td>与<code>-gcutil</code>功能一样，但是会额外输出导致上一次垃圾收集产生的原因</td></tr><tr><td><code>-gcmetacapacity</code></td><td>输出元空间使用的最最小空间</td></tr><tr><td><code>-gcnew</code></td><td>监视新生代垃圾收集情况</td></tr><tr><td><code>-gcnewcapacity</code></td><td>监视内容与<code>-gcnew</code>基本相同，输出主要关注使用到的最大、最小空间</td></tr><tr><td><code>-gcold</code></td><td>监视老生代垃圾收集情况</td></tr><tr><td><code>-gcoldcapacity</code></td><td>监视内容与<code>-gcold</code>基本相同，输出主要关注使用到的最大、最小空间</td></tr><tr><td><code>-gcutil</code></td><td>内容与<code>-gc</code>基本相同，但输出主要关注已使用空间占总空间的百分比</td></tr><tr><td><code>printcompilation</code></td><td>输出已经被即时编译的方法</td></tr></tbody></table><h3 id="3、jinfo：Java配置信息工具"><a href="#3、jinfo：Java配置信息工具" class="headerlink" title="3、jinfo：Java配置信息工具"></a>3、<code>jinfo</code>：<code>Java</code>配置信息工具</h3><p><code>Configuration Info for Java</code>用于实时查看和调整虚拟机各项参数。</p><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">jinfo &lt;option&gt; &lt;pid&gt;<br></code></pre></td></tr></table></figure><p>选项<code>option</code>为可选参数，无值时输出<code>VM flags</code>和系统属性。</p><p><code>option</code>选项：</p><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td><code>-flag &lt;name&gt;</code></td><td>输出<code>VM flag</code>值</td></tr><tr><td><code>-flag [+|-]&lt;name&gt;</code></td><td>启用或禁用<code>VM flag</code></td></tr><tr><td><code>-flag &lt;name&gt;=&lt;value&gt;</code></td><td>设置<code>VM flag</code>为指定值</td></tr><tr><td><code>-flags</code></td><td>输出当前虚拟机支持的所有<code>flags</code>，可以查看显示指定的<code>flag</code>默认值</td></tr><tr><td><code>-sysprops</code></td><td>输出<code>Java</code>系统属性，即<code>System.getProperties()</code></td></tr></tbody></table><h3 id="4、jmap：Java内存映射工具"><a href="#4、jmap：Java内存映射工具" class="headerlink" title="4、jmap：Java内存映射工具"></a>4、<code>jmap</code>：<code>Java</code>内存映射工具</h3><p><code>Memory Map for Java</code>用于生成堆转储快照（一般称为<code>heapdump</code>或<code>dump</code>文件），还可以查询<code>finalize</code>执行队列、<code>Java</code>堆和方法区的详细信息，如空间利用率、当前使用的是哪种收集器等。</p><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">jmap -&lt;option&gt; &lt;pid&gt;<br></code></pre></td></tr></table></figure><p><code>option</code>选项：</p><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td><code>-clstats</code></td><td>输出<code>class loader</code>统计信息</td></tr><tr><td><code>-finalizerinfo</code></td><td>显示等待<code>Finalizer</code>执行<code>finalize</code>方法的对象</td></tr><tr><td><code>-histo</code></td><td>显示堆中对象统计信息，包括类、实例数量、合计容量</td></tr><tr><td><code>-dump</code></td><td>生成<code>Java</code>堆转储快照</td></tr><tr><td><code>-heap</code></td><td>显示<code>Java</code>堆详细信息，如使用哪种回收器、参数配置，分代情况等。从<code>JDK 9</code>开始选项废弃</td></tr></tbody></table><p><code>dump-options</code>选项：</p><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td><code>live</code></td><td>只转储<code>live</code>状态的对象</td></tr><tr><td><code>all</code></td><td>转储所有的对象</td></tr><tr><td><code>format=b</code></td><td>二进制格式</td></tr><tr><td><code>file=&lt;file&gt;</code></td><td>转储对象存储文件路径</td></tr></tbody></table><p><code>histo-options</code>选项：</p><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td><code>live</code></td><td>只统计<code>live</code>状态的对象</td></tr><tr><td><code>all</code></td><td>统计所有的对象</td></tr><tr><td><code>file=&lt;file&gt;</code></td><td>存储文件路径</td></tr></tbody></table><h3 id="6、jstack：Java堆栈跟踪工具"><a href="#6、jstack：Java堆栈跟踪工具" class="headerlink" title="6、jstack：Java堆栈跟踪工具"></a>6、<code>jstack</code>：<code>Java</code>堆栈跟踪工具</h3><p><code>Stack Trace for Java</code>用于生成虚拟机当前时刻的线程快照（一般称为<code>threaddump</code>或<code>javacore</code>文件）。线程快照是当前虚拟机内每一条线程正在执行的方法堆栈的集合，生成线程快照的目的通常是定位线程出现长时间停顿的原因，如线程间死锁、死循环、请求外部资源导致的长时间挂起等，都是导致线程长时间停顿的原因。</p><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">jstack &lt;option&gt; &lt;pid&gt;<br></code></pre></td></tr></table></figure><p><code>option</code>选项：</p><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td><code>-l</code></td><td>额外显示关于锁的附加信息</td></tr><tr><td><code>-e</code></td><td>额外显示关于线程的附加信息，例如内存分配</td></tr></tbody></table><h3 id="7、jcmd：虚拟机诊断命令工具"><a href="#7、jcmd：虚拟机诊断命令工具" class="headerlink" title="7、jcmd：虚拟机诊断命令工具"></a>7、<code>jcmd</code>：虚拟机诊断命令工具</h3><p><code>JVM Command</code>虚拟机诊断命令工具，集成 <code>jmap</code>、<code>jstack</code>、<code>jinfo</code> 等传统工具的核心功能，支持动态获取 JVM 状态、生成诊断文件、修改运行时参数等。</p><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">jcmd &lt;pid&gt; &lt;command&gt; &lt;argument&gt;<br></code></pre></td></tr></table></figure><p><code>command</code>诊断命令可以通过 <code>jcmd &lt;pid&gt; help</code>获取当前虚拟机支持的完整命令列表。</p><h4 id="7-1-内存与垃圾回收（GC）"><a href="#7-1-内存与垃圾回收（GC）" class="headerlink" title="7.1 内存与垃圾回收（GC）"></a>7.1 内存与垃圾回收（GC）</h4><p> <strong><code>GC.class_histogram</code></strong></p><ul><li><strong>功能</strong>：生成堆内存中类的实例数量和内存占用的直方图（按内存降序排序）。</li><li><strong>参数</strong>：<ul><li><code>-all</code>：包含所有对象（包括不可达对象）。</li><li>默认输出存活对象</li></ul></li><li><strong>示例</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">jcmd &lt;PID&gt; GC.class_histogram -all<br></code></pre></td></tr></table></figure></li></ul><p> <strong><code>GC.heap_dump</code></strong></p><ul><li><strong>功能</strong>：生成堆转储文件（HPROF 格式），用于分析内存泄漏。</li><li><strong>参数</strong>：<ul><li><code>&lt;filename&gt;</code>：输出文件路径（必填）。</li><li><code>-overwrite</code>：覆盖已有文件。</li></ul></li><li><strong>示例</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">jcmd &lt;PID&gt; GC.heap_dump /tmp/heap.hprof -overwrite<br></code></pre></td></tr></table></figure></li></ul><p> <strong><code>GC.heap_info</code></strong></p><ul><li><strong>功能</strong>：显示堆内存各分区（<code>Eden、Survivor、Old Gen、Metaspace</code>）的使用情况。</li><li><strong>示例</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">jcmd &lt;PID&gt; GC.heap_info<br></code></pre></td></tr></table></figure></li></ul><p> <strong><code>GC.run</code> &#x2F; <code>GC.run_finalization</code></strong></p><ul><li><strong>功能</strong>：显式触发 <code>Full GC</code> &#x2F; 强制执行 <code>finalize()</code> 方法。</li><li><strong>示例</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">jcmd &lt;PID&gt; GC.run  <span class="hljs-comment"># 强制 Full GC</span><br></code></pre></td></tr></table></figure></li></ul><p> <strong><code>GC.finalizer_info</code></strong></p><ul><li><strong>功能</strong>：显示等待执行 <code>finalize()</code> 方法的对象队列。</li><li><strong>示例</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">jcmd &lt;PID&gt; GC.finalizer_info<br></code></pre></td></tr></table></figure></li></ul><p> <strong><code>VM.metaspace</code></strong></p><ul><li><p><strong>功能</strong>：显示 <code>Metaspace</code>使用情况。</p></li><li><p><strong>参数</strong>：无。</p></li><li><p><strong>示例</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">jcmd &lt;PID&gt; VM.metaspace<br></code></pre></td></tr></table></figure></li></ul><h4 id="7-2、编译器与-JIT-优化"><a href="#7-2、编译器与-JIT-优化" class="headerlink" title="7.2、编译器与 JIT 优化"></a>7.2、编译器与 JIT 优化</h4><p><strong><code>Compiler.codecache</code></strong></p><ul><li><p><strong>功能</strong>：显示 JIT 编译代码缓存（<code>CodeCache</code>）的容量和使用情况。</p></li><li><p><strong>示例</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">jcmd &lt;PID&gt; Compiler.codecache<br></code></pre></td></tr></table></figure></li></ul><p><strong><code>Compiler.CodeHeap_Analytics</code></strong></p><ul><li><strong>功能</strong>：分析 JIT 编译器的代码堆（<code>CodeHeap</code>）内存使用情况。</li><li><strong>示例</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">jcmd &lt;PID&gt; Compiler.CodeHeap_Analytics <br></code></pre></td></tr></table></figure></li></ul><p> <strong><code>Compiler.codelist</code></strong></p><ul><li><strong>功能</strong>：列出所有 JIT 编译的代码块（方法）。</li><li><strong>示例</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">jcmd &lt;PID&gt; Compiler.codelist <br></code></pre></td></tr></table></figure></li></ul><p><strong><code>Compiler.queue</code></strong></p><ul><li><strong>功能</strong>：显示 JIT 编译队列中的待编译方法。</li><li><strong>示例</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">jcmd &lt;PID&gt; Compiler.queue<br></code></pre></td></tr></table></figure></li></ul><h4 id="7-3、Java-Flight-Recorder-JFR"><a href="#7-3、Java-Flight-Recorder-JFR" class="headerlink" title="7.3、Java Flight Recorder (JFR)"></a>7.3、Java Flight Recorder (JFR)</h4><p> <strong><code>JFR.start</code></strong></p><ul><li><strong>功能</strong>：启动 JFR 性能记录。</li><li><strong>参数</strong>：<ul><li><code>name=</code>：记录名称（必填）。</li><li><code>settings=</code>：配置文件（如 <code>profile</code>、<code>default</code>）。</li><li><code>delay=</code>：延迟启动时间（如 <code>60s</code>）。</li><li><code>duration=</code>：记录时长（如 <code>5m</code>）。</li><li><code>filename=</code>：直接保存记录文件。</li></ul></li><li><strong>示例</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">jcmd &lt;PID&gt; JFR.start name=myrec settings=profile duration=30m<br><br>jcmd 140112 JFR.start name=hello settings=profile delay=3s duration=10s filename=hello.txt<br></code></pre></td></tr></table></figure></li></ul><p> <strong><code>JFR.stop</code></strong></p><ul><li><strong>功能</strong>：停止 JFR 记录。</li><li><strong>参数</strong>：<ul><li><code>name=</code>：记录名称（必填）。</li><li><code>filename=</code>：导出记录文件路径。</li></ul></li><li><strong>示例</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">jcmd &lt;PID&gt; JFR.stop name=myrec filename=rec.jfr<br></code></pre></td></tr></table></figure></li></ul><p> <strong><code>JFR.dump</code></strong></p><ul><li><strong>功能</strong>：导出 JFR 记录文件。</li><li><strong>参数</strong>：<ul><li><code>name=</code>：记录名称（必填）。</li><li><code>filename=</code>：导出文件路径（必填）。</li></ul></li><li><strong>示例</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">jcmd &lt;PID&gt; JFR.dump name=myrec filename=rec.jfr<br></code></pre></td></tr></table></figure></li></ul><p><strong><code>JFR.check</code></strong></p><ul><li><p><strong>功能</strong>：检查 JFR 记录状态。</p></li><li><p><strong>示例</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">jcmd &lt;PID&gt; JFR.check<br></code></pre></td></tr></table></figure></li></ul><p> <strong><code>JFR.configure</code></strong></p><ul><li><p><strong>功能</strong>：配置 <code>JFR</code> 参数（如阈值、事件类型）。</p></li><li><p><strong>参数</strong>：</p><ul><li><code>repositorypath=</code>：事件存储路径。</li></ul></li><li><p><strong>示例</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">jcmd &lt;PID&gt; JFR.configure repositorypath=/tmp/jfr<br></code></pre></td></tr></table></figure></li></ul><p><strong><code>JFR.view</code></strong></p><ul><li><p><strong>功能</strong>：实时查看正在进行的 JFR 记录数据（需配合 <code>JFR.start</code>）。</p></li><li><p>参数：</p><ul><li><code>maxage</code>：事件事件窗，单位支持<code>s</code>、<code>m</code>、<code>h</code>，默认为<code>10m</code></li><li><code>maxsize</code>：事件允许的最大字节数，单位支持<code>m</code>、<code>M</code>、<code>g</code>、<code>G</code>，默认为<code>32MB</code></li></ul></li><li><p><strong>示例</strong>：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">jcmd </span>&lt;PID&gt; <span class="hljs-keyword">JFR.view </span>event事件<br></code></pre></td></tr></table></figure></li></ul><p>可以使用<code>jcmd &lt;PID&gt; JFR.view</code>查看内置<code>event</code>事件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs shell">Java virtual machine views:<br> class-modifications       gc-concurrent-phases longest-compilations   <br> compiler-configuration    gc-configuration     native-memory-committed<br> compiler-phases           gc-cpu-time          native-memory-reserved <br> compiler-statistics       gc-pause-phases      safepoints             <br> deoptimizations-by-reason gc-pauses            tlabs                  <br> deoptimizations-by-site   gc-references        vm-operations          <br> gc                        heap-configuration  <br><br>Environment views:<br> active-recordings        cpu-information       jvm-flags          <br> active-settings          cpu-load              native-libraries   <br> container-configuration  cpu-load-samples      network-utilization<br> container-cpu-throttling cpu-tsc               recording          <br> container-cpu-usage      environment-variables system-information <br> container-io-usage       events-by-count       system-processes   <br> container-memory-usage   events-by-name        system-properties  <br><br>Application views:<br> allocation-by-class   exception-count       native-methods       <br> allocation-by-site    file-reads-by-path    object-statistics    <br> allocation-by-thread  file-writes-by-path   pinned-threads       <br> class-loaders         finalizers            socket-reads-by-host <br> contention-by-address hot-methods           socket-writes-by-host<br> contention-by-class   latencies-by-type     thread-allocation    <br> contention-by-site    longest-class-loading thread-count         <br> contention-by-thread  memory-leaks-by-class thread-cpu-load      <br> exception-by-message  memory-leaks-by-site  thread-start         <br> exception-by-site     modules          <br></code></pre></td></tr></table></figure><h4 id="7-4、线程管理"><a href="#7-4、线程管理" class="headerlink" title="7.4、线程管理"></a>7.4、线程管理</h4><p> <strong><code>Thread.print</code></strong></p><ul><li><strong>功能</strong>：生成线程转储（含锁信息），替代 <code>jstack</code>。</li><li><strong>参数</strong>：<ul><li><code>-l</code>：显示锁信息（默认包含）。</li><li><code>-e</code>：显示线程额外信息，分配内存之类</li></ul></li><li><strong>示例</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">jcmd &lt;PID&gt; Thread.<span class="hljs-built_in">print</span> -l &gt; thread_dump.txt<br></code></pre></td></tr></table></figure></li></ul><p> <strong><code>Thread.dump_to_file</code></strong></p><ul><li><strong>功能</strong>：将线程转储直接写入文件。</li><li><strong>参数</strong>：<ul><li><code>&lt;filename&gt;</code>：输出文件路径（必填）。</li><li><code>-overwrite</code>：覆盖已有文件。</li></ul></li><li><strong>示例</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">jcmd &lt;PID&gt; Thread.dump_to_file -overwrite /tmp/thread_dump.txt<br></code></pre></td></tr></table></figure></li></ul><h4 id="7-5、本地内存与-Native-分析"><a href="#7-5、本地内存与-Native-分析" class="headerlink" title="7.5、本地内存与 Native 分析"></a>7.5、本地内存与 Native 分析</h4><p> <strong><code>System.native_heap_info</code></strong></p><ul><li><strong>功能</strong>：显示 <code>Native</code> 堆内存分配情况。</li><li><strong>示例</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">jcmd &lt;PID&gt; System.native_heap_info<br></code></pre></td></tr></table></figure></li></ul><p><strong><code>VM.native_memory</code></strong></p><ul><li><p><strong>功能</strong>：显示 Native 内存分配详情（需启用 <code>-XX:NativeMemoryTracking=summary/detail</code>）。</p></li><li><p><strong>参数</strong>：</p><ul><li><code>summary</code>：摘要模式。</li><li><code>detail</code>：详细模式。</li></ul></li><li><p><strong>示例</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">jcmd &lt;PID&gt; VM.native_memory detail<br></code></pre></td></tr></table></figure></li></ul><h4 id="7-6、JVM-诊断与参数管理"><a href="#7-6、JVM-诊断与参数管理" class="headerlink" title="7.6、JVM 诊断与参数管理"></a>7.6、JVM 诊断与参数管理</h4><p> <strong><code>VM.flags</code></strong></p><ul><li><strong>功能</strong>：查看所有 JVM 启动参数（含默认值）。</li><li><strong>参数</strong>：<ul><li><code>-all</code>：显示所有参数（包括默认值）。</li></ul></li><li><strong>示例</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">jcmd &lt;PID&gt; VM.flags -all<br></code></pre></td></tr></table></figure></li></ul><p> <strong><code>VM.set_flag</code></strong></p><ul><li><strong>功能</strong>：动态修改可写的 JVM 参数（需参数标记为 <code>manageable</code>）。</li><li><strong>参数</strong>：<ul><li><code>&lt;flag&gt;</code>：参数名（如 <code>PrintGCDetails</code>）。</li><li><code>&lt;value&gt;</code>：参数值（如 <code>true</code>）。</li></ul></li><li><strong>示例</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">jcmd &lt;PID&gt; VM.set_flag PrintGCDetails <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></li></ul><p><strong><code>VM.log</code></strong></p><ul><li><p><strong>功能</strong>：管理 JVM 日志输出。</p></li><li><p><strong>参数</strong>：</p><ul><li><code>output=</code>：日志文件路径。</li><li><code>what=</code>：配置日志输出<code>tag</code></li><li><code>decorators</code>：日志输出内容装饰<code>decorators</code></li><li><code>list</code>：列出当前日志配置信息</li><li><code>rotate</code>：滚动所有日志文件</li></ul></li><li><p><strong>示例</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">jcmd &lt;PID&gt; VM.<span class="hljs-built_in">log</span> output=gc.log what=gc* decorators=<span class="hljs-keyword">time</span>,hostname<br></code></pre></td></tr></table></figure></li></ul><p><strong><code>VM.command_line</code></strong></p><ul><li><p><strong>功能</strong>：显示 JVM 启动时的完整命令行参数。  </p></li><li><p><strong>示例</strong>：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">jcmd &lt;PID&gt; VM.command_line<br></code></pre></td></tr></table></figure></li></ul><p><strong><code>VM.dynlibs</code></strong></p><ul><li><p><strong>功能</strong>：列出所有动态加载的本地库（<code>.so</code> 或 <code>.dll</code> 文件）。  </p></li><li><p><strong>示例</strong>：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">jcmd &lt;PID&gt; VM.dynlibs<br></code></pre></td></tr></table></figure></li></ul><p><strong><code>VM.events</code></strong></p><ul><li><p><strong>功能</strong>：显示 <code>JVM</code> 事件日志（如 GC、编译事件）。  </p></li><li><p><strong>示例</strong>：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">jcmd &lt;PID&gt; VM.events<br></code></pre></td></tr></table></figure></li></ul><p><strong><code>VM.stringtable</code></strong></p><ul><li><p><strong>功能</strong>：显示字符串常量池（String Table）的内容。  </p></li><li><p><code>-verbose</code>：显示详细信息（如哈希值、引用计数）。  </p></li><li><p><strong>示例</strong>：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">jcmd &lt;PID&gt; VM.stringtable -verbose<br></code></pre></td></tr></table></figure></li></ul><p><strong><code>VM.symboltable</code></strong></p><ul><li><p><strong>功能</strong>：显示符号表（Symbol Table）的内容（类名、方法名等符号）。  </p></li><li><p><strong>示例</strong>：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">jcmd &lt;PID&gt; VM.symboltable<br></code></pre></td></tr></table></figure></li></ul><p><strong><code>VM.systemdictionary</code></strong></p><ul><li><p><strong>功能</strong>：显示系统字典中的类信息（类加载器与类的映射关系）。  </p></li><li><p><strong>示例</strong>：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">jcmd &lt;PID&gt; VM.systemdictionary<br></code></pre></td></tr></table></figure></li></ul><h4 id="7-7、类与类加载器"><a href="#7-7、类与类加载器" class="headerlink" title="7.7、类与类加载器"></a>7.7、类与类加载器</h4><h4 id="VM-classloaders"><a href="#VM-classloaders" class="headerlink" title="VM.classloaders"></a><strong><code>VM.classloaders</code></strong></h4><ul><li><p><strong>功能</strong>：显示所有类加载器及其层级关系。</p></li><li><p><strong>示例</strong>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">jcmd <span class="hljs-tag">&lt;<span class="hljs-name">PID</span>&gt;</span> VM.classloaders<br></code></pre></td></tr></table></figure></li></ul><p> <strong><code>VM.class_hierarchy</code></strong></p><ul><li><strong>功能</strong>：显示类的继承层次。</li><li><strong>参数</strong>：<ul><li><code>&lt;className&gt;</code>：目标类名（支持通配符 <code>*</code>）。</li><li><code>-i</code>：忽略大小写。</li><li><code>-s</code>：显示子类。</li></ul></li><li><strong>示例</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">jcmd &lt;PID&gt; VM.class_hierarchy java.lang.String -i<br></code></pre></td></tr></table></figure></li></ul><p> <strong><code>VM.classes</code></strong></p><ul><li><strong>功能</strong>：列出所有已加载的类。</li><li><strong>示例</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">jcmd &lt;PID&gt; VM.classes<br></code></pre></td></tr></table></figure></li></ul><p> <strong><code>VM.classloader_stats</code></strong></p><ul><li><strong>功能</strong>：统计类加载器的活动。</li><li><strong>示例</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">jcmd &lt;PID&gt; VM.classloader_stats<br></code></pre></td></tr></table></figure></li></ul><h4 id="7-8、系统信息与工具"><a href="#7-8、系统信息与工具" class="headerlink" title="7.8、系统信息与工具"></a>7.8、系统信息与工具</h4><p> <strong><code>VM.uptime</code></strong></p><ul><li><strong>功能</strong>：显示 JVM 运行时间（毫秒）。</li><li><strong>示例</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">jcmd &lt;PID&gt; VM.<span class="hljs-built_in">uptime</span><br></code></pre></td></tr></table></figure></li></ul><p> <strong><code>VM.version</code></strong></p><ul><li><strong>功能</strong>：显示 JVM 版本信息。</li><li><strong>示例</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">jcmd &lt;PID&gt; VM.version<br></code></pre></td></tr></table></figure></li></ul><p> <strong><code>VM.system_properties</code></strong></p><ul><li><strong>功能</strong>：输出所有系统属性（<code>System.getProperties()</code>）。</li><li><strong>示例</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">jcmd &lt;PID&gt; VM.system_properties<br></code></pre></td></tr></table></figure></li></ul><p><strong><code>VM.info</code></strong></p><ul><li><p><strong>功能</strong>：显示 JVM 基本信息（版本、运行模式、PID 等）。  </p></li><li><p><strong>示例</strong>：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">jcmd &lt;PID&gt; VM.info<br></code></pre></td></tr></table></figure></li></ul><h3 id="8、jhsdb：虚拟机诊断Debugger"><a href="#8、jhsdb：虚拟机诊断Debugger" class="headerlink" title="8、jhsdb：虚拟机诊断Debugger"></a>8、<code>jhsdb</code>：虚拟机诊断Debugger</h3><p><code>Java HotSpot Debugger</code>是 JDK 提供的诊断工具，支持 <strong>实时进程调试</strong> 和 <strong>核心转储分析</strong>。它整合了 <code>jstack</code>、<code>jmap</code>、<code>jinfo</code> 等传统命令的功能，并扩展了底层调试能力，适用于内存泄漏、死锁、JVM 崩溃等复杂问题分析</p><p>​<strong><code>JCMD</code>、<code>JHSDB</code>和基础工具的对比</strong></p><table><thead><tr><th>基础工具</th><th>JCMD 命令</th><th>JHSDB 命令</th></tr></thead><tbody><tr><td><code>jps -lm</code></td><td><code>jcmd</code></td><td><code>N/A    </code></td></tr><tr><td><code>jmap -dump &lt;pid&gt;</code></td><td><code>jcmd &lt;pid&gt; GC.heap_dump</code></td><td><code>jhsdb jmap --binaryheap --pid &lt;pid&gt;</code></td></tr><tr><td><code>jmap -histo &lt;pid&gt;</code></td><td><code>jcmd &lt;pid&gt; GC.class_histogram</code></td><td><code>jhsdb jmap --histo --pid &lt;pid&gt;</code></td></tr><tr><td><code>jstack &lt;pid&gt;</code></td><td><code>jcmd &lt;pid&gt; Thread.print</code></td><td><code>jhsdb jstack --locks --pid &lt;pid&gt;</code></td></tr><tr><td><code>jinfo -sysprops &lt;pid&gt;</code></td><td><code>jcmd &lt;pid&gt; VM.system_properties</code></td><td><code>jhsdb jinfo --sysprops --pid &lt;pid&gt;</code></td></tr><tr><td><code>jinfo -flags &lt;pid&gt;</code></td><td><code>jcmd &lt;pid&gt; VM.flags</code></td><td><code>jhsdb jinfo --flags --pid &lt;pid&gt;</code></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Date与LocalDateTime互相转换</title>
    <link href="/java/date_localdatetime.html"/>
    <url>/java/date_localdatetime.html</url>
    
    <content type="html"><![CDATA[<h3 id=""><a href="#" class="headerlink" title=""></a></h3><p><code>Date</code>和<code>LocalDateTime</code>之间的互相转换需要借助<code>Instant</code>，<code>Instant</code>是时间线上的一个瞬时点，不包含时区信息</p><h3 id="一、Date转LocalDateTime"><a href="#一、Date转LocalDateTime" class="headerlink" title="一、Date转LocalDateTime"></a>一、Date转LocalDateTime</h3><p>转换顺序：</p><ul><li><code>Date</code>转为<code>Instant</code></li><li><code>Instant</code>转为<code>LocalDateTime</code>或者<code>LocalDate</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();                                                                <br><br><span class="hljs-comment">// 先转为Instant                                                                          </span><br><span class="hljs-type">Instant</span> <span class="hljs-variable">instant</span> <span class="hljs-operator">=</span> date.toInstant();                                                    <br>                                                                                       <br><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">localDateTime</span> <span class="hljs-operator">=</span> instant.atZone(ZoneId.systemDefault()).toLocalDateTime();<br>                                                                                       <br><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">localDateTime</span> <span class="hljs-operator">=</span> instant.atZone(ZoneId.ofOffset(<span class="hljs-string">&quot;UTC&quot;</span>, ZoneOffset.ofHours<br>                                                                                       <br><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">localDateTime</span> <span class="hljs-operator">=</span> instant.atZone(ZoneId.ofOffset(<span class="hljs-string">&quot;UTC&quot;</span>, ZoneOffset.ofHours<br>                                                                                       <br><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">localDateTime</span> <span class="hljs-operator">=</span> instant.atZone(ZoneOffset.of(<span class="hljs-string">&quot;+8&quot;</span>)).toLocalDateTime();  <br>                                                                                       <br><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">localDateTime</span> <span class="hljs-operator">=</span> instant.atZone(ZoneOffset.of(<span class="hljs-string">&quot;-8&quot;</span>)).toLocalDateTime();  <br></code></pre></td></tr></table></figure><h3 id="二、LocalDateTime转Date"><a href="#二、LocalDateTime转Date" class="headerlink" title="二、LocalDateTime转Date"></a>二、LocalDateTime转Date</h3><p>转换顺序：</p><ul><li><code>LocleDateTie</code>转为<code>Instant</code></li><li><code>Instant</code>转为<code>Date</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> LocalDateTime.now();     <br><br><span class="hljs-comment">// 此处的转换方式和Date转LocalDateTime相同</span><br><span class="hljs-type">Instant</span> <span class="hljs-variable">instant</span> <span class="hljs-operator">=</span> now.toInstant(ZoneOffset.of(<span class="hljs-string">&quot;+7&quot;</span>));          <br><br><span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> Date.from(instant)<br></code></pre></td></tr></table></figure><p><code>Instant</code>转换的时候指定目标时区信息方式：</p><ul><li><code>ZoneId.ofOffset(&quot;UTC&quot;, ZoneOffset.ofHours(5))</code> 基于<code>UTC</code>进行小时偏移</li><li><code>ZoneId.ofOffset(&quot;UTC&quot;, ZoneOffset.ofHoursMinutes(6, 5))</code>基于<code>UTC</code>进行小时和分钟偏移</li><li><code>ZoneId.systemDefault()</code>基于当前所在系统进行偏移</li><li><code>ZoneOffset.of(&quot;+8&quot;)</code>直接指定偏移，支持<code>+</code>和<code>-</code>时间前后偏移</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Grafana安装与基础配置</title>
    <link href="/java/grafana.html"/>
    <url>/java/grafana.html</url>
    
    <content type="html"><![CDATA[<h3 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h3><p>下载<code>Grafana</code> <a href="https://grafana.com/grafana/download">https://grafana.com/grafana/download</a>，一般下载压缩包即可，直接解压可用</p><p>默认配置：</p><ul><li>端口：3000，访问地址 <code>http://localhost:3000</code></li><li>用户名、密码：<code>admin/admin</code></li></ul><h3 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h3><h4 id="1、自定义配置信息"><a href="#1、自定义配置信息" class="headerlink" title="1、自定义配置信息"></a>1、自定义配置信息</h4><p>默认配置文件：<code>$WORKING_DIR/conf/defaults.ini</code>，其中 <code>WORKING_DIR</code>指<code>Grafana</code>所在目录，<strong>不要修改<code>defaults.ini</code>文件</strong>，如果需要自定义配置，在 &#96;&#96;$WORKING_DIR&#x2F;conf&#x2F;<code>目录下新增文件 </code>custom.ini<code>(此种方式适用于使用压缩包形式安装</code>Grafana&#96;，如果使用其他方式安装，需要参考：<a href="https://grafana.com/docs/grafana/latest/setup-grafana/configure-grafana/">https://grafana.com/docs/grafana/latest/setup-grafana/configure-grafana/</a>)</p><p>配置文件支持读取环境变量和外部文件，使用方式如下：</p><ul><li>环境变量读取：格式： <code>$__env&#123;KEY&#125;</code> 或 <code>$&#123;KEY&#125;</code></li><li>外部文件读取：格式：<code>$__file&#123;FILE_PATH&#125;</code></li></ul><table><thead><tr><th>配置</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>instance_name</code></td><td><code>grafana-server</code>实例名称</td><td><code>$&#123;HOSTNAME&#125;</code></td></tr><tr><td><code>[paths].logs</code></td><td><code>Grafana</code>日志存储路径，可以通过启动参数 <code>cfg:default.paths.logs=xxx</code>修改日志路径</td><td><code>$&#123;WORKING_DIR&#125;/data/log</code></td></tr><tr><td><code>[server].protocol</code></td><td>协议，<code>http、https、socket</code></td><td><code>http</code></td></tr><tr><td><code>[server].http_port</code></td><td><code>grafana-server</code>访问端口</td><td><code>3000</code></td></tr><tr><td><code>[server].cert_file</code></td><td><code>certificate file</code>路径（协议为<code>https</code>时）</td><td></td></tr><tr><td><code>[server].cert_key</code></td><td><code>certificate key</code>路径（协议为<code>https</code>时）</td><td></td></tr><tr><td><code>[database].type</code></td><td>数据库类型(<code>mysql</code>,<code>postgres</code>,<code>sqlite3</code>)，<code>grafana</code>需要数据库存储用户和<code>dashboards</code>等信息</td><td><code>sqlite3</code></td></tr><tr><td><code>[database].host</code></td><td>数据库连接<code>host</code>，包含端口，<code>host = 127.0.0.1:3306</code></td><td></td></tr><tr><td><code>[database].name</code></td><td>数据库名</td><td></td></tr><tr><td><code>[database].user</code></td><td>数据库连接用户名</td><td></td></tr><tr><td><code>[database].password</code></td><td>数据库连接密码，如果密码包含<code>#</code>或<code>;</code>，需要使用三引号包括，例如<code>&quot;&quot;&quot;#password;&quot;&quot;&quot;</code></td><td></td></tr><tr><td><code>[database].max_idel_conn</code></td><td>最大空闲连接数</td><td></td></tr><tr><td><code>[database].max_open_conn</code></td><td>允许创建的最大连接数</td><td></td></tr><tr><td><code>[database].conn_max_lifetime</code></td><td>连接最大存活时间</td><td><code>14400s</code></td></tr><tr><td><code>[database].log_queries</code></td><td>打印<code>SQL</code>调用和执行时间</td><td></td></tr><tr><td><code>[security].disable_initial_admin_creation</code></td><td>禁止在第一次启动时创建管理员用户</td><td><code>false</code></td></tr><tr><td><code>[security].admin_user</code></td><td>默认的管理员账号，管理员拥有全部权限</td><td><code>admin</code></td></tr><tr><td><code>[security].admin_password</code></td><td>默认的管理员密码</td><td><code>admin</code></td></tr><tr><td><code>[log].mode</code></td><td>日志输出位置，<code>console</code> <code>file</code> <code>syslog</code>,支持多个模式的时候用空格分割</td><td><code>console file</code></td></tr><tr><td><code>[log].level</code></td><td>日志级别，<code>debug</code> <code>info</code> <code>warn</code> <code>error</code> <code>critical</code></td><td><code>info</code></td></tr><tr><td><code>[log.file].level</code></td><td>指定文件日志级别</td><td>继承自<code>[log].level</code></td></tr><tr><td><code>[log.file].format</code></td><td>日志输出格式，<code>text</code> <code>console</code> <code>json</code></td><td><code>text</code></td></tr><tr><td><code>[log.file].log_rotate</code></td><td>日志滚动</td><td><code>true</code></td></tr><tr><td><code>[log.file].max_lines</code></td><td>每个文件允许的最大行</td><td><code>1_000_000</code></td></tr><tr><td><code>[log.file].max_size_shift</code></td><td>文件大小</td><td><code>28</code> <code>1 &lt;&lt; 28 = 256MB</code></td></tr><tr><td><code>[log.file].daily_rotate</code></td><td>允许按日滚动，<code>false</code> <code>true</code></td><td><code>true</code></td></tr><tr><td><code>[log.file].max_days</code></td><td>日志文件最大保留天数</td><td><code>7</code></td></tr></tbody></table><p> 完整配置参考：<a href="https://grafana.com/docs/grafana/latest/setup-grafana/configure-grafana/">https://grafana.com/docs/grafana/latest/setup-grafana/configure-grafana/</a></p><p>详细使用手册参考：<a href="https://grafana.com/docs/grafana/latest/">https://grafana.com/docs/grafana/latest/</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Logback使用配置</title>
    <link href="/java/logback.html"/>
    <url>/java/logback.html</url>
    
    <content type="html"><![CDATA[<h3 id="一、Appender定义"><a href="#一、Appender定义" class="headerlink" title="一、Appender定义"></a>一、Appender定义</h3><h4 id="1、ConsoleAppender"><a href="#1、ConsoleAppender" class="headerlink" title="1、ConsoleAppender"></a>1、ConsoleAppender</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;STDOUT&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">layout</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.PatternLayout&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss&#125; [%level] [%thread] %logger&#123;36&#125; =&gt; %message %n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">layout</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2、RollingFileAppender"><a href="#2、RollingFileAppender" class="headerlink" title="2、RollingFileAppender"></a>2、RollingFileAppender</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;fileLog&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 支持多个JVM同时写一个文件(容器部署，挂载共享磁盘) 不支持FixedWindowRollingPolicy --&gt;</span><br>    <span class="hljs-comment">&lt;!--        &lt;prudent&gt;true&lt;/prudent&gt;--&gt;</span><br>    <span class="hljs-comment">&lt;!--活动文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>文件保存路径<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss&#125; [%level] [%thread] %logger&#123;36&#125; =&gt; %message %n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3、AsyncAppender"><a href="#3、AsyncAppender" class="headerlink" title="3、AsyncAppender"></a>3、AsyncAppender</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;AsyncLogFile&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.AsyncAppender&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;fileLog&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="二、文件滚动策略"><a href="#二、文件滚动策略" class="headerlink" title="二、文件滚动策略"></a>二、文件滚动策略</h3><h4 id="1、SizeAndTimeBasedRollingPolicy"><a href="#1、SizeAndTimeBasedRollingPolicy" class="headerlink" title="1、SizeAndTimeBasedRollingPolicy"></a>1、SizeAndTimeBasedRollingPolicy</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- %i: 归档文件索引序号 .gz: logback 根据pattern后缀启用压缩--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>$&#123;TSF_LOG_DIR&#125;/%d&#123;yyyy-MM-dd,aux&#125;/stdout-%d&#123;yyyy-MM-dd HH&#125;.%i.log.gz<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 单个文件允许的最大值 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>100MB<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 归档文件保留的最大数量 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>$&#123;MAX_RESERVE&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 限制所有存档日志文件总大小，超过默认删除最早的日志文件，重新生成新的日志文件，即 %i 的序号会持续增加 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 与 maxHistory 结合使用，maxHistory 优先级高于 totalSizeCap --&gt;</span><br>    <span class="hljs-comment">&lt;!-- logback 1.2 版本 totalSizeCap 删除索引超过1000的文件有bug --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">totalSizeCap</span>&gt;</span>512MB<span class="hljs-tag">&lt;/<span class="hljs-name">totalSizeCap</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">cleanHistoryOnStart</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">cleanHistoryOnStart</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2、FixedWindowRollingPolicy"><a href="#2、FixedWindowRollingPolicy" class="headerlink" title="2、FixedWindowRollingPolicy"></a>2、FixedWindowRollingPolicy</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.FixedWindowRollingPolicy&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- %i: 归档文件索引序号 .gz: logback 根据pattern后缀启用压缩--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>stdout.%i.log<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">minIndex</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">minIndex</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maxIndex</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">maxIndex</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="三、日志级别和输出位置设置"><a href="#三、日志级别和输出位置设置" class="headerlink" title="三、日志级别和输出位置设置"></a>三、日志级别和输出位置设置</h3><h4 id="1、全局默认"><a href="#1、全局默认" class="headerlink" title="1、全局默认"></a>1、全局默认</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;AsyncLogFile&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;STDOUT&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2、指定类路径"><a href="#2、指定类路径" class="headerlink" title="2、指定类路径"></a>2、指定类路径</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 对特定类路径自定义日志级别以及日志输出位置 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cn.probiecoder&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span> <span class="hljs-attr">additivity</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">includeLocation</span>=<span class="hljs-string">&quot;true&quot;</span> &gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;AsyncLogFile&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;STDOUT&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="四、在logback-xml中使用if条件"><a href="#四、在logback-xml中使用if条件" class="headerlink" title="四、在logback.xml中使用if条件"></a>四、在logback.xml中使用if条件</h3><p>语法如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-comment">&lt;!-- if-then form --&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">condition</span>=<span class="hljs-string">&quot;some conditional expression&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">then</span>&gt;</span><br>    ...<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">then</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- if-then-else form --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">condition</span>=<span class="hljs-string">&quot;some conditional expression&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">then</span>&gt;</span><br>    ...<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">then</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">else</span>&gt;</span><br>    ...<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">else</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br></code></pre></td></tr></table></figure><p>表达式：</p><ul><li><code>property()</code>或<code>p()</code>：返回<code>property</code>的字符串值，如果<code>property</code>为定义，会返回空字符串(<code>&quot;&quot;</code>)</li><li><code>isDefined</code>：判断<code>property</code>是否定义</li><li><code>isNull</code>：判断<code>property</code>是否为<code>null</code></li></ul><p>在使用<code>condition</code>前需要先引入如下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.codehaus.janino<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>janino<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">condition</span>=<span class="hljs-string">&#x27;isDefined(&quot;TSF_ENABLED&quot;)&#x27;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">then</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">condition</span>=<span class="hljs-string">&quot;$&#123;TSF_ENABLED&#125; == false&#125;&quot;</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">then</span>&gt;</span><br>                 <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;CONSOLE_PATTERN&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss&#125; [%level [%thread] %logger&#123;36&#125; =&gt; %message %n&quot;</span>/&gt;</span><br>                 <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;FILE_PATTERN&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss&#125; [%level] [%thread] %logger&#123;36&#125; =&gt; %message %n&quot;</span>/&gt;</span><br>             <span class="hljs-tag">&lt;/<span class="hljs-name">then</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">else</span>&gt;</span><br>                 <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;CONSOLE_PATTERN&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss&#125; [%level] %trace [%thread] %logger&#123;36&#125; =&gt; %message %n&quot;</span>/&gt;</span><br>                 <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;FILE_PATTERN&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss&#125; [%level] %trace [%thread] %logger&#123;36&#125; =&gt; %message %n&quot;</span>/&gt;</span><br>             <span class="hljs-tag">&lt;/<span class="hljs-name">else</span>&gt;</span><br>         <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">then</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">else</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;CONSOLE_PATTERN&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss&#125; [%level] %trace [%thread] %logger&#123;36&#125; =&gt; %message %n&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;FILE_PATTERN&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss&#125; [%level] %trace [%thread] %logger&#123;36&#125; =&gt; %message %n&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">else</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br></code></pre></td></tr></table></figure><p>通过<code>-D</code>指定<code>property</code>值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">java -DFLAG=xxx -jar jar<br></code></pre></td></tr></table></figure><h3 id="五、配置示例"><a href="#五、配置示例" class="headerlink" title="五、配置示例"></a>五、配置示例</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- pattern不能缩略和完整混搭 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">condition</span>=<span class="hljs-string">&#x27;isDefined(&quot;ENABLED&quot;)&#x27;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">then</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">condition</span>=<span class="hljs-string">&quot;$&#123;ENABLED&#125; == false&#125;&quot;</span>&gt;</span><br>                 <span class="hljs-tag">&lt;<span class="hljs-name">then</span>&gt;</span><br>                     <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;CONSOLE_PATTERN&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss&#125; [%level [%thread] %logger&#123;36&#125; =&gt; %message %n&quot;</span>/&gt;</span><br>                     <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;FILE_PATTERN&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss&#125; [%level] [%thread] %logger&#123;36&#125; =&gt; %message %n&quot;</span>/&gt;</span><br>                 <span class="hljs-tag">&lt;/<span class="hljs-name">then</span>&gt;</span><br>                 <span class="hljs-tag">&lt;<span class="hljs-name">else</span>&gt;</span><br>                     <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;CONSOLE_PATTERN&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss&#125; [%level] %trace [%thread] %logger&#123;36&#125; =&gt; %message %n&quot;</span>/&gt;</span><br>                     <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;FILE_PATTERN&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss&#125; [%level] %trace [%thread] %logger&#123;36&#125; =&gt; %message %n&quot;</span>/&gt;</span><br>                 <span class="hljs-tag">&lt;/<span class="hljs-name">else</span>&gt;</span><br>             <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">then</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">else</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;CONSOLE_PATTERN&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss&#125; [%level] %trace [%thread] %logger&#123;36&#125; =&gt; %message %n&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;FILE_PATTERN&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss&#125; [%level] %trace [%thread] %logger&#123;36&#125; =&gt; %message %n&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">else</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;CHARSET&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;MAX_RESERVE&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span>/&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 定义所有的appender --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;STDOUT&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">layout</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.PatternLayout&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>$&#123;CONSOLE_PATTERN&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">layout</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;fileLog&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 支持多个JVM同时写一个文件(容器部署，挂载共享磁盘) 不支持FixedWindowRollingPolicy --&gt;</span><br>        <span class="hljs-comment">&lt;!--        &lt;prudent&gt;true&lt;/prudent&gt;--&gt;</span><br>        <span class="hljs-comment">&lt;!--活动文件--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>$&#123;LOG_FILE&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>$&#123;FILE_PATTERN&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>$&#123;CHARSET&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- %i: 归档文件索引序号 .gz: logback 根据pattern后缀启用压缩--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>$&#123;LOG_DIR&#125;/%d&#123;yyyy-MM-dd,aux&#125;/stdout-%d&#123;yyyy-MM-dd HH&#125;.%i.log.gz<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 单个文件允许的最大值 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>100MB<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 归档文件保留的最大数量 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>$&#123;MAX_RESERVE&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 限制所有存档日志文件总大小，超过默认删除最早的日志文件，重新生成新的日志文件，即 %i 的序号会持续增加 --&gt;</span><br>            <span class="hljs-comment">&lt;!-- 与 maxHistory 结合使用，maxHistory 优先级高于 totalSizeCap --&gt;</span><br>            <span class="hljs-comment">&lt;!-- logback 1.2 版本 totalSizeCap 删除索引超过1000的文件有bug --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">totalSizeCap</span>&gt;</span>512MB<span class="hljs-tag">&lt;/<span class="hljs-name">totalSizeCap</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">cleanHistoryOnStart</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">cleanHistoryOnStart</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;AsyncLogFile&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.AsyncAppender&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;fileLog&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;AsyncLogFile&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;STDOUT&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="六、附录"><a href="#六、附录" class="headerlink" title="六、附录"></a>六、附录</h3><p><code>logback</code>依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-classic<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>参考：</p><p><a href="https://janino-compiler.github.io/janino/">https://janino-compiler.github.io/janino/</a></p><p><a href="https://logback.qos.ch/manual/configuration.html#conditional">https://logback.qos.ch/manual/configuration.html#conditional</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>使用JMX监控和管理JVM运行时</title>
    <link href="/java/jmx.html"/>
    <url>/java/jmx.html</url>
    
    <content type="html"><![CDATA[<h3 id="一、BufferBoolMXBean"><a href="#一、BufferBoolMXBean" class="headerlink" title="一、BufferBoolMXBean"></a>一、BufferBoolMXBean</h3><p><strong>JVM 的 BufferPool 是一种用于管理直接缓冲区 (Direct Buffer) 的资源池</strong>，它是由 Java 平台引入来优化直接内存分配的机制，直接缓冲区通常用于 I&#x2F;O 操作（如文件或网络通信）以提高性能，<strong>内存区域不统计在<code>JVM</code>堆内存中</strong>。</p><p><strong>主要方法：</strong></p><table><thead><tr><th>名称</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>名称 (Name)</td><td><code>getName</code></td><td>BufferPool 的名称，例如 <code>&quot;direct&quot;</code> 和 <code>&quot;mapped&quot;</code></td></tr><tr><td>缓冲区数量 (Count)</td><td><code>getCount</code></td><td>当前池中活动缓冲区的数量</td></tr><tr><td>内存使用量 (Memory Used)</td><td><code>getMemoryUsed</code></td><td>池中分配的直接内存的总量（以字节为单位）</td></tr><tr><td>总容量 (Total Capacity)</td><td><code>getTotalCapacity</code></td><td>池中所有缓冲区的总容量（以字节为单位）</td></tr></tbody></table><p><code>Memory Used</code>和<code>Total Capacity</code>的区别：</p><p><code>Memory Used</code>:</p><ul><li>表示当前 <strong>已经分配</strong> 的内存总量</li><li>包括所有已创建缓冲区的内存大小，即正在被使用的直接内存</li></ul><p><code>Total Capacity</code>:</p><ul><li>表示所有缓冲区的 <strong>总容量</strong></li><li>包括分配的缓冲区的逻辑容量，而不仅是实际使用的内存</li></ul><table><thead><tr><th>属性</th><th>含义</th><th>包含内容</th><th>变化情况</th></tr></thead><tbody><tr><td><strong>Memory Used</strong></td><td>当前已分配的直接内存总量</td><td>实际分配的内存大小</td><td>缓冲区分配增加，释放减少</td></tr><tr><td><strong>Total Capacity</strong></td><td>所有缓冲区的逻辑容量总和</td><td>缓冲区声明的容量总大小</td><td>缓冲区分配时增加，释放时减少</td></tr></tbody></table><p><strong>常见的<code>BufferPool</code>：</strong></p><table><thead><tr><th>名称</th><th>描述</th><th>分配方式</th></tr></thead><tbody><tr><td><code>direct</code></td><td>直接内存缓冲区</td><td><code>ByteBuffer.allocateDirect()</code></td></tr><tr><td><code>mapped</code></td><td>映射到文件的缓冲区</td><td><code>FileChannel.map()</code> <code>MappedByteBuffer buffer = channel.map(FileChannel.MapMode.*READ_WRITE*, 0, 1024)</code></td></tr></tbody></table><p><strong>直接内存上限管理：</strong></p><p>直接内存的上限由 JVM 参数 <code>-XX:MaxDirectMemorySize</code> 决定，如果没有显式设置，默认值与堆大小 (<code>-Xmx</code>) 相同；</p><p>如果在分配直接内存时，内存空间不足会抛出 <code>java.lang.OutOfMemoryError: Direct buffer memory</code>异常</p><p><strong>监控</strong></p><ul><li>使用图形工具，例如 <code>VisualVM</code>(需要安装<code>VisualVM-BufferMonitor</code>插件)</li><li>使用<code>jcmd</code>监控<code>Native Memory</code>的使用<ul><li>启用直接内存跟踪 <code>-XX:NativeMemoryTracking=options</code>,<code>options</code>支持<code>summary</code>：提供总的内存使用统计，开销较低，<code>detail</code>：提供详细的内存分配信息，开销较高；一般启用<code>summary</code>就可以</li><li>使用<code>jcmd pid VM.native_memory [summary|detail]</code>查看内存分布情况，直接内存一般在<code>Direct</code>或<code>Internal(jdk1.8)</code>模块下，可以使用<code>jcmd pid VM.native_memory baseline</code>创建数据基线，然后通过<code>jcmd pid VM.native_memory [summary|detail].diff</code>和基线比较，确定内存对比基线的升降</li></ul></li></ul><p><strong>问题定位</strong></p><ul><li>发生<code>OutOfMemoryError: Direct buffer memory</code>：分析异常堆栈信息，找到导致<code>OOM</code>的位置</li><li>直接内存占比较高：</li></ul><p>参考文档：</p><p><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.management/java/lang/management/BufferPoolMXBean.html">https://docs.oracle.com/en/java/javase/21/docs/api/java.management/java/lang/management/BufferPoolMXBean.html</a></p><h3 id="二、ClassLoadingMXBean"><a href="#二、ClassLoadingMXBean" class="headerlink" title="二、ClassLoadingMXBean"></a>二、ClassLoadingMXBean</h3><p>提供有关类加载器行为的监控和管理功能</p><p> <strong>主要方法</strong></p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>getLoadedClassCount()</code></td><td>返回当前加载到 JVM 中的类的数量。</td></tr><tr><td><code>getTotalLoadedClassCount()</code></td><td>返回 JVM 自启动以来加载的类的总数（包括卸载的类）。</td></tr><tr><td><code>getUnloadedClassCount()</code></td><td>返回 JVM 自启动以来卸载的类的总数。</td></tr><tr><td><code>isVerbose()</code></td><td>检查是否启用了类加载详细信息。</td></tr><tr><td><code>setVerbose(boolean value)</code></td><td>启用或禁用类加载详细信息（仅限调试用途，可能影响性能）。</td></tr></tbody></table><p>启用<code>verbose</code>详细输出时，会在日志中输出如下内容：</p><p><code>[Loaded 类全路径 from file:jar包路径]</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">[Loaded io.lettuce.core.event.metrics.CommandLatencyEvent from file:/E:/pub/repos/io/lettuce/lettuce-core/<span class="hljs-number">5.0</span><span class="hljs-number">.5</span>.RELEASE/lettuce-core-<span class="hljs-number">5.0</span><span class="hljs-number">.5</span>.RELEASE.jar]<br><br></code></pre></td></tr></table></figure><p><strong>使用示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// ClassLoadingMXBean mxBean = ManagementFactory.getClassLoadingMXBean();</span><br><span class="hljs-type">ClassLoadingMXBean</span> <span class="hljs-variable">mxBean</span> <span class="hljs-operator">=</span> ManagementFactory.getPlatformMXBean(ClassLoadingMXBean.class);<br><br>sb.append(<span class="hljs-string">&quot;TotalLoadedClassCount: &quot;</span>).append(mxBean.getTotalLoadedClassCount()).append(<span class="hljs-string">&quot;\t&quot;</span>)<br>        .append(<span class="hljs-string">&quot;LoadedClassCount: &quot;</span>).append(mxBean.getLoadedClassCount()).append(<span class="hljs-string">&quot;\t&quot;</span>)<br>        .append(<span class="hljs-string">&quot;UnloadedClassCount: &quot;</span>).append(mxBean.getUnloadedClassCount()).append(<span class="hljs-string">&quot;\t&quot;</span>)<br>        .append(<span class="hljs-string">&quot;isVerbose: &quot;</span>).append(mxBean.isVerbose()).append(<span class="hljs-string">&quot;\n&quot;</span>);<br><br><span class="hljs-keyword">if</span> (!mxBean.isVerbose()) &#123;<br>    mxBean.setVerbose(<span class="hljs-literal">true</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="三、CompilationMXBean"><a href="#三、CompilationMXBean" class="headerlink" title="三、CompilationMXBean"></a>三、CompilationMXBean</h3><p>用于监控和管理 JVM 编译器的运行时行为，它提供有关即时编译（JIT，Just-In-Time）编译器的性能统计和配置信息</p><p><strong>主要方法</strong></p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>getName()</code></td><td>获取 JIT 编译器的名称。</td></tr><tr><td><code>isCompilationTimeMonitoringSupported()</code></td><td>检查是否支持编译时间监控（某些 JVM 实现可能不支持）。</td></tr><tr><td><code>getTotalCompilationTime()</code></td><td>返回自 JVM 启动以来 JIT 编译花费的总时间（以毫秒为单位）。如果使用多线程编译，该值为每个线程编译时间总和</td></tr></tbody></table><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">CompilationMXBean</span> <span class="hljs-variable">compilationMXBean</span> <span class="hljs-operator">=</span> ManagementFactory.getCompilationMXBean();<br>sb.append(<span class="hljs-string">&quot;isCompilationTimeMonitoringSupported: &quot;</span>).append(compilationMXBean.isCompilationTimeMonitoringSupported()).append(<span class="hljs-string">&quot;\t&quot;</span>)<br>        .append(<span class="hljs-string">&quot;getName: &quot;</span>).append(compilationMXBean.getName()).append(<span class="hljs-string">&quot;\t&quot;</span>)<br>        .append(<span class="hljs-string">&quot;getTotalCompilationTime: &quot;</span>).append(compilationMXBean.getTotalCompilationTime()).append(<span class="hljs-string">&quot;\n&quot;</span>);<br></code></pre></td></tr></table></figure><p><strong>配置参数</strong></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>-XX:+TieredCompilation</code></td><td>启用分层编译（默认开启）。</td></tr><tr><td><code>-XX:CompileThreshold=&lt;invocations&gt;</code></td><td>方法从解释执行到 JIT 编译所需的调用次数（默认约为 10,000 次）。</td></tr><tr><td></td><td></td></tr></tbody></table><p> <strong>与编译器日志相关的参数</strong></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>-XX:+PrintGC</code></td><td>打印 GC 信息（结合编译时间监控分析编译与 GC 的关系）。</td></tr><tr><td><code>-XX:+LogCompilation</code></td><td>将 JIT 编译日志输出到文件，生成可视化日志（配合工具 <code>JITWatch</code> 使用）。</td></tr><tr><td><code>-XX:+PrintCodeCache</code></td><td>打印 JIT 编译器的代码缓存使用信息。</td></tr><tr><td><code>-XX:+CITime</code></td><td>输出编译器的时间统计信息（包括每个编译线程的耗时）。</td></tr></tbody></table><hr><p> <strong>与代码缓存（Code Cache）相关的参数</strong></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>-XX:InitialCodeCacheSize=&lt;size&gt;</code></td><td>设置代码缓存的初始大小（默认 32MB）。</td></tr><tr><td><code>-XX:ReservedCodeCacheSize=&lt;size&gt;</code></td><td>设置代码缓存的最大大小（默认 240MB）。</td></tr><tr><td><code>-XX:+UseCodeCacheFlushing</code></td><td>启用代码缓存溢出时的缓存清理机制。</td></tr><tr><td><code>-XX:CodeCacheExpansionSize=&lt;size&gt;</code></td><td>设置代码缓存增长的块大小。</td></tr></tbody></table><p><strong>内存使用监控</strong></p><p>使用 <code>jcmd pid VM.native_memory summary</code>命令查看<code>native_memory</code>内存使用情况</p><ul><li><code>Compiler</code>:JIT编译器使用到的内存</li><li><code>Code</code>:JIT编译器编译缓存代码占用空间</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><br>Native Memory Tracking:<br><br>Total: reserved=2377592KB, committed=1131948KB<br><br>-           Code (reserved=258133KB, committed=46169KB)<br>                (malloc=8533KB #<span class="hljs-number">17365</span>) <br>                (mmap: reserved=249600KB, committed=37636KB)<br><br>-           Compiler (reserved=365KB, committed=365KB)<br>                (malloc=234KB #<span class="hljs-number">638</span>)<br>                (arena=131KB #<span class="hljs-number">7</span>)<br></code></pre></td></tr></table></figure><h3 id="四、GarbageCollectorMXBean"><a href="#四、GarbageCollectorMXBean" class="headerlink" title="四、GarbageCollectorMXBean"></a>四、GarbageCollectorMXBean</h3><p>用于监控和管理 Java 虚拟机中垃圾收集器的行为和性能</p><p><strong>主要方法</strong></p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>getName()</code></td><td>返回垃圾收集器的名称</td></tr><tr><td><code>getCollectionCount()</code></td><td>返回垃圾收集器运行的总次数。如果无法获取信息，返回 <code>-1</code></td></tr><tr><td><code>getCollectionTime()</code></td><td>返回垃圾收集器运行的总耗时（以毫秒为单位）。如果无法获取信息，返回 <code>-1</code></td></tr><tr><td><code>getMemoryPoolNames()</code></td><td>返回与垃圾收集器关联的内存池名称</td></tr></tbody></table><p><strong>使用示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;GarbageCollectorMXBean&gt; mxBeans = ManagementFactory.getGarbageCollectorMXBeans();<br>mxBeans.forEach(mxBean -&gt; &#123;<br>    sb.append(<span class="hljs-string">&quot;Name: &quot;</span>).append(mxBean.getName()).append(<span class="hljs-string">&quot;\t&quot;</span>)<br>            .append(<span class="hljs-string">&quot;CollectionCount: &quot;</span>).append(mxBean.getCollectionCount()).append(<span class="hljs-string">&quot;\t&quot;</span>)<br>            .append(<span class="hljs-string">&quot;CollectionTime: &quot;</span>).append(mxBean.getCollectionTime()).append(<span class="hljs-string">&quot;\t&quot;</span>)<br>            .append(<span class="hljs-string">&quot;MemoryPoolNames: &quot;</span>).append(Arrays.toString(mxBean.getMemoryPoolNames())).append(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="五、-MemoryManagerMXBean"><a href="#五、-MemoryManagerMXBean" class="headerlink" title="五、 MemoryManagerMXBean"></a>五、 MemoryManagerMXBean</h3><p>用于管理和监控与 JVM 内存管理相关的组件。它是内存管理的高层接口，可以用于查看 JVM 中的内存管理器及其关联的内存池。</p><p><strong>主要方法</strong></p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>getName()</code></td><td>返回内存管理器的名称</td></tr><tr><td><code>getMemoryPoolNames()</code></td><td>返回与该内存管理器关联的内存池名称</td></tr><tr><td><code>isValid()</code></td><td>返回内存管理器是否仍然有效 如果内存管理器已被 JVM 停用或不再使用，则返回 <code>false</code>，否则返回 <code>true</code></td></tr></tbody></table><p><strong>使用示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;MemoryManagerMXBean&gt; mxBeans = ManagementFactory.getMemoryManagerMXBeans();<br>mxBeans.forEach(mxBean -&gt; &#123;<br>    sb.append(<span class="hljs-string">&quot;Name: &quot;</span>).append(mxBean.getName()).append(<span class="hljs-string">&quot;\t&quot;</span>)<br>            .append(<span class="hljs-string">&quot;isValid: &quot;</span>).append(mxBean.isValid()).append(<span class="hljs-string">&quot;\t&quot;</span>)<br>            .append(<span class="hljs-string">&quot;MemoryPoolNames: &quot;</span>).append(Arrays.toString(mxBean.getMemoryPoolNames())).append(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="六、MemoryPoolMXBean"><a href="#六、MemoryPoolMXBean" class="headerlink" title="六、MemoryPoolMXBean"></a>六、MemoryPoolMXBean</h3><p>用于监控 JVM 中的内存池。内存池是 JVM 内存的逻辑划分，例如 Eden、Survivor、Old Gen、Metaspace 等。</p><p>通过 <code>MemoryPoolMXBean</code>，可以获取内存池的使用情况、配置参数以及与垃圾收集器和内存管理器的关联信息</p><p><strong>主要方法</strong></p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>getName()</code></td><td>返回内存池名称</td></tr><tr><td><code>getType()</code></td><td>返回内存池类型 <code>heap</code> <code>nonheap</code></td></tr><tr><td><code>getMemoryManageNames()</code></td><td>返回管理此内存池的内存管理器的名称</td></tr><tr><td><code>isValid()</code></td><td>测试此内存池在 Java 虚拟机中是否有效</td></tr><tr><td><code>getUsage()</code></td><td>返回此内存池的内存使用量估计值。<code>null</code> 如果此内存池无效（即不再存在），则此方法返回</td></tr><tr><td><code>isUsageThresholdSupported()</code></td><td>测试此内存池是否支持使用阈值，<strong>需要先判断是否支持在获取相关<code>threshold</code>指标</strong></td></tr><tr><td><code>getUsageThreshold()</code></td><td>返回此内存池的使用阈值（以字节为单位）</td></tr><tr><td><code>getUsageThresholdCount()</code></td><td>返回内存池使用量超过阈值的次数</td></tr><tr><td><code>setUsageThreshold()</code></td><td>设置使用率阈值（长阈值）</td></tr><tr><td><code>isUsageThresholdExceeded()</code></td><td>测试此内存池的内存使用量是否达到或超过其使用量阈值</td></tr><tr><td><code>getCollectionUsage()</code></td><td>获取垃圾收集后内存池的使用信息，返回 <code>MemoryUsage</code> 对象</td></tr><tr><td><code>isCollectionUsageThresholdSupported()</code></td><td>判断当前内存池是否支持设置 <code>CollectionUsageThreshold</code>，需要先判断是否支持在获取相关<code>threshold</code>指标</td></tr><tr><td><code>getCollectionUsageThreshold()</code></td><td>返回当前设置的垃圾收集后使用阈值</td></tr><tr><td><code>getCollectionUsageThresholdCount()</code></td><td>返回垃圾收集后内存池使用量超过阈值的次数</td></tr><tr><td><code>isCollectionUsageThresholdExceeded()</code></td><td>检查垃圾收集后内存池的使用量是否达到或超过设置的 <code>CollectionUsageThreshold</code>（垃圾收集后使用阈值）</td></tr><tr><td><code>setCollectionUsageThreshold()</code></td><td>设置垃圾收集后内存池的使用阈值，单位为字节</td></tr><tr><td><code>getPeakUsage()</code></td><td>返回自 Java 虚拟机启动或峰值重置以来此内存池的峰值内存使用量。<code>null</code> 如果此内存池无效（即不再存在），则此方法返回。</td></tr><tr><td><code>resetPeakUsage()</code></td><td>将此内存池的峰值内存使用量统计信息重置为当前内存使用量</td></tr></tbody></table><p>可以考虑设置合理的内存<code>Threshold</code>，及时监控内存各个区使用情况</p><p><strong>使用示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;MemoryPoolMXBean&gt; mxBeans = ManagementFactory.getMemoryPoolMXBeans();<br>mxBeans.forEach(mxBean -&gt; &#123;<br>    sb.append(<span class="hljs-string">&quot;Name: &quot;</span>).append(mxBean.getName()).append(<span class="hljs-string">&quot;\t&quot;</span>)<br>            .append(<span class="hljs-string">&quot;Type: &quot;</span>).append(mxBean.getType().toString()).append(<span class="hljs-string">&quot;\t&quot;</span>)<br>            .append(<span class="hljs-string">&quot;MemoryManageNames: &quot;</span>).append(Arrays.toString(mxBean.getMemoryManagerNames())).append(<span class="hljs-string">&quot;\t&quot;</span>)<br>            .append(<span class="hljs-string">&quot;isValid: &quot;</span>).append(mxBean.isValid()).append(<span class="hljs-string">&quot;\n&quot;</span>)<br>            .append(<span class="hljs-string">&quot;Usage: &quot;</span>).append(mxBean.getUsage()).append(<span class="hljs-string">&quot;\t&quot;</span>);<br>    <span class="hljs-keyword">if</span> (mxBean.isUsageThresholdSupported()) &#123;<br>        sb.append(<span class="hljs-string">&quot;isUsageThresholdSupported: &quot;</span>).append(mxBean.isUsageThresholdSupported()).append(<span class="hljs-string">&quot;\t&quot;</span>)<br>                .append(<span class="hljs-string">&quot;UsageThreshold: &quot;</span>).append(mxBean.getUsageThreshold()).append(<span class="hljs-string">&quot;\t&quot;</span>)<br>                .append(<span class="hljs-string">&quot;UsageThresholdCount: &quot;</span>).append(mxBean.getUsageThresholdCount()).append(<span class="hljs-string">&quot;\t&quot;</span>)<br>                .append(<span class="hljs-string">&quot;isUsageThresholdExceeded: &quot;</span>).append(mxBean.isUsageThresholdExceeded()).append(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br><br>    sb.append(<span class="hljs-string">&quot;CollectionUsage: &quot;</span>).append(mxBean.getCollectionUsage()).append(<span class="hljs-string">&quot;\t&quot;</span>);<br>    <span class="hljs-keyword">if</span> (mxBean.isCollectionUsageThresholdSupported()) &#123;<br>        sb.append(<span class="hljs-string">&quot;isCollectionUsageThresholdSupported: &quot;</span>).append(mxBean.isCollectionUsageThresholdSupported()).append(<span class="hljs-string">&quot;\t&quot;</span>)<br>                .append(<span class="hljs-string">&quot;CollectionUsageThreshold: &quot;</span>).append(mxBean.getCollectionUsageThreshold()).append(<span class="hljs-string">&quot;\t&quot;</span>)<br>                .append(<span class="hljs-string">&quot;CollectionUsageThresholdCount: &quot;</span>).append(mxBean.getCollectionUsageThresholdCount()).append(<span class="hljs-string">&quot;\t&quot;</span>)<br>                .append(<span class="hljs-string">&quot;isCollectionUsageThresholdExceeded: &quot;</span>).append(mxBean.isCollectionUsageThresholdExceeded()).append(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br><br>    sb.append(<span class="hljs-string">&quot;PeakUsage: &quot;</span>).append(mxBean.getPeakUsage()).append(<span class="hljs-string">&quot;\n&quot;</span>);<br><br>&#125;);<br></code></pre></td></tr></table></figure><p><strong>文档</strong></p><p><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.management/java/lang/management/MemoryPoolMXBean.html">https://docs.oracle.com/en/java/javase/21/docs/api/java.management/java/lang/management/MemoryPoolMXBean.html</a></p><h3 id="七、MemoryMXBean"><a href="#七、MemoryMXBean" class="headerlink" title="七、MemoryMXBean"></a>七、MemoryMXBean</h3><p>获取堆内存和非堆内存的使用信息，并与垃圾回收交互</p><p><strong>主要方法</strong></p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>gc()</code></td><td>运行垃圾回收</td></tr><tr><td><code>getHeapMemoryUsage()</code></td><td>获取堆内存使用数据</td></tr><tr><td><code>getNonHeapMemoryUsage()</code></td><td>获取非堆内存使用数据</td></tr><tr><td><code>isVerbose()</code></td><td>当前是否启用详细输出</td></tr><tr><td><code>setVerbose()</code></td><td>启用或禁用详细输出</td></tr></tbody></table><p>非堆内存：</p><ul><li>所有线程共享区域</li></ul><p><strong>使用示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-type">MemoryMXBean</span> <span class="hljs-variable">memoryMXBean</span> <span class="hljs-operator">=</span> ManagementFactory.getMemoryMXBean();<br>sb.append(<span class="hljs-string">&quot;HeapMemoryUsage: &quot;</span>).append(memoryMXBean.getHeapMemoryUsage()).append(<span class="hljs-string">&quot;\n&quot;</span>)<br>        .append(<span class="hljs-string">&quot;NonHeapMemoryUsage: &quot;</span>).append(memoryMXBean.getNonHeapMemoryUsage()).append(<span class="hljs-string">&quot;\n&quot;</span>)<br>        .append(<span class="hljs-string">&quot;isVerbose: &quot;</span>).append(memoryMXBean.isVerbose()).append(<span class="hljs-string">&quot;\n&quot;</span>);<br></code></pre></td></tr></table></figure><p><strong>文档</strong></p><p><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.management/java/lang/management/MemoryMXBean.html">https://docs.oracle.com/en/java/javase/21/docs/api/java.management/java/lang/management/MemoryMXBean.html</a></p><p><strong>内存MXBean对比</strong></p><table><thead><tr><th>功能&#x2F;接口</th><th>MemoryMXBean</th><th>MemoryPoolMXBean</th><th>MemoryManagerMXBean</th></tr></thead><tbody><tr><td><strong>作用范围</strong></td><td>整个 JVM 的堆内存和非堆内存</td><td>单个内存池（如 Eden、Old Gen 等）</td><td>内存管理器（如垃圾收集器）</td></tr><tr><td><strong>核心功能</strong></td><td>总览 JVM 内存使用情况；垃圾回收控制</td><td>监控特定内存池的使用情况和阈值</td><td>管理内存池的内存管理器信息</td></tr><tr><td><strong>是否支持阈值</strong></td><td>否</td><td>是</td><td>否</td></tr><tr><td><strong>与垃圾回收的关系</strong></td><td>显式触发垃圾回收</td><td>监控垃圾回收后内存池的使用情况</td><td>管理负责垃圾回收的内存池</td></tr><tr><td><strong>使用场景</strong></td><td>监控 JVM 整体内存，调试和性能优化</td><td>监控内存池使用量，分析内存分配问题</td><td>分析垃圾收集器与内存池的关系</td></tr></tbody></table><h3 id="八、ThreadMXBean"><a href="#八、ThreadMXBean" class="headerlink" title="八、ThreadMXBean"></a>八、ThreadMXBean</h3><p>用于获取关于线程的信息、线程状态、线程性能和线程死锁的诊断</p><p><strong>主要方法</strong></p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>getThreadCount()</code></td><td>获取当前活动线程总数，包含非<code>daemon</code>线程</td></tr><tr><td><code>getPeakThreadCount()</code></td><td>获取从<code>JVM</code>启动到当前峰值线程总数</td></tr><tr><td><code>getDaemonThreadCount()</code></td><td>获取当前活动的<code>daemon</code>线程</td></tr><tr><td><code>findDeadlockedThreads()</code></td><td>死锁检测</td></tr><tr><td><code>getAllThreadIds()</code></td><td>获取所有活动线程id</td></tr><tr><td><code>getThreadInfo(long id, int maxDepth)</code></td><td>根据线程id获取线程信息,<code>maxDepth</code>指定堆栈跟踪深度</td></tr><tr><td><code>getThreadInfo(long[] id, int maxDepth)</code></td><td>根据线程id获取线程信息,<code>maxDepth</code>指定堆栈跟踪深度</td></tr></tbody></table><p><strong>ThreadInfo主要方法</strong></p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>getThreadName()</code></td><td>线程名称</td></tr><tr><td><code>getThreadId()</code></td><td>线程ID</td></tr><tr><td><code>getThreadState()</code></td><td>线程状态，<code>NEW,RUNNABLE,BLOCKED,WAITING,TIMED_WAITING,TERMINATE</code></td></tr><tr><td><code>getBlockCount()</code></td><td>线程因进入或重新进入监视器而受阻的总次数</td></tr><tr><td><code>getBlockTime()</code></td><td>线程因进入或重新进入监视器而受阻的总次数累计耗用时间（毫秒为单位）</td></tr><tr><td><code>getWaitedCount()</code></td><td>线程等待通知的总次数</td></tr><tr><td><code>getWaitedTime()</code></td><td>线程等待通知的累计耗用时间（毫秒为单位）</td></tr><tr><td><code>isDaemon()</code></td><td>线程是否为<code>daemon</code>线程</td></tr><tr><td><code>getPriority()</code></td><td>获取线程优先级</td></tr><tr><td><code>getLockName()</code></td><td></td></tr><tr><td><code>getStackTrace()</code></td><td>获取堆栈信息，在获取<code>ThreadInfo</code>时，需要指定<code>maxDepth</code></td></tr></tbody></table><p><strong>使用示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ThreadMXBean</span> <span class="hljs-variable">threadMXBean</span> <span class="hljs-operator">=</span> ManagementFactory.getThreadMXBean();<br>sb.append(<span class="hljs-string">&quot;ThreadCount: &quot;</span>).append(threadMXBean.getThreadCount()).append(<span class="hljs-string">&quot;\n&quot;</span>);<br>sb.append(<span class="hljs-string">&quot;PeakThreadCount: &quot;</span>).append(threadMXBean.getPeakThreadCount()).append(<span class="hljs-string">&quot;\n&quot;</span>);<br>sb.append(<span class="hljs-string">&quot;DaemonThreadCount: &quot;</span>).append(threadMXBean.getDaemonThreadCount()).append(<span class="hljs-string">&quot;\n&quot;</span>);<br>sb.append(<span class="hljs-string">&quot;DeadlockedThreads: &quot;</span>).append(Arrays.toString(threadMXBean.findDeadlockedThreads())).append(<span class="hljs-string">&quot;\n&quot;</span>);<br><br><span class="hljs-type">long</span>[] threadIds = threadMXBean.getAllThreadIds();<br>ThreadInfo[] threadInfos = threadMXBean.getThreadInfo(threadIds, <span class="hljs-number">10</span>);  <span class="hljs-comment">// 不指定 maxDepth 时，无堆栈信息</span><br>Arrays.stream(threadInfos)<br>        .filter(threadInfo -&gt; threadInfo.getThreadName().equals(<span class="hljs-string">&quot;Thread-117&quot;</span>)).findFirst()<br>        .ifPresent(threadInfo -&gt; &#123;<br>            sb.append(<span class="hljs-string">&quot;Name: &quot;</span>).append(threadInfo.getThreadName()).append(<span class="hljs-string">&quot;\n&quot;</span>);<br>            sb.append(<span class="hljs-string">&quot;Id: &quot;</span>).append(threadInfo.getThreadId()).append(<span class="hljs-string">&quot;\n&quot;</span>);<br>            sb.append(<span class="hljs-string">&quot;LockName: &quot;</span>).append(threadInfo.getLockName()).append(<span class="hljs-string">&quot;\n&quot;</span>);<br>            sb.append(<span class="hljs-string">&quot;State: &quot;</span>).append(threadInfo.getThreadState()).append(<span class="hljs-string">&quot;\n&quot;</span>);<br>            sb.append(<span class="hljs-string">&quot;Block: &quot;</span>).append(threadInfo.getBlockedCount()).append(<span class="hljs-string">&quot;\n&quot;</span>);<br>            sb.append(<span class="hljs-string">&quot;Waited: &quot;</span>).append(threadInfo.getWaitedCount()).append(<span class="hljs-string">&quot;\n&quot;</span>);<br>            sb.append(<span class="hljs-string">&quot;StackTrace: &quot;</span>).append(<span class="hljs-string">&quot;\n&quot;</span>);<br>            StackTraceElement[] stackTraceElements = threadInfo.getStackTrace();<br>            System.out.println(stackTraceElements.length);<br>            <span class="hljs-keyword">for</span> (StackTraceElement stackTraceElement : stackTraceElements) &#123;<br>                sb.append(stackTraceElement.toString()).append(<span class="hljs-string">&quot;\n&quot;</span>);<br>            &#125;<br>        &#125;);<br></code></pre></td></tr></table></figure><p><strong>文档</strong></p><p><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.management/java/lang/management/ThreadMXBean.html">https://docs.oracle.com/en/java/javase/21/docs/api/java.management/java/lang/management/ThreadMXBean.html</a></p><p><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.management/java/lang/management/ThreadInfo.html">https://docs.oracle.com/en/java/javase/21/docs/api/java.management/java/lang/management/ThreadInfo.html</a></p><p><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/Thread.State.html">https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/lang/Thread.State.html</a></p><h3 id="九、OperatingSystemMXBean"><a href="#九、OperatingSystemMXBean" class="headerlink" title="九、OperatingSystemMXBean"></a>九、OperatingSystemMXBean</h3><p>用于从操作系统获取相关的系统级指标</p><p><strong>主要方法</strong></p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>getName()</code></td><td>获取系统名称</td></tr><tr><td><code>getVersion()</code></td><td>获取系统版本</td></tr><tr><td><code>getArch()</code></td><td>获取系统架构</td></tr><tr><td><code>getAvailableProcessors()</code></td><td>获取虚拟机可用的处理器数量</td></tr><tr><td><code>getSystemLoadAverage()</code></td><td>返回最后一分钟的系统负载平均值，如果不允许获取返回负数</td></tr></tbody></table><p><strong>com.sun.management.OperatingSystemMXBean主要方法</strong></p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>getTotalPhysicalMemorySize()</code></td><td>系统总物理内存</td></tr><tr><td><code>getFreeePhysicalMemorySize()</code></td><td>系统空闲物理内存</td></tr><tr><td><code>getTotalSwapSpaceSize()</code></td><td>总交换空间</td></tr><tr><td><code>getFreeSwapSpaceSize()</code></td><td>空闲交换空间</td></tr><tr><td><code>getSystemCpuLoad()</code></td><td>系统CPU使用率</td></tr><tr><td><code>getProcessCpuLoad()</code></td><td>JVM进程CPU使用率</td></tr><tr><td><code>getProcessCpuTime()</code></td><td>JVM进程CPU处理时间</td></tr><tr><td><code>getCommittedVirtualMemorySize()</code></td><td>已提交的虚拟内存</td></tr></tbody></table><p><code>com.sun.management.OperatingSystemMXBean</code>继承自<code>java.lang.management.OperatingSystemMXBean</code>，通过<code>ManagementFactory.getOperatingSystemMXBean()</code>获取以后需要进行类型转换；<code>com.sun.management.OperatingSystemMXBean</code> 是 Sun&#x2F;Oracle JVM 的实现，其他 JVM（如 OpenJ9）可能不支持</p><p><strong>使用示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">OperatingSystemMXBean</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> ManagementFactory.getOperatingSystemMXBean();<br>sb.append(<span class="hljs-string">&quot;Name: &quot;</span>).append(os.getName()).append(<span class="hljs-string">&quot;\n&quot;</span>);<br>sb.append(<span class="hljs-string">&quot;Version: &quot;</span>).append(os.getVersion()).append(<span class="hljs-string">&quot;\n&quot;</span>);<br>sb.append(<span class="hljs-string">&quot;Arch: &quot;</span>).append(os.getArch()).append(<span class="hljs-string">&quot;\n&quot;</span>);<br>sb.append(<span class="hljs-string">&quot;Available Processors: &quot;</span>).append(os.getAvailableProcessors()).append(<span class="hljs-string">&quot;\n&quot;</span>);<br>sb.append(<span class="hljs-string">&quot;System LoadAverage: &quot;</span>).append(os.getSystemLoadAverage()).append(<span class="hljs-string">&quot;\n&quot;</span>);<br><br>com.sun.management.<span class="hljs-type">OperatingSystemMXBean</span> <span class="hljs-variable">sunOs</span> <span class="hljs-operator">=</span> (com.sun.management.OperatingSystemMXBean) ManagementFactory.getOperatingSystemMXBean();<br>sb.append(<span class="hljs-string">&quot;Total PhysicalMemorySize: &quot;</span>).append(sunOs.getTotalPhysicalMemorySize()).append(<span class="hljs-string">&quot;\n&quot;</span>);<br>sb.append(<span class="hljs-string">&quot;Free PhysicalMemorySize: &quot;</span>).append(sunOs.getFreePhysicalMemorySize()).append(<span class="hljs-string">&quot;\n&quot;</span>);<br>sb.append(<span class="hljs-string">&quot;Total Swap Space: &quot;</span>).append(sunOs.getTotalSwapSpaceSize()).append(<span class="hljs-string">&quot;\n&quot;</span>);<br>sb.append(<span class="hljs-string">&quot;Free Swap Space: &quot;</span>).append(sunOs.getFreeSwapSpaceSize()).append(<span class="hljs-string">&quot;\n&quot;</span>);<br>sb.append(<span class="hljs-string">&quot;System Cpu Load: &quot;</span>).append(sunOs.getSystemCpuLoad()).append(<span class="hljs-string">&quot;\n&quot;</span>);<br>sb.append(<span class="hljs-string">&quot;Process Cpu Load: &quot;</span>).append(sunOs.getProcessCpuLoad()).append(<span class="hljs-string">&quot;\n&quot;</span>);<br>sb.append(<span class="hljs-string">&quot;Process Cpu Time: &quot;</span>).append(sunOs.getProcessCpuTime()).append(<span class="hljs-string">&quot;\n&quot;</span>);<br>sb.append(<span class="hljs-string">&quot;Committed Virtual Memory Size: &quot;</span>).append(sunOs.getCommittedVirtualMemorySize()).append(<span class="hljs-string">&quot;\n&quot;</span>);<br></code></pre></td></tr></table></figure><p><strong>文档</strong></p><p><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.management/java/lang/management/OperatingSystemMXBean.html">https://docs.oracle.com/en/java/javase/21/docs/api/java.management/java/lang/management/OperatingSystemMXBean.html</a></p><h3 id="十、RuntimeMXBean"><a href="#十、RuntimeMXBean" class="headerlink" title="十、RuntimeMXBean"></a>十、RuntimeMXBean</h3><p>取与 Java 虚拟机（JVM）运行时相关的信息和属性</p><p><strong>主要方法</strong></p><table><thead><tr><th><strong>方法名称</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><code>getName()</code></td><td>返回 JVM 名称，格式为 <code>&lt;pid&gt;@&lt;hostname&gt;</code>，表示 JVM 的进程 ID 和主机名。</td></tr><tr><td><code>getStartTime()</code></td><td>返回 JVM 的启动时间，表示从纪元开始的毫秒数（Unix 时间戳）。</td></tr><tr><td><code>getUptime()</code></td><td>返回 JVM 自启动以来的运行时间（以毫秒为单位）。</td></tr><tr><td><code>getVmName()</code></td><td>具体的JVM名称，例如 <code>Java HotSpot(TM) 64-Bit Server VM</code>。</td></tr><tr><td><code>getVmVendor()</code></td><td>JVM虚拟机供应商名称，例如 <code>Oracle Corporation</code>。</td></tr><tr><td><code>getVmVersion()</code></td><td>JVM虚拟机版本号，例如 <code>25.201-b09</code>。</td></tr><tr><td><code>getSpecName()</code></td><td>Java虚拟机规范名称，例如 <code>Java Virtual Machine Specification</code>。</td></tr><tr><td><code>getSpecVendor()</code></td><td>Java虚拟机规范的供应商名称，例如 <code>Oracle Corporation</code>。</td></tr><tr><td><code>getSpecVersion()</code></td><td>Java虚拟机规范版本号，例如 <code>1.8</code> 或 <code>11</code>。</td></tr><tr><td><code>getInputArguments()</code></td><td>传递给 Java 虚拟机的输入参数，其中不包括主方法的参数。例如 <code>-Xms512m</code> 或 <code>-Xmx1024m</code>。</td></tr><tr><td><code>getSystemProperties()</code></td><td>返回 JVM 的系统属性键值对，例如操作系统信息、Java 版本等。</td></tr><tr><td><code>getBootClassPath()</code></td><td>返回引导类加载器的类路径（仅在特定 JVM 上支持）。</td></tr><tr><td><code>isBootClassPathSupported()</code></td><td>检查当前 JVM 是否支持 <code>getBootClassPath()</code> 方法。</td></tr><tr><td><code>getClassPath()</code></td><td>返回类路径字符串，表示 <code>-classpath</code> 或 <code>-cp</code> 参数指定的值。</td></tr><tr><td><code>getLibraryPath()</code></td><td>返回动态库加载路径字符串，表示 <code>-Djava.library.path</code> 参数的值。</td></tr><tr><td><code>getManagementSpecVersion()</code></td><td>返回 JMX 规范版本，例如 <code>1.2</code>。</td></tr><tr><td><code>getPid()</code></td><td>返回当前 JVM 的进程 ID（PID）。 (Java 9+)</td></tr></tbody></table><p><strong>示例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">RuntimeMXBean</span> <span class="hljs-variable">mxBean</span> <span class="hljs-operator">=</span> ManagementFactory.getRuntimeMXBean();<br>sb.append(<span class="hljs-string">&quot;Name: &quot;</span>).append(mxBean.getName()).append(<span class="hljs-string">&quot;\n&quot;</span>);<br>sb.append(<span class="hljs-string">&quot;StartTime: &quot;</span>).append(mxBean.getStartTime()).append(<span class="hljs-string">&quot;\n&quot;</span>);<br>sb.append(<span class="hljs-string">&quot;Uptime: &quot;</span>).append(mxBean.getUptime()).append(<span class="hljs-string">&quot;\n&quot;</span>);<br>sb.append(<span class="hljs-string">&quot;VmName: &quot;</span>).append(mxBean.getVmName()).append(<span class="hljs-string">&quot;\n&quot;</span>);<br>sb.append(<span class="hljs-string">&quot;VmVendor: &quot;</span>).append(mxBean.getVmVendor()).append(<span class="hljs-string">&quot;\n&quot;</span>);<br>sb.append(<span class="hljs-string">&quot;VmVersion: &quot;</span>).append(mxBean.getVmVersion()).append(<span class="hljs-string">&quot;\n&quot;</span>);<br>sb.append(<span class="hljs-string">&quot;IsBootClassPathSupported: &quot;</span>).append(mxBean.isBootClassPathSupported()).append(<span class="hljs-string">&quot;\n&quot;</span>);<br>sb.append(<span class="hljs-string">&quot;BootClassPath: &quot;</span>).append(mxBean.getBootClassPath()).append(<span class="hljs-string">&quot;\n&quot;</span>);<br>sb.append(<span class="hljs-string">&quot;LibraryPath: &quot;</span>).append(mxBean.getLibraryPath()).append(<span class="hljs-string">&quot;\n&quot;</span>);<br>sb.append(<span class="hljs-string">&quot;ClassPath: &quot;</span>).append(mxBean.getClassPath()).append(<span class="hljs-string">&quot;\n&quot;</span>);<br>sb.append(<span class="hljs-string">&quot;SpecName: &quot;</span>).append(mxBean.getSpecName()).append(<span class="hljs-string">&quot;\n&quot;</span>);<br>sb.append(<span class="hljs-string">&quot;SpecVendor: &quot;</span>).append(mxBean.getSpecVendor()).append(<span class="hljs-string">&quot;\n&quot;</span>);<br>sb.append(<span class="hljs-string">&quot;SpecVersion: &quot;</span>).append(mxBean.getSpecVersion()).append(<span class="hljs-string">&quot;\n&quot;</span>);<br>sb.append(<span class="hljs-string">&quot;InputArguments: &quot;</span>).append(mxBean.getInputArguments()).append(<span class="hljs-string">&quot;\n&quot;</span>);<br>sb.append(<span class="hljs-string">&quot;ManagementsSpecVersion: &quot;</span>).append(mxBean.getManagementSpecVersion()).append(<span class="hljs-string">&quot;\n&quot;</span>);<br>sb.append(<span class="hljs-string">&quot;SystemProperties: &quot;</span>).append(mxBean.getSystemProperties()).append(<span class="hljs-string">&quot;\n&quot;</span>);<br></code></pre></td></tr></table></figure><p><strong>文档</strong></p><p><a href="https://docs.oracle.com/en/java/javase/21/docs/api/java.management/java/lang/management/RuntimeMXBean.html">https://docs.oracle.com/en/java/javase/21/docs/api/java.management/java/lang/management/RuntimeMXBean.html</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>使用Spring Boot Admin管理和监控应用</title>
    <link href="/java/spring_boot_admin.html"/>
    <url>/java/spring_boot_admin.html</url>
    
    <content type="html"><![CDATA[<p><code>Spring Boot Admin</code>是一个监控工具，目的在与提供一个易于访问的方式可视化<code>Spring Boot Actuator</code>，它由两个主要部分组成：</p><ul><li><code>server端：</code>提供用户界面来显示 <code>Spring Boot Actuators</code> 并与之交互</li><li><code>client端：</code>向<code>server端</code>注册并采集<code>Spring Boot Actuators</code>端点数据</li></ul><h3 id="一、Server"><a href="#一、Server" class="headerlink" title="一、Server"></a>一、Server</h3><h4 id="1、依赖"><a href="#1、依赖" class="headerlink" title="1、依赖"></a>1、依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>de.codecentric<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-admin-starter-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2、属性"><a href="#2、属性" class="headerlink" title="2、属性"></a>2、属性</h4><table><thead><tr><th>Property name</th><th>Description</th><th>Default value</th></tr></thead><tbody><tr><td><code>spring.boot.admin.server.enabled</code></td><td>是否启用<code>Admin Server</code></td><td><code>true</code></td></tr><tr><td><code>spring.boot.admin.context-path</code></td><td>访问<code>Admin Server</code>路径，例如：<code>/admin</code></td><td></td></tr><tr><td><code>spring.boot.admin.monitor.status-interval</code></td><td>检查<code>Client</code>实例状态间隔（ms）</td><td>10,000ms</td></tr></tbody></table><p>完整属性配置参考：<a href="http://docs.spring-boot-admin.com/current/server.html">http://docs.spring-boot-admin.com/current/server.html</a></p><p>启动后直接访问<code>Server</code>的地址，例如： <code>http://localhost:8080</code>,此处端口需要替换为实际端口，如果有指定 <code>context-path</code>，也需要在路径中加上。</p><h3 id="二、Client"><a href="#二、Client" class="headerlink" title="二、Client"></a>二、Client</h3><p>用于采集<code>Actuator Endpoints</code>数据并上报到<code>Server端</code></p><h4 id="1、依赖-1"><a href="#1、依赖-1" class="headerlink" title="1、依赖"></a>1、依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>de.codecentric<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-admin-starter-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2、属性-1"><a href="#2、属性-1" class="headerlink" title="2、属性"></a>2、属性</h4><table><thead><tr><th>属性名称</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>spring.boot.admin.client.enabled</code></td><td>启用<code>Admin Client</code></td><td><code>true</code></td></tr><tr><td><code>spring.boot.admin.client.url</code></td><td><code>Admin Server</code>的<code>URL</code>地址，存在多个的时候用逗号分割，例如：<code>http://localhost:8080</code></td><td></td></tr><tr><td><code>spring.boot.admin.client.instance.name</code></td><td>注册示例名称</td><td><code>$&#123;spring.application.name&#125;</code></td></tr><tr><td><code>spring.boot.admin.client.username spring.boot.admin.client.password</code></td><td>用户名和密码（启用安全验证的情况）</td><td></td></tr><tr><td><code>spring.boot.admin.client.period</code></td><td>向<code>Server</code>发送注册信息的时间间隔(ms)</td><td><code>10,000</code></td></tr><tr><td><code>spring.boot.admin.client.connect-timeout</code></td><td>连接超时时间(ms)</td><td><code>5,000</code></td></tr><tr><td><code>spring.boot.admin.client.read-timeout</code></td><td>读超时时间(ms)</td><td><code>5,000</code></td></tr><tr><td><code>spring.boot.admin.client.instance.metadata.*</code></td><td><code>metadata</code>元信息</td><td></td></tr><tr><td><code>spring.boot.admin.client.instance.metadata.tags.*</code></td><td><code>Tag</code>信息，也会在<code>metadata</code>下显示</td><td></td></tr></tbody></table><p>完整属性配置参考：<a href="http://docs.spring-boot-admin.com/current/client.html">http://docs.spring-boot-admin.com/current/client.html</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>监控</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Grafana安装与基础配置</title>
    <link href="/java/gc.html"/>
    <url>/java/gc.html</url>
    
    <content type="html"><![CDATA[<h3 id="一、垃圾收集算法"><a href="#一、垃圾收集算法" class="headerlink" title="一、垃圾收集算法"></a>一、垃圾收集算法</h3><h4 id="1、CMS"><a href="#1、CMS" class="headerlink" title="1、CMS"></a>1、CMS</h4><p>专为老年代设计的一个低延迟收集器，通常会与一个用于 <code>Young GC</code> 的并行收集器(<code>ParNew</code>)配对使用。</p><p>垃圾收集阶段：</p><ol><li>初始标记(<code>initial mark</code>)(<code>STW</code>)</li><li>并发标记（<code>concurrent mark</code>）</li><li>并发预清理（<code>concurrent preclean</code>）</li><li>重新标记（<code>remark</code>）（<code>STW</code>）</li><li>并发清理（<code>concurrent sweep</code>）</li><li>并发重置（<code>concurrent reset</code>）</li></ol><p>初始标记阶段的目的是为该区域内的垃圾收集提供一个稳定的起点集合，这些起点集合称为<strong>内部指针</strong>，相当于用于收集周期的垃圾收集根。</p><p>并发标记阶段本质上是在堆上运行三色标记算法，记录以后可能需要修正的任何修改</p><p>并发预清理阶段尽可能缩短会造成<code>STW</code>的重新标记阶段的长度</p><p>重新标记阶段使用卡表来修正可能会在并发标记阶段受<code>Mutator</code>（应用）线程影响的标记</p><p>启用标志：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">-XX:+UseConcMarkSweepGC<br></code></pre></td></tr></table></figure><p>此标志也会同步启用<code>ParNewGC</code>（用于新生代内存回收）</p><h4 id="2、G1"><a href="#2、G1" class="headerlink" title="2、G1"></a>2、G1</h4><p><code>G1</code>堆基于区域(<code>region</code>)&#96;的概念。支持的区域大小为1、2、4、8、16、32或64MB中的某个值，默认情况下，期望堆中区域的数量在2048到4095之间，如果不在，会调整区域的大小来实现这个目标。</p><p>区域大小计算：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Heap</span> <span class="hljs-attr">Size</span>&gt;</span> / 2048 ,结果取整数，选择离它最近的所允许的区域大小<br></code></pre></td></tr></table></figure><p><strong>区域数量计算：</strong></p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-keyword">Number</span> of regions = &lt;Heap <span class="hljs-built_in">Size</span>&gt; / &lt;Region <span class="hljs-built_in">Size</span>&gt;<br></code></pre></td></tr></table></figure><p><strong>巨型区域与巨型对象：</strong></p><p>占用空间超过一半的对象被认定为是巨型(<code>humongous</code>)对象.</p><p>巨型区域是连续的空闲区域，可以立即成为<code>Tenured</code>区域（而非<code>Eden</code>区域）的一部分</p><p><strong>记忆集（remembered set , RSet）：</strong></p><p>每个区域都有的条目，它们会记录指向当前堆区域的外部引用。<code>G1</code>不需要通过遍历整个堆来寻找指向某个区域的引用，只需要检查<code>RSet</code>即可。</p><p><strong><code>G1</code>的各阶段：</strong></p><p>1、初始标记(<code>initial mak</code>) <code>STW</code></p><p>2、并发根扫描(<code>concurrent root scan</code>)</p><p>​扫描初始标记的<code>Survivor</code>区域以寻找指向老年代的引用</p><p>3、并发标记(<code>concurrent remark</code>)</p><p>4、重新标记(<code>remark</code>) <code>STW</code></p><p>5、清理(<code>cleanup</code>) <code>STW</code></p><p>启用标志：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">-XX:UseG1GC<br></code></pre></td></tr></table></figure><p><strong>配置参数：</strong></p><table><thead><tr><th align="center">标志</th><th align="center">描述</th><th align="center">默认值</th></tr></thead><tbody><tr><td align="center"><code>XX:MaxGCPauseMillis=200</code></td><td align="center"><code>GC</code>最大暂停时间</td><td align="center">200</td></tr><tr><td align="center"><code>-XX:G1HeapRegionSize=&lt;n&gt;</code></td><td align="center"><code>Region</code>区域大小，<code>n</code>必须是2的幂，范围在1～64MB之间</td><td align="center"></td></tr><tr><td align="center"><code>-XX:ConcGCThreads</code></td><td align="center">并发标记线程数量</td><td align="center"></td></tr><tr><td align="center"><code>-XX:+AlwaysPreTouch</code></td><td align="center">在启动时由操作系统将物理内存分配给VM，而不是实际使用的时候在由虚拟内存映射物理内存</td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><p><strong>要求JDK最低版本 8u40</strong></p><h3 id="二、垃圾收集日志"><a href="#二、垃圾收集日志" class="headerlink" title="二、垃圾收集日志"></a>二、垃圾收集日志</h3><p>​<strong>垃圾收集标志(jdk8)</strong></p><table><thead><tr><th align="center">标志</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>-Xloggc:gc.log</code></td><td align="center">控制垃圾收集事件写入哪个文件</td></tr><tr><td align="center"><code>-XX:+PrintGCDetails</code></td><td align="center">将垃圾收集事件的详细信息写入日志</td></tr><tr><td align="center"><code>-XX:+PrintTenuringDistribution</code></td><td align="center">提供了计算关键的内存压力影响和事件（如过早晋升）所需的原始数据，需要使用工具查看</td></tr><tr><td align="center"><code>-XX:+PrintGCTimeStamps</code></td><td align="center">打印垃圾收集事件的发生时间（自虚拟机启动后的秒数）</td></tr><tr><td align="center"><code>-XX:+PrintGCDateStamps</code></td><td align="center">打印垃圾收集事件发生的挂钟时间</td></tr><tr><td align="center"><code>-XX:+UseGCLogFileRotation</code></td><td align="center">打开日志文件滚动</td></tr><tr><td align="center"><code>-XX:+NumberOfGCLogFiles=&lt;n&gt;</code></td><td align="center">设置滚动日志文件的个数</td></tr><tr><td align="center"><code>-XX:+GCLogFileSize=&lt;size&gt;</code></td><td align="center">设置滚动日志文件的最大值，当文件大小超过该参数值时，日志将写入下一个文件</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>监控</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>操作系统性能监测工具</title>
    <link href="/java/os_performance_tools.html"/>
    <url>/java/os_performance_tools.html</url>
    
    <content type="html"><![CDATA[<h3 id="一、vmstat"><a href="#一、vmstat" class="headerlink" title="一、vmstat"></a>一、vmstat</h3><p><code>vmstat</code>（<code>virtual memory statistics</code>） 提供有关系统的虚拟内存、进程、CPU 活动、I&#x2F;O 以及其他系统资源的实时统计信息。</p><p><code>vmstat</code> 命令有多种选项，可以用来指定输出的内容和格式，帮助你更精确地监控和分析系统性能。以下是常见的 <code>vmstat</code> 选项及其功能：</p><h4 id="1-基本用法"><a href="#1-基本用法" class="headerlink" title="1. 基本用法"></a>1. <strong>基本用法</strong></h4>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vmstat [options] [delay [count]]<br></code></pre></td></tr></table></figure><ul><li><code>delay</code>：每隔多少秒刷新一次输出。如果不指定，默认显示一次输出。</li><li><code>count</code>：显示多少次输出。如果不指定，则无限次输出，直到用户终止命令。</li></ul><h4 id="2-常见选项"><a href="#2-常见选项" class="headerlink" title="2. 常见选项"></a>2. <strong>常见选项</strong></h4><ul><li><p><strong><code>-a</code>（active&#x2F;inactive 内存）</strong>：<br>显示活动（active）和非活动（inactive）内存信息，增加了 <code>active</code> 和 <code>inactive</code> 列。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vmstat -a<br></code></pre></td></tr></table></figure></li><li><p><strong><code>-f</code>（forks）</strong>：<br>显示自系统启动以来的进程创建（fork）次数。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vmstat -f<br></code></pre></td></tr></table></figure></li><li><p><strong><code>-m</code>（slabinfo）</strong>：<br>显示内存中 slab 信息，包括缓存对象的使用统计数据。<strong>该选项需要更高级别权限</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vmstat -m<br></code></pre></td></tr></table></figure></li><li><p><strong><code>-n</code>（no header）</strong>：<br>仅在第一次报告中显示头信息，以后不再重复显示头信息。这对于连续输出时有用，减少视觉干扰。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vmstat -n 2 5<br></code></pre></td></tr></table></figure></li><li><p><strong><code>-s</code>（statistics summary）</strong>：<br>显示自系统启动以来的系统资源统计摘要信息，包括内存、CPU、交换等方面的统计数据。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vmstat -s<br></code></pre></td></tr></table></figure></li><li><p><strong><code>-d</code>（disk statistics）</strong>：<br>显示磁盘设备的 I&#x2F;O 统计信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vmstat -d<br></code></pre></td></tr></table></figure></li><li><p><strong><code>-p [partition]</code>（partition statistics）</strong>：<br>显示指定磁盘分区的 I&#x2F;O 统计信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vmstat -p sda1<br></code></pre></td></tr></table></figure></li><li><p><strong><code>-t</code>（timestamp）</strong>：<br>在每行输出的开头显示当前时间戳，有助于记录数据的时间点。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vmstat -t 2 5<br></code></pre></td></tr></table></figure></li><li><p><strong><code>-S [unit]</code>（unit size）</strong>：<br><strong><code>S</code>为大写</strong></p><p>指定输出单位，可以是 <code>k</code>（千字节）、<code>m</code>（兆字节）或 <code>b</code>（块，1024 字节）。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vmstat -S m 2 5<br></code></pre></td></tr></table></figure></li><li><p><strong><code>-w</code>（wide output）</strong>：<br>使输出更宽，以包含更完整的信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vmstat -w<br></code></pre></td></tr></table></figure></li></ul><h4 id="3、输出解读"><a href="#3、输出解读" class="headerlink" title="3、输出解读"></a>3、<strong>输出解读</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----<br> r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st<br><br></code></pre></td></tr></table></figure><p>   <code>vmstat</code> 的输出包括多个列，每列代表不同的系统指标。以下是常见的列及其含义：</p>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----<br> r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st<br></code></pre></td></tr></table></figure><ul><li><p><strong>procs（进程）</strong>：</p><ul><li><code>r</code>：处于运行队列中的进程数，或者准备运行的进程数。如果这个值大于 CPU 核心数量，表示系统可能存在 CPU 瓶颈。</li><li><code>b</code>：处于不可中断睡眠状态的进程数，通常表示等待 I&#x2F;O 操作完成。</li></ul></li><li><p><strong>memory（内存）</strong>：</p><ul><li><code>swpd</code>：已使用的交换空间大小（以 KB 为单位）。</li><li><code>free</code>：空闲物理内存大小（以 KB 为单位）。</li><li><code>buff</code>：用于缓冲的内存大小（以 KB 为单位），通常用于块设备的缓冲。</li><li><code>cache</code>：用于缓存的内存大小（以 KB 为单位），通常用于文件系统的缓存。</li></ul></li><li><p><strong>swap（交换空间）</strong>：</p><ul><li><code>si</code>：从交换空间调入内存的交换大小（以 KB 为单位），表示系统将数据从交换区调入内存的速率。</li><li><code>so</code>：从内存调出到交换空间的交换大小（以 KB 为单位），表示系统将数据从内存调出到交换区的速率。</li></ul></li><li><p><strong>io（I&#x2F;O）</strong>：</p><ul><li><code>bi</code>：块设备读取操作的速率（以 KB 为单位），表示每秒从块设备读取的数据量。</li><li><code>bo</code>：块设备写入操作的速率（以 KB 为单位），表示每秒向块设备写入的数据量。</li></ul></li><li><p><strong>system（系统）</strong>：</p><ul><li><code>in</code>：每秒的中断数，包括硬件和软件中断。</li><li><code>cs</code>：每秒的上下文切换次数，表示进程之间的切换频率。</li></ul></li><li><p><strong>cpu（CPU 使用情况）</strong>：</p><ul><li><p><code>us</code>：用户态 CPU 使用率，表示 CPU 在用户进程上花费的时间百分比。</p></li><li><p><code>sy</code>：内核态 CPU 使用率，表示 CPU 在内核进程上花费的时间百分比。</p></li><li><p><code>id</code>：空闲 CPU 时间百分比。</p></li><li><p><code>wa</code>：等待 I&#x2F;O 完成的 CPU 时间百分比。</p></li><li><p><code>st</code>：虚拟机偷取的 CPU 时间百分比（stolen time），指虚拟机管理程序（如 KVM、Xen）占用的时间。</p></li></ul><p><code>us</code>和<code>sy</code>合计表示 CPU 总使用率</p></li></ul><h4 id="4、-使用示例"><a href="#4、-使用示例" class="headerlink" title="4、 使用示例"></a>4、 <strong>使用示例</strong></h4><ul><li><p><strong>监控磁盘 I&#x2F;O 活动，每隔 2 秒更新一次，输出 10 次：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vmstat -d 2 10<br></code></pre></td></tr></table></figure></li><li><p><strong>显示活动和非活动内存信息，包含时间戳，每秒更新一次：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vmstat -a -t 1<br></code></pre></td></tr></table></figure></li><li><p><strong>每秒更新一次统计数据，显示 5 次，并使用兆字节作为单位：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vmstat -S m 1 5<br></code></pre></td></tr></table></figure></li><li><p><strong>查看系统的统计摘要：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vmstat -s<br></code></pre></td></tr></table></figure></li></ul><h3 id="二、iostat"><a href="#二、iostat" class="headerlink" title="二、iostat"></a>二、iostat</h3><p><code>iostat</code> 显示 CPU 的使用情况以及磁盘 I&#x2F;O 的统计信息，帮助用户分析系统瓶颈，尤其是与存储设备相关的性能问题。</p><h4 id="1-iostat-的基本功能"><a href="#1-iostat-的基本功能" class="headerlink" title="1. iostat 的基本功能"></a>1. <strong><code>iostat</code> 的基本功能</strong></h4><ul><li><strong>监控 CPU 使用情况</strong>：显示系统总体的 CPU 使用情况，包括用户态、系统态、I&#x2F;O 等待时间等。</li><li><strong>监控设备 I&#x2F;O 性能</strong>：显示每个块设备的 I&#x2F;O 活动统计信息，包括读写速率、每秒传输块数、平均请求时间等。</li></ul><h4 id="2-基本用法"><a href="#2-基本用法" class="headerlink" title="2. 基本用法"></a>2. <strong>基本用法</strong></h4>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">iostat [options] [delay [count]]<br></code></pre></td></tr></table></figure><ul><li><code>delay</code>：每隔多少秒刷新一次输出。如果不指定，默认显示一次输出。</li><li><code>count</code>：显示多少次输出。如果不指定，则无限次输出，直到用户终止命令。</li></ul><h4 id="3-常见选项"><a href="#3-常见选项" class="headerlink" title="3. 常见选项"></a>3. <strong>常见选项</strong></h4><ul><li><p><strong><code>-c</code>（显示 CPU 使用情况）</strong>：<br>显示 CPU 使用情况统计，包括用户态、系统态、I&#x2F;O 等待时间等。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">iostat -c<br></code></pre></td></tr></table></figure></li><li><p><strong><code>-d</code>（显示磁盘 I&#x2F;O 统计信息）</strong>：<br>显示块设备的 I&#x2F;O 统计数据。默认情况下，<code>iostat</code> 会同时显示 CPU 和磁盘 I&#x2F;O 的统计信息，使用 <code>-d</code> 选项可以仅显示磁盘 I&#x2F;O。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">iostat -d<br></code></pre></td></tr></table></figure></li><li><p>**<code>-k</code> 或 <strong><code>-m</code>（指定单位）</strong>：<br>将 I&#x2F;O 统计数据以千字节 (<code>-k</code>) 或兆字节 (<code>-m</code>) 为单位显示。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">iostat -k<br>iostat -m<br></code></pre></td></tr></table></figure></li><li><p><strong><code>-x</code>（扩展 I&#x2F;O 统计信息）</strong>：<br>显示更详细的设备 I&#x2F;O 统计信息，包括平均队列长度、平均服务时间、设备利用率等。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">iostat -x<br></code></pre></td></tr></table></figure></li><li><p><strong><code>-p [device]</code>（显示分区统计信息）</strong>：<br>显示指定设备的分区统计信息。如果未指定设备，则显示所有设备的分区统计信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">iostat -p sda<br>iostat -p<br></code></pre></td></tr></table></figure></li><li><p>**<code>-t</code> 或 <strong><code>-z</code>（显示时间戳）</strong>：<br>使用 <code>-t</code> 选项在每行输出前面添加时间戳，使用 <code>-z</code> 选项则隐藏所有值为零的设备（减少无用信息）。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">iostat -t<br>iostat -z<br></code></pre></td></tr></table></figure></li><li><p><strong><code>-N</code>（显示 LVM 逻辑卷统计信息）</strong>：<br>显示 LVM（逻辑卷管理器）逻辑卷的统计信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">iostat -N<br></code></pre></td></tr></table></figure></li><li><p><strong><code>-p ALL</code>（显示所有分区和设备）</strong>：<br>使用 <code>-p ALL</code> 显示所有设备和其分区的详细统计信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">iostat -p ALL<br></code></pre></td></tr></table></figure></li></ul><h4 id="4-iostat-输出解读"><a href="#4-iostat-输出解读" class="headerlink" title="4. iostat 输出解读"></a>4. <strong><code>iostat</code> 输出解读</strong></h4><p>   <strong>基本输出格式</strong>：</p><p>   典型的 <code>iostat</code> 输出包括两部分：CPU 使用情况和设备 I&#x2F;O 使用情况。以下是一个基本输出的例子：<br>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">Linux 5.4.0-42-generic (hostname) 08/21/2024 _x86_64_(4 CPU)<br><br>avg-cpu:  %user   %nice %system %iowait  %steal   %idle<br>           10.05    0.02    2.03    1.15    0.00   86.75<br><br>Device             tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn<br>sda               5.00        256.00       512.00     123456     654321<br>sdb               2.00        128.00       256.00      65432     321654<br></code></pre></td></tr></table></figure></p><ul><li><p><strong>CPU 使用情况</strong> (<code>avg-cpu</code>)：</p><ul><li><code>%user</code>：在用户态执行的 CPU 时间百分比。</li><li><code>%nice</code>：在用户态执行的、优先级调整过的进程的 CPU 时间百分比。</li><li><code>%system</code>：在内核态执行的 CPU 时间百分比。</li><li><code>%iowait</code>：CPU 等待 I&#x2F;O 操作完成的时间百分比。</li><li><code>%steal</code>：被虚拟化管理程序“窃取”的时间百分比。</li><li><code>%idle</code>：CPU 空闲的时间百分比。</li></ul></li><li><p><strong>设备使用情况</strong>（每个块设备）：</p><ul><li><code>tps</code>（Transfers per second）：每秒钟设备 I&#x2F;O 请求的次数，包括读和写操作。</li><li><code>kB_read/s</code>：每秒钟从设备读取的数据量（以 KB 为单位）。</li><li><code>kB_wrtn/s</code>：每秒钟向设备写入的数据量（以 KB 为单位）。</li><li><code>kB_read</code>：自系统启动以来从设备读取的总数据量（以 KB 为单位）。</li><li><code>kB_wrtn</code>：自系统启动以来向设备写入的总数据量（以 KB 为单位）。</li></ul></li></ul><p>   <strong>扩展的设备统计信息（使用 <code>-x</code> 选项）</strong>：</p><p>   <code>iostat -x</code> 提供了更详细的设备统计数据，包含以下信息：</p><ul><li>**<code>r/s</code>**：每秒钟读取请求的次数。</li><li>**<code>w/s</code>**：每秒钟写入请求的次数。</li><li>**<code>rkB/s</code>**：每秒钟读取的数据量（以 KB 为单位）。</li><li>**<code>wkB/s</code>**：每秒钟写入的数据量（以 KB 为单位）。</li><li>**<code>avgrq-sz</code>**：平均每次 I&#x2F;O 请求的数据大小（以扇区为单位）。</li><li>**<code>avgqu-sz</code>**：平均 I&#x2F;O 请求队列长度。</li><li>**<code>await</code>**：每次 I&#x2F;O 操作的平均等待时间（以毫秒为单位），包括队列中的时间和服务时间。</li><li>**<code>svctm</code>**：每次 I&#x2F;O 操作的平均服务时间（以毫秒为单位）。</li><li>**<code>%util</code>**：设备的利用率，表示设备被占用的时间百分比（在 100% 表示设备始终处于忙碌状态）。</li></ul><h4 id="5-示例分析"><a href="#5-示例分析" class="headerlink" title="5. 示例分析"></a>5. <strong>示例分析</strong></h4><ul><li><p>使用<code>-x</code>显示磁盘扩展信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">iostat -x<br><br>Device            r/s     w/s   rkB/s   wkB/s  avgrq-sz  avgqu-sz   await  svctm  %util<br>sda              25.00   30.00  500.00  600.00    32.00      0.10    4.00   1.50   10.00<br>sdb              10.00   15.00  200.00  300.00    40.00      0.50   10.00   3.00   30.00<br></code></pre></td></tr></table></figure><ul><li><p><strong><code>sda</code> 设备分析</strong>：</p><ul><li><code>r/s</code> 和 <code>w/s</code> 表示每秒有 25 次读取和 30 次写入操作。</li><li><code>await</code> 是 4 毫秒，表明该设备的 I&#x2F;O 等待时间较短，I&#x2F;O 性能良好。</li><li><code>%util</code> 是 10%，说明 <code>sda</code> 设备的利用率较低，系统资源尚未饱和。</li></ul></li><li><p><strong><code>sdb</code> 设备分析</strong>：</p><ul><li><code>avgqu-sz</code> 为 0.50，表示该设备的 I&#x2F;O 请求队列相对较长。</li><li><code>await</code> 为 10 毫秒，比 <code>sda</code> 设备的等待时间高，可能有轻微的 I&#x2F;O 瓶颈。</li><li><code>%util</code> 为 30%，虽然利用率比 <code>sda</code> 高，但仍未达到饱和状态。</li></ul></li><li><p><strong>每隔 2 秒显示一次 CPU 使用情况和磁盘 I&#x2F;O 统计信息，共显示 5 次：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">iostat -c -d 2 5<br></code></pre></td></tr></table></figure></li><li><p><strong>以千字节为单位显示扩展 I&#x2F;O 统计信息，并隐藏零值设备：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">iostat -xkz<br></code></pre></td></tr></table></figure></li><li><p><strong>显示所有设备及其分区的 I&#x2F;O 统计信息，并添加时间戳：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">iostat -p ALL -t<br></code></pre></td></tr></table></figure></li><li><p><strong>仅显示指定磁盘设备 <code>sda</code> 的分区 I&#x2F;O 统计信息：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">iostat -p sda<br></code></pre></td></tr></table></figure></li><li><p><strong>每隔 1 秒显示一次 LVM 逻辑卷的统计信息：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">iostat -N 1<br></code></pre></td></tr></table></figure></li></ul></li></ul><h4 id="6、iostat安装"><a href="#6、iostat安装" class="headerlink" title="6、iostat安装"></a>6、iostat安装</h4><h5 id="6-1-Feodra系统安装iostat"><a href="#6-1-Feodra系统安装iostat" class="headerlink" title="6.1 Feodra系统安装iostat"></a>6.1 Feodra系统安装iostat</h5><p><code>iostat</code> 是 <code>sysstat</code>软件包的一部分，因此安装<code>sysstat</code>包即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">1、更新软件包索引<br>sudo dnf update<br><br>2. 安装 sysstat 软件包<br>sudo dnf install sysstat<br><br>3、验证安装<br>iostat --version<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Lambda浅析</title>
    <link href="/2025/08/25/java/lambda/Lambda%E6%B5%85%E6%9E%90/"/>
    <url>/2025/08/25/java/lambda/Lambda%E6%B5%85%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h2 id="一、Lambda-表达式核心概念"><a href="#一、Lambda-表达式核心概念" class="headerlink" title="一、Lambda 表达式核心概念"></a>一、Lambda 表达式核心概念</h2><h3 id="1-基本语法"><a href="#1-基本语法" class="headerlink" title="1. 基本语法"></a>1. 基本语法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">(parameters) -&gt; expression<br>(parameters) -&gt; &#123; statements; &#125;<br></code></pre></td></tr></table></figure><ul><li>输入参数</li><li>固定格式： <code>-&gt;</code></li><li>逻辑代码块</li></ul><h3 id="2-类型推断机制"><a href="#2-类型推断机制" class="headerlink" title="2. 类型推断机制"></a>2. 类型推断机制</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 编译器自动推断参数类型</span><br>Function&lt;String, Integer&gt; lengthFunc = s -&gt; s.length(); <br></code></pre></td></tr></table></figure><p>lambda表达式简化过程：</p><ul><li>省略输入参数类型</li><li>参数数量判断：只有一个参数时可以去掉括号</li><li>代码块简化：只有一行时，可以省略花括号，直接跟在 <code>-&gt;</code> 后边</li><li>使用方法引用</li></ul><p><span style="color:red">Lambda表达式实际上就是对函数式接口方法的实现</span></p><h2 id="二、方法引用详解"><a href="#二、方法引用详解" class="headerlink" title="二、方法引用详解"></a>二、方法引用详解</h2><h3 id="1-方法引用类型"><a href="#1-方法引用类型" class="headerlink" title="1. 方法引用类型"></a>1. 方法引用类型</h3><table><thead><tr><th>类型</th><th>语法格式</th><th>等效 Lambda 表达式</th><th>示例</th></tr></thead><tbody><tr><td>静态方法引用</td><td><code>ClassName::staticMethod</code></td><td><code>args -&gt; ClassName.staticMethod(args)</code></td><td><code>Math::max</code></td></tr><tr><td>实例方法引用（对象）</td><td><code>object::instanceMethod</code></td><td><code>args -&gt; object.instanceMethod(args)</code></td><td><code>list::add</code></td></tr><tr><td>实例方法引用（类）</td><td><code>ClassName::instanceMethod</code></td><td><code>(obj, args) -&gt; obj.instanceMethod(args)</code></td><td><code>String::length</code></td></tr><tr><td>构造方法引用</td><td><code>ClassName::new</code></td><td><code>args -&gt; new ClassName(args)</code></td><td><code>ArrayList::new</code></td></tr></tbody></table><h3 id="2-典型应用场景"><a href="#2-典型应用场景" class="headerlink" title="2. 典型应用场景"></a>2. 典型应用场景</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 静态方法引用</span><br>List&lt;Integer&gt; numbers = Arrays.asList(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br>numbers.stream().map(String::valueOf); <span class="hljs-comment">// 等效 s -&gt; String.valueOf(s)</span><br><br><span class="hljs-comment">// 构造方法引用</span><br>Supplier&lt;List&lt;String&gt;&gt; listSupplier = ArrayList::<span class="hljs-keyword">new</span>;<br><br><span class="hljs-comment">// 对象方法引用</span><br>Consumer&lt;String&gt; printer = System.out::println;<br></code></pre></td></tr></table></figure><h3 id="3-方法引用-vs-Lambda"><a href="#3-方法引用-vs-Lambda" class="headerlink" title="3. 方法引用 vs Lambda"></a>3. 方法引用 vs Lambda</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Lambda 表达式</span><br>Function&lt;String, Integer&gt; f1 = s -&gt; s.length();<br><br><span class="hljs-comment">// 方法引用</span><br>Function&lt;String, Integer&gt; f2 = String::length;<br></code></pre></td></tr></table></figure><hr><h2 id="三、核心函数式接口"><a href="#三、核心函数式接口" class="headerlink" title="三、核心函数式接口"></a>三、核心函数式接口</h2><p>函数式接口：只包含一个抽象方法的接口为函数式接口，lambda表达式要求必须为函数式接口</p><p>接口中<code>default</code>方法和<code>static</code>方法不再计数内。</p><p><code>@FunctionalInterface</code>注解不是必需的，添加注解可以让编译器识别当前接口为函数时接口，如果接口中定义超过一个<code>abstract</code>方法时会抛出错误：</p><p><code>Multiple non-overriding abstract methods found in interface cn.probiecoder.lambda.DoubleRandomSupplier</code></p><h3 id="1-四大基础接口"><a href="#1-四大基础接口" class="headerlink" title="1. 四大基础接口"></a>1. 四大基础接口</h3><table><thead><tr><th>接口</th><th>方法签名</th><th>典型应用</th></tr></thead><tbody><tr><td><code>Supplier&lt;T&gt;</code></td><td><code>T get()</code></td><td>对象工厂&#x2F;延迟初始化</td></tr><tr><td><code>Consumer&lt;T&gt;</code></td><td><code>void accept(T t)</code></td><td>集合遍历处理</td></tr><tr><td><code>Predicate&lt;T&gt;</code></td><td><code>boolean test(T t)</code></td><td>数据过滤</td></tr><tr><td><code>Function&lt;T,R&gt;</code></td><td><code>R apply(T t)</code></td><td>数据转换</td></tr></tbody></table><h3 id="2-16-种原始类型"><a href="#2-16-种原始类型" class="headerlink" title="2. 16 种原始类型"></a>2. 16 种原始类型</h3><h4 id="输入-输出类型表"><a href="#输入-输出类型表" class="headerlink" title="输入&#x2F;输出类型表"></a>输入&#x2F;输出类型表</h4><table><thead><tr><th>输入类型 \ 输出类型</th><th>T</th><th>int</th><th>long</th><th>double</th></tr></thead><tbody><tr><td><strong>T</strong></td><td><code>UnaryOperator&lt;T&gt;</code></td><td><code>ToIntFunction&lt;T&gt;</code></td><td><code>ToLongFunction&lt;T&gt;</code></td><td><code>ToDoubleFunction&lt;T&gt;</code></td></tr><tr><td><strong>int</strong></td><td><code>IntFunction&lt;R&gt;</code></td><td><code>IntUnaryOperator</code></td><td><code>IntToLongFunction</code></td><td><code>IntToDoubleFunction</code></td></tr><tr><td><strong>long</strong></td><td><code>LongFunction&lt;R&gt;</code></td><td><code>LongToIntFunction</code></td><td><code>LongUnaryOperator</code></td><td><code>LongToDoubleFunction</code></td></tr><tr><td><strong>double</strong></td><td><code>DoubleFunction&lt;R&gt;</code></td><td><code>DoubleToIntFunction</code></td><td><code>DoubleToLongFunction</code></td><td><code>DoubleUnaryOperator</code></td></tr></tbody></table><h4 id="典型接口详解"><a href="#典型接口详解" class="headerlink" title="典型接口详解"></a>典型接口详解</h4><table><thead><tr><th>接口</th><th>方法签名</th><th>应用场景</th><th>示例代码</th></tr></thead><tbody><tr><td><code>IntFunction&lt;R&gt;</code></td><td><code>R apply(int value)</code></td><td>int → 任意类型转换</td><td><code>IntFunction&lt;String&gt; f = i -&gt; &quot;No.&quot; + i;</code></td></tr><tr><td><code>ToIntFunction&lt;T&gt;</code></td><td><code>int applyAsInt(T t)</code></td><td>对象 → int 提取</td><td><code>ToIntFunction&lt;String&gt; f = String::length;</code></td></tr><tr><td><code>IntUnaryOperator</code></td><td><code>int applyAsInt(int)</code></td><td>int → int 运算</td><td><code>IntUnaryOperator add5 = x -&gt; x + 5;</code></td></tr><tr><td><code>DoubleToIntFunction</code></td><td><code>int applyAsInt(double)</code></td><td>double → int 强制转换</td><td><code>DoubleToIntFunction f = d -&gt; (int)d;</code></td></tr></tbody></table><h3 id="3-二元操作接口"><a href="#3-二元操作接口" class="headerlink" title="3. 二元操作接口"></a>3. 二元操作接口</h3><table><thead><tr><th>接口</th><th>方法签名</th><th>应用场景</th></tr></thead><tbody><tr><td><code>BiFunction&lt;T,U,R&gt;</code></td><td><code>R apply(T t, U u)</code></td><td>合并两个对象</td></tr><tr><td><code>BiConsumer&lt;T,U&gt;</code></td><td><code>void accept(T t, U u)</code></td><td>消费两个对象</td></tr><tr><td><code>BiPredicate&lt;T,U&gt;</code></td><td><code>boolean test(T t, U u)</code></td><td>双参数条件判断</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 合并两个列表</span><br>BiFunction&lt;List&lt;String&gt;, List&lt;String&gt;, List&lt;String&gt;&gt; merger = <br>    (list1, list2) -&gt; Stream.concat(list1.stream(), list2.stream())<br>                           .collect(Collectors.toList());<br></code></pre></td></tr></table></figure><hr><h2 id="四、Lambda-高级特性"><a href="#四、Lambda-高级特性" class="headerlink" title="四、Lambda 高级特性"></a>四、Lambda 高级特性</h2><h3 id="1-变量捕获规则"><a href="#1-变量捕获规则" class="headerlink" title="1. 变量捕获规则"></a>1. 变量捕获规则</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">base</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;  <span class="hljs-comment">// 必须为 effectively final</span><br>Function&lt;Integer, Integer&gt; adder = x -&gt; x + base;<br></code></pre></td></tr></table></figure><h3 id="2-闭包与内存管理"><a href="#2-闭包与内存管理" class="headerlink" title="2. 闭包与内存管理"></a>2. 闭包与内存管理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Supplier&lt;IntSupplier&gt; <span class="hljs-title function_">createCounter</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span>[] count = &#123;<span class="hljs-number">0</span>&#125;;  <span class="hljs-comment">// 使用数组绕过 final 限制</span><br>    <span class="hljs-keyword">return</span> () -&gt; () -&gt; count[<span class="hljs-number">0</span>]++;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="五、应用案例"><a href="#五、应用案例" class="headerlink" title="五、应用案例"></a>五、应用案例</h2><h3 id="1-集合处理"><a href="#1-集合处理" class="headerlink" title="1. 集合处理"></a>1. 集合处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; names = Arrays.asList(<span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-string">&quot;Bob&quot;</span>, <span class="hljs-string">&quot;Charlie&quot;</span>);<br><br><span class="hljs-comment">// 过滤 + 转换 + 消费</span><br>names.stream()<br>     .filter(s -&gt; s.length() &gt; <span class="hljs-number">3</span>)         <span class="hljs-comment">// Predicate</span><br>     .map(String::toUpperCase)            <span class="hljs-comment">// Function</span><br>     .forEach(System.out::println);       <span class="hljs-comment">// Consumer</span><br></code></pre></td></tr></table></figure><h3 id="2-工厂模式"><a href="#2-工厂模式" class="headerlink" title="2. 工厂模式"></a>2. 工厂模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Map&lt;String, Supplier&lt;Shape&gt;&gt; shapeFactory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>shapeFactory.put(<span class="hljs-string">&quot;circle&quot;</span>, Circle::<span class="hljs-keyword">new</span>);<br>shapeFactory.put(<span class="hljs-string">&quot;square&quot;</span>, Square::<span class="hljs-keyword">new</span>);<br><br><span class="hljs-type">Shape</span> <span class="hljs-variable">shape</span> <span class="hljs-operator">=</span> shapeFactory.get(<span class="hljs-string">&quot;circle&quot;</span>).get();<br></code></pre></td></tr></table></figure><hr><h2 id="六、性能优化"><a href="#六、性能优化" class="headerlink" title="六、性能优化"></a>六、性能优化</h2><ol><li><p><strong>避免自动装箱</strong>：优先使用原始类型特化接口  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 低效写法</span><br>Function&lt;Integer, Integer&gt; f = i -&gt; i * <span class="hljs-number">2</span>; <br><br><span class="hljs-comment">// 高效写法</span><br><span class="hljs-type">IntUnaryOperator</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> i -&gt; i * <span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure></li><li><p><strong>缓存 Lambda 表达式</strong>：对重复使用的表达式进行复用  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Predicate&lt;String&gt; LENGTH_3 = s -&gt; s.length() == <span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure></li><li><p><strong>谨慎使用并行流</strong>：仅在数据量大且无状态操作时启用  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">list.parallelStream().map(...) <br></code></pre></td></tr></table></figure></li></ol><hr><h2 id="附录：JDK-函数式接口全表"><a href="#附录：JDK-函数式接口全表" class="headerlink" title="附录：JDK 函数式接口全表"></a>附录：JDK 函数式接口全表</h2><table><thead><tr><th>接口分类</th><th>核心接口</th><th>原始类型特化接口（示例）</th><th>二元接口</th></tr></thead><tbody><tr><td><strong>生产型</strong></td><td><code>Supplier&lt;T&gt;</code></td><td><code>IntSupplier</code>, <code>DoubleSupplier</code></td><td>-</td></tr><tr><td><strong>消费型</strong></td><td><code>Consumer&lt;T&gt;</code></td><td><code>IntConsumer</code>, <code>DoubleConsumer</code></td><td><code>BiConsumer&lt;T,U&gt;</code></td></tr><tr><td><strong>判断型</strong></td><td><code>Predicate&lt;T&gt;</code></td><td><code>IntPredicate</code>, <code>DoublePredicate</code></td><td><code>BiPredicate&lt;T,U&gt;</code></td></tr><tr><td><strong>转换型</strong></td><td><code>Function&lt;T,R&gt;</code></td><td><code>IntFunction&lt;R&gt;</code>, <code>ToIntFunction&lt;T&gt;</code></td><td><code>BiFunction&lt;T,U,R&gt;</code></td></tr></tbody></table><hr>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Path 常用方法介绍</title>
    <link href="/java/file.html"/>
    <url>/java/file.html</url>
    
    <content type="html"><![CDATA[<p>Path 常用方法介绍</p><h3 id="一、Path"><a href="#一、Path" class="headerlink" title="一、Path"></a>一、Path</h3><h4 id="1、路径构建"><a href="#1、路径构建" class="headerlink" title="1、路径构建"></a>1、路径构建</h4><p>支持多级目录<br>当路径为相对路径时，构建的路径基于用于工作目录(<code>System.getProperty(&quot;user.dir&quot;)</code>);当路径为绝对路径时，构建的路径为绝对路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Paths.get(<span class="hljs-string">&quot;path&quot;</span>);<br>Paths.get(<span class="hljs-string">&quot;path&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>);<br>Paths.get(<span class="hljs-string">&quot;/home&quot;</span>, <span class="hljs-string">&quot;path&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="2、resolve、resolveSibling组合路径"><a href="#2、resolve、resolveSibling组合路径" class="headerlink" title="2、resolve、resolveSibling组合路径"></a>2、<code>resolve</code>、<code>resolveSibling</code>组合路径</h4><p><code>this.resolve(other)</code>:<br><code>other</code>可以为<code>Path</code>也可以为字符路径  </p><ul><li>如果<code>other</code>是绝对路径，则结果就是<code>other</code></li><li>如果<code>other</code>是相对路径，则结果为 <code>this + other</code> 构成的路径<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Path</span> <span class="hljs-variable">base</span> <span class="hljs-operator">=</span> Paths.get(<span class="hljs-string">&quot;/home/path&quot;</span>);<br><span class="hljs-type">Path</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> base.resolve(<span class="hljs-string">&quot;work&quot;</span>);<br>输出：/home/path/work<br><br><span class="hljs-type">Path</span> <span class="hljs-variable">base</span> <span class="hljs-operator">=</span> Paths.get(<span class="hljs-string">&quot;/home/path&quot;</span>);<br><span class="hljs-type">Path</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> base.resolve(<span class="hljs-string">&quot;/home/work&quot;</span>);<br>输出：/home/work<br></code></pre></td></tr></table></figure></li></ul><p><code>this.resolveSibling(other)</code>:<br>解析指定路径的父路径产生其兄弟路径  </p><ul><li>如果<code>other</code>是绝对路径，则结果就是<code>other</code></li><li>如果<code>other</code>是相对路径，则结果为<code>this</code>的父路径拼接<code>other</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Path</span> <span class="hljs-variable">base</span> <span class="hljs-operator">=</span> Paths.get(<span class="hljs-string">&quot;/home/path&quot;</span>);<br><span class="hljs-type">Path</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> base.resolveSibling(<span class="hljs-string">&quot;work&quot;</span>);<br>输出：/home/work<br><br><span class="hljs-type">Path</span> <span class="hljs-variable">base</span> <span class="hljs-operator">=</span> Paths.get(<span class="hljs-string">&quot;/home/path&quot;</span>);<br><span class="hljs-type">Path</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> base.resolveSibling(<span class="hljs-string">&quot;/home/work&quot;</span>);<br>输出：/home/work<br></code></pre></td></tr></table></figure></li></ul><h4 id="3、relativize相对路径解析"><a href="#3、relativize相对路径解析" class="headerlink" title="3、relativize相对路径解析"></a>3、<code>relativize</code>相对路径解析</h4><p>相对于<code>other</code>的路径，即有当前路径访问<code>other</code>的相对路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Path</span> <span class="hljs-variable">base</span> <span class="hljs-operator">=</span> Paths.get(<span class="hljs-string">&quot;/home/path&quot;</span>);<br><span class="hljs-type">Path</span> <span class="hljs-variable">other</span> <span class="hljs-operator">=</span> Paths.get(<span class="hljs-string">&quot;/home/user/work&quot;</span>);<br><span class="hljs-type">Path</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> base.relativize(other);<br>输出：../user/work<br></code></pre></td></tr></table></figure><h4 id="4、toAbsolutePath转为绝对路径"><a href="#4、toAbsolutePath转为绝对路径" class="headerlink" title="4、toAbsolutePath转为绝对路径"></a>4、<code>toAbsolutePath</code>转为绝对路径</h4><p>生成的绝对路径可能会包含<code>.</code>,<code>..</code><br>例如基于<code>relativize</code>生成的绝对路径为:<code>/Users/user/Workspace/../user/work</code></p><h4 id="5、normalize路径格式化"><a href="#5、normalize路径格式化" class="headerlink" title="5、normalize路径格式化"></a>5、<code>normalize</code>路径格式化</h4><p>移除路径中的<code>.</code>,<code>..</code>等冗余的路径元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">对 /Users/user/Workspace/../user/work 执行normalize后 /Users/user/user/work<br></code></pre></td></tr></table></figure><h4 id="6、其他"><a href="#6、其他" class="headerlink" title="6、其他"></a>6、其他</h4><p><code>getParent</code>:返回父路径或者null<br><code>getFileName</code>:返回该路径的最后一个部件<br><code>getRoot</code>:返回该路径的根路径</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Path</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java中的正则表达式</title>
    <link href="/java/regexp.html"/>
    <url>/java/regexp.html</url>
    
    <content type="html"><![CDATA[<h3 id="1、正则表达式语法"><a href="#1、正则表达式语法" class="headerlink" title="1、正则表达式语法"></a>1、正则表达式语法</h3><table><thead><tr><th>表达式</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>字符</td><td></td><td></td></tr><tr><td><strong>.</strong></td><td>除换行符以外的任何字符，或者在DOTALL设置时表示任意字符</td><td>单独字符中的点不需要转义，后边跟着量词才有意义</td></tr><tr><td><code>\a,\e,\f,\n,\r,\t</code></td><td>响铃符，转义符，换页符，换行符，回车符，指标符</td><td>\n</td></tr><tr><td>字符类</td><td></td><td></td></tr><tr><td><code>[^...]</code></td><td>某个字符类的补集</td><td><code>[^\d\s]</code></td></tr><tr><td><code>[...&amp;&amp;...]</code></td><td>字符集的交集</td><td><code>[\p&#123;L&#125;&amp;&amp;[^A-Za-z]]</code></td></tr><tr><td><code>\d,\D</code></td><td>数字[0-9]\d+；它的补集</td><td></td></tr><tr><td><code>\w,\W</code></td><td>单词字符[a-zA-Z0-9]；它的补集</td><td></td></tr><tr><td><code>\s,\S</code></td><td>空白字符[ \n\r\t\f\x{8}]；他的补集</td><td></td></tr><tr><td><code>\h,\v,\H,\V</code></td><td>水平空白字符、垂直空白字符；他们的补集</td><td></td></tr><tr><td>群组</td><td></td><td></td></tr><tr><td><code>(X)</code></td><td>捕获X的匹配</td><td><code>([^&#39;]*)</code>捕获的是被引用的文本</td></tr><tr><td><code>\n</code></td><td>第<code>n</code>组</td><td><code>([&#39;&quot;]).*\1</code>可以匹配<code>&#39;Fred&#39;</code>和<code>&quot;Fred&quot;</code>,但是不能匹配<code>&quot;Fred&#39;</code></td></tr><tr><td>量词（默认为贪婪模式，尽可能的匹配）</td><td></td><td></td></tr><tr><td><code>X?</code></td><td>0或1次</td><td></td></tr><tr><td><code>X*</code></td><td>出现0次或多次</td><td></td></tr><tr><td><code>X+</code></td><td>至少出现一次</td><td></td></tr><tr><td><code>X&#123;n&#125;,X&#123;n,&#125;,X&#123;n,m&#125;</code></td><td>n个X，至少n个X，n到m个X</td><td></td></tr><tr><td><code>Q?</code>,其中Q是一个量词表达式</td><td>非贪婪模式，先尝试匹配最短模式,Q是一个无上限的量词</td><td><code>&#123;3&#125;</code>:只匹配<code>123</code>, <code>&#123;3,&#125;</code>:默认匹配全部<code>123...</code>，<code>&#123;3,&#125;</code>:匹配<code>123</code></td></tr><tr><td>边界匹配</td><td></td><td></td></tr><tr><td><code>^,$</code></td><td>输入的开头和结尾</td><td></td></tr><tr><td><code>\A,\Z,\z</code></td><td>输入的开头，输入的结尾，输入的绝对结尾</td><td></td></tr><tr><td><code>\b,\B</code></td><td>单词边界，非单词边界</td><td></td></tr><tr><td><code>R</code></td><td>Unicode行分隔符</td><td></td></tr><tr><td><code>\G</code></td><td>前一个匹配的结尾</td><td></td></tr><tr><td>其他</td><td></td><td></td></tr><tr><td><code>-</code></td><td>范围表示</td><td>0-3表示0，1，2，3</td></tr></tbody></table><h3 id="2、编译标志"><a href="#2、编译标志" class="headerlink" title="2、编译标志"></a>2、编译标志</h3><p><code>Pattern.compile(&quot;&quot;, Pattern.CASE_INSENSITIVE + Pattern.UNICODE_CASE)</code></p><table><thead><tr><th>标志</th><th>描述</th></tr></thead><tbody><tr><td><code>Pattern.CASE_INSENSITIVE或r</code></td><td>匹配字符时忽略字母的大小写，默认只考虑<code>US ASCII</code>字符</td></tr><tr><td><code>Pattern.UNICODE_CASE</code></td><td>与<code>CASE_INSENSITIVE</code>组合使用的时候，用<code>Unicode</code>字母的大小写来匹配</td></tr><tr><td><code>Pattern.UNICODE_CHARACTER_CLASS或U</code></td><td>选择<code>Unicode</code>字符类代替<code>POSIX</code>，其中蕴含了<code>UNICODE_CASE</code></td></tr><tr><td><code>Pattern.MULTILINE或m</code></td><td><code>^和$匹配行的开头和结尾，而不是整个输入的开头和结尾</code></td></tr><tr><td><code>Pattern.UNIX_LINES或d</code></td><td>在多行模式中匹配<code>^</code>和<code>$</code>时，只有<code>\n</code>被识别成行终止符</td></tr><tr><td><code>Pattern.DOTALL或s</code></td><td>**.**匹配所有字符，包含行终止符</td></tr><tr><td><code>Pattern.COMMENTS或x</code></td><td>空白字符和注释(从#到行末尾)将被忽略</td></tr><tr><td><code>Pattern.LITERAL</code></td><td>该模式将被逐字地采纳，必须精确匹配，因字母大小写而造成的差异除外</td></tr><tr><td><code>Pattern.CANON_EQ</code></td><td>考虑<code>Unicode</code>字符规范的等价性</td></tr></tbody></table><h3 id="3、示例"><a href="#3、示例" class="headerlink" title="3、示例"></a>3、示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">text</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;This is my personal info. My cellphone &quot;</span> +<br>                <span class="hljs-string">&quot;number 15301234567 and email probiecoder@gmail.com.Today i will learn regex&quot;</span>;<br></code></pre></td></tr></table></figure><h4 id="简单数值匹配"><a href="#简单数值匹配" class="headerlink" title="简单数值匹配"></a>简单数值匹配</h4><blockquote><p>默认模式-贪婪模式，尽可能的多匹配</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">regex</span>  <span class="hljs-operator">=</span> <span class="hljs-string">&quot;\\d&#123;3,&#125;&quot;</span>;<br><span class="hljs-type">Pattern</span> <span class="hljs-variable">pattern</span> <span class="hljs-operator">=</span> Pattern.compile(regex);<br><span class="hljs-type">Matcher</span> <span class="hljs-variable">matcher</span> <span class="hljs-operator">=</span> pattern.matcher(text);<br><span class="hljs-keyword">if</span> (matcher.find()) &#123;<br>    System.out.println(matcher.group());<br>&#125;<br>输出:<span class="hljs-number">15301234567</span><br></code></pre></td></tr></table></figure><blockquote><p>非贪婪模式</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">修改 regex = <span class="hljs-string">&quot;\\d&#123;3,&#125;&quot;</span><br>输出:<span class="hljs-number">153</span><br></code></pre></td></tr></table></figure><h4 id="email匹配"><a href="#email匹配" class="headerlink" title="email匹配"></a>email匹配</h4><p>涉及到 <strong>或</strong> 的使用<br>限制email后缀 <code>gmail.com qq.com 163.com</code> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">regex</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;\\w&#123;3,&#125;@(gmail|qq|163).com&quot;</span>;<br><span class="hljs-type">Pattern</span> <span class="hljs-variable">pattern</span> <span class="hljs-operator">=</span> Pattern.compile(regex);<br><span class="hljs-type">Matcher</span> <span class="hljs-variable">matcher</span> <span class="hljs-operator">=</span> pattern.matcher(text);<br><span class="hljs-keyword">if</span> (matcher.find()) &#123;<br>    System.out.println(matcher.group());<br>&#125;<br>输出: probiecoder<span class="hljs-meta">@gmail</span>.com<br></code></pre></td></tr></table></figure><h4 id="限定字符匹配区域"><a href="#限定字符匹配区域" class="headerlink" title="限定字符匹配区域[]"></a>限定字符匹配区域<code>[]</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">[Jj]ava<br>匹配java、Java<br></code></pre></td></tr></table></figure><h4 id="分组匹配"><a href="#分组匹配" class="headerlink" title="分组匹配"></a>分组匹配</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">text</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;java,Java,aJava,iJava&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">regex</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;\\w+,(Java),aJava,(iJava)&quot;</span>;<br><span class="hljs-type">Pattern</span> <span class="hljs-variable">pattern</span> <span class="hljs-operator">=</span> Pattern.compile(regex);<br><span class="hljs-type">Matcher</span> <span class="hljs-variable">matcher</span> <span class="hljs-operator">=</span> pattern.matcher(text);<br><span class="hljs-keyword">if</span> (matcher.find()) &#123;<br>    System.out.println(matcher.group());   <span class="hljs-comment">// 输出整个匹配</span><br>    System.out.println(matcher.groupCount());  <span class="hljs-comment">// 匹配分组数</span><br>    System.out.println(matcher.group(<span class="hljs-number">1</span>));  <span class="hljs-comment">// 输出Java</span><br>    System.out.println(matcher.group(<span class="hljs-number">2</span>));  <span class="hljs-comment">// 输出iJava</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>正则表达式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java忽略https证书验证</title>
    <link href="/2025/08/25/java/2020-03-30-Java%E5%BF%BD%E7%95%A5https%E8%AF%81%E4%B9%A6%E9%AA%8C%E8%AF%81/"/>
    <url>/2025/08/25/java/2020-03-30-Java%E5%BF%BD%E7%95%A5https%E8%AF%81%E4%B9%A6%E9%AA%8C%E8%AF%81/</url>
    
    <content type="html"><![CDATA[<p>Java忽略https证书验证</p><p>   项目开发过程中，尤其内部项目可能会用到自签名证书，这个时候就需要忽略对证书的验证。</p><p>版本环境：  </p><blockquote><p>jdk 1.8<br>httpclient-4.5.5</p></blockquote><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> HttpComponentsClientHttpRequestFactory httpRequesetFactory;<br><br><span class="hljs-keyword">static</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">SSLContext</span> <span class="hljs-variable">sslContext</span> <span class="hljs-operator">=</span> SSLContextBuilder.creaet()<br>                        .loadTrustMaterial(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TrustAllStrategy</span>());<br>                        .build();<br><br>        <span class="hljs-type">HostnameVerifier</span> <span class="hljs-variable">allowAllHosts</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NoopHostnameVerifier</span>();<br>        <span class="hljs-type">SSLConnectionSocketFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SSLConnectionSocketFactory</span>(sslContext, allowAllHosts);<br><br>        <span class="hljs-type">CloseableHttpClient</span> <span class="hljs-variable">httpClient</span> <span class="hljs-operator">=</span> HttpClients.custom()<br>                .setSSLSocketFactory(factory)<br>                .setMacConnTotal(<span class="hljs-number">1000</span>)<br>                .setMaxConnPerRoute(<span class="hljs-number">200</span>)  <span class="hljs-comment">// 单个路由地址请求并发数</span><br>                .build();<br><br>        httpRequesetFactory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpComponentsClientHttpRequestFactory</span>(httpClient);<br>    &#125; <span class="hljs-keyword">catch</span> (Exeception e) &#123;<br>        log.error(e.getMessage, e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Http接口参数下划线转为驼峰式</title>
    <link href="/java/paramsformat.html"/>
    <url>/java/paramsformat.html</url>
    
    <content type="html"><![CDATA[<h3 id="1、背景"><a href="#1、背景" class="headerlink" title="1、背景"></a>1、背景</h3><p class="note note-info">Spring Boot项目</p>1、第三方系统接口参数格式为下划线形式,例如 `access_token`2、我方系统要求字段属性格式为驼峰式(或sonar要求)<h3 id="2、整体处理方式"><a href="#2、整体处理方式" class="headerlink" title="2、整体处理方式"></a>2、整体处理方式</h3><p>在对应实体类层级增加<code>JsonNaming</code>注解，同时属性字段定义为驼峰式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.PropertyNamingStrategy;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.annotation.JsonNaming;<br><br><span class="hljs-meta">@JsonNaming(value = PropertyNamingStrategy.SnakeCaseStrategy.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Token</span> &#123;<br>    <span class="hljs-keyword">private</span> String appAccessToken<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>GroovyShell使用不当引起的内存泄漏分析</title>
    <link href="/java/groovy-shell.html"/>
    <url>/java/groovy-shell.html</url>
    
    <content type="html"><![CDATA[<h4 id="1、背景"><a href="#1、背景" class="headerlink" title="1、背景"></a>1、背景</h4><h4 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h4><p>项目中会使用<code>Groovy</code>动态计算字符串脚本，运行一段时间后监控发现内存使用占比较高。</p><h4 id="二、问题原因分析"><a href="#二、问题原因分析" class="headerlink" title="二、问题原因分析"></a>二、问题原因分析</h4><h5 id="1、dump堆文件分析"><a href="#1、dump堆文件分析" class="headerlink" title="1、dump堆文件分析"></a>1、<code>dump</code>堆文件分析</h5><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">jmap -<span class="hljs-keyword">dump</span>:format=b,<span class="hljs-keyword">file</span>=<span class="hljs-keyword">dump</span>.hprof &lt;pid&gt;<br></code></pre></td></tr></table></figure><h5 id="2、使用MAT分析堆文件"><a href="#2、使用MAT分析堆文件" class="headerlink" title="2、使用MAT分析堆文件"></a>2、使用MAT分析堆文件</h5><p><img src="https://raw.githubusercontent.com/duwei0227/picbed/main/202407171538033.png" alt="memory leak"></p><p>分析堆文件可以查看到有一块区域内存使用较多，疑似存在泄漏问题，进一步查看  <code>Duplicate Classes</code>查看是否存在重复对象</p><p><img src="https://raw.githubusercontent.com/duwei0227/picbed/main/202407171541093.png" alt="duplicate classes"></p><p>此时考虑<code>Groovy</code>执行存在内存泄漏的问题。</p><h5 id="3、代码分析"><a href="#3、代码分析" class="headerlink" title="3、代码分析"></a>3、代码分析</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">var</span> <span class="hljs-variable">groovyShell</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GroovyShell</span>();<br><span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> groovyShell.evaluate(scriptContent);<br></code></pre></td></tr></table></figure><p><code>Groovy</code>在执行脚本前会见字符串内容通过反射的形式转为<code>Class</code>文件，每次都会通过反射创建一个 <code>Script</code> 实例对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Script <span class="hljs-title function_">newScript</span><span class="hljs-params">(Class&lt;? extends Script&gt; scriptClass, Binding context)</span> <span class="hljs-keyword">throws</span> InstantiationException, IllegalAccessException, InvocationTargetException, NoSuchMethodException &#123;<br>    Script script;<br>    <span class="hljs-keyword">try</span> &#123;<br>        Constructor&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Script</span>&gt; constructor = scriptClass.getConstructor(Binding.class);<br>        script = constructor.newInstance(context);<br>    &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException e) &#123;<br>        <span class="hljs-comment">// Fallback for non-standard &quot;Script&quot; classes.</span><br>        script = scriptClass.getDeclaredConstructor().newInstance();<br>        script.setBinding(context);<br>    &#125;<br>    <span class="hljs-keyword">return</span> script;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过反射创建对象时会加载执行 <code>GroovyObjectSupport.getDefaultMetaClass</code>;最终的问题在于 <code>org.codehaus.groovy.reflection.ClassInfo</code>定义了一个<code>static</code>类型的<code>GlobalClassSet</code>,在<code>GlobalClassSet</code>中会创建一个<code>ManagedConcurrentLinkedQueue</code>,队列中会一直追加通过<code>ClassInfo</code>包裹的<code>Script</code>实例信息。</p><p>分析到此可以基本得出由于<code>Script</code>的每次反射创建，队列中的实例数目一直在增加，垃圾回收时无法释放；而由于执行的脚本定义本身时固定的，变化的时运行时绑定的变量信息，可以考虑将 <code>Scripit</code> 实例信息进行缓存</p><h5 id="4、代码优化"><a href="#4、代码优化" class="headerlink" title="4、代码优化"></a>4、代码优化</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ConcurrentHashMap&lt;String, Script&gt; scriptCacheMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;();  <span class="hljs-comment">// 存储Scripit对象</span><br><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">executeScript</span><span class="hljs-params">(String script)</span> &#123;<br>    <span class="hljs-type">var</span> <span class="hljs-variable">groovyShell</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GroovyShell</span>();<br><br>    <span class="hljs-comment">// 计算脚本 md5</span><br>    <span class="hljs-type">var</span> <span class="hljs-variable">scriptMd5</span> <span class="hljs-operator">=</span> genSourceCacheKey(scriptContent);<br><br>    <span class="hljs-comment">// 此处不考虑并发的问题，并发访问时，多解析脚本内容，不会导致数据的不安全</span><br>    Script groovyScript;<br>    <span class="hljs-keyword">if</span> (scriptCacheMap.containsKey(scriptMd5)) &#123;<br>        groovyScript = scriptCacheMap.get(scriptMd5);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        groovyScript = groovyShell.parse(scriptContent);<br>        scriptCacheMap.put(scriptMd5, groovyScript);<br>    &#125;<br><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> groovyScript.run();<br>&#125;<br><br><span class="hljs-keyword">private</span> String <span class="hljs-title function_">genSourceCacheKey</span><span class="hljs-params">(String script)</span> &#123;<br>    <span class="hljs-comment">// 此处与groovy计算脚本md5保持一致</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">return</span> EncodingGroovyMethods.md5(script);<br>    &#125; <span class="hljs-keyword">catch</span> (NoSuchAlgorithmException e) &#123;<br>        <span class="hljs-comment">// TODO Auto-generated catch block</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GroovyRuntimeException</span>(e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此处调用<code>parse</code>解析字符串脚本时未加锁，即使在多线程并发场景，产生的结果仅仅为多解析几次，<code>Script</code>实例信息存在覆盖的情况，不存在数据不安全的问题。如果加锁还会存在性能损失问题，得不偿失。</p><h4 id="三、其他"><a href="#三、其他" class="headerlink" title="三、其他"></a>三、其他</h4><h5 id="1、部分文章介绍由于脚本文件名称随即产生引起泄漏"><a href="#1、部分文章介绍由于脚本文件名称随即产生引起泄漏" class="headerlink" title="1、部分文章介绍由于脚本文件名称随即产生引起泄漏"></a>1、部分文章介绍由于脚本文件名称随即产生引起泄漏</h5><p>答：实际定位测试时不存在该问题，每次创建<code>Script</code>对象前生成的文件名称都为 <code>Script1.groovy</code>，分析<code>GroovyShell</code>代码可以查看到获取文件名称方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">counter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">protected</span> String <span class="hljs-title function_">generateScriptName</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Script&quot;</span> + counter.incrementAndGet() + <span class="hljs-string">&quot;.groovy&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2、生产环境和本地验证配置"><a href="#2、生产环境和本地验证配置" class="headerlink" title="2、生产环境和本地验证配置"></a>2、生产环境和本地验证配置</h5><table><thead><tr><th></th><th>生产环境</th><th>验证环境</th></tr></thead><tbody><tr><td><code>Spring Boot</code></td><td><code>2.0.6</code></td><td><code>3.3.1</code></td></tr><tr><td><code>JDK</code></td><td><code>1.8</code></td><td><code>21</code></td></tr><tr><td><code>Groovy</code></td><td><code>3.0.6</code></td><td><code>4.0.22</code></td></tr></tbody></table><p><code>pom.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.groovy<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>groovy-all<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.22<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Groovy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>配置运算表达式通过BigDecimal包裹</title>
    <link href="/java/groovy-script.html"/>
    <url>/java/groovy-script.html</url>
    
    <content type="html"><![CDATA[<p>需求场景：</p><p>通过页面配置算术运算，支持在实例化运行时，根据配置的变量动态计算表达式的值，由于考虑到变量的值可能包含字符串、数字、浮点等不同情况，甚至需要支持金额运算时，为保证结果一致性，转为 <code>BigDecimal</code>。</p><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Objects;<br><span class="hljs-keyword">import</span> java.util.Stack;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ComputeValueUtil</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">evaluate</span><span class="hljs-params">(List&lt;String&gt; expressions)</span> &#123;<br>        Stack&lt;String&gt; values = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>        Stack&lt;String&gt; operators = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (String expression : expressions) &#123;<br>            <span class="hljs-keyword">if</span> (Objects.equals(expression, <span class="hljs-string">&quot;(&quot;</span>)) &#123;<br>                operators.push(expression);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Objects.equals(expression, <span class="hljs-string">&quot;)&quot;</span>)) &#123;<br>                <span class="hljs-keyword">while</span> (!<span class="hljs-string">&quot;(&quot;</span>.equals(operators.peek())) &#123;<br>                    values.push(applyOperation(values.pop(), values.pop(), operators.pop()));<br>                &#125;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">leftHand</span> <span class="hljs-operator">=</span> values.pop();<br>                values.push(<span class="hljs-string">&quot;(&quot;</span> + leftHand + <span class="hljs-string">&quot;)&quot;</span>);<br>                <span class="hljs-comment">// 弹出左括号</span><br>                operators.pop();<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (isOperator(expression)) &#123;<br>                <span class="hljs-keyword">while</span> (!operators.isEmpty() &amp;&amp; hasPrecedence(expression, operators.peek())) &#123;<br>                    values.push(applyOperation(values.pop(), values.pop(), operators.pop()));<br>                &#125;<br>                operators.push(expression);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 变量</span><br>                values.push(<span class="hljs-string">&quot;new BigDecimal(&quot;</span> + expression + <span class="hljs-string">&quot;)&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (!operators.isEmpty()) &#123;<br>            values.push(applyOperation(values.pop(), values.pop(), operators.pop()));<br>        &#125;<br>        <span class="hljs-keyword">return</span> values.pop();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isOperator</span><span class="hljs-params">(String op)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;+&quot;</span>.equals(op) || <span class="hljs-string">&quot;-&quot;</span>.equals(op) || <span class="hljs-string">&quot;*&quot;</span>.equals(op) || <span class="hljs-string">&quot;/&quot;</span>.equals(op);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasPrecedence</span><span class="hljs-params">(String op1, String op2)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;(&quot;</span>.equals(op2) || <span class="hljs-string">&quot;)&quot;</span>.equals(op2)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> (!<span class="hljs-string">&quot;*&quot;</span>.equals(op1) &amp;&amp; !<span class="hljs-string">&quot;/&quot;</span>.equals(op1)) || (!<span class="hljs-string">&quot;+&quot;</span>.equals(op2) &amp;&amp; <span class="hljs-string">&quot;-&quot;</span>.equals(op2));<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">applyOperation</span><span class="hljs-params">(String b, String a, String op)</span> &#123;<br>        <span class="hljs-keyword">switch</span> (op) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;+&quot;</span>:<br>                <span class="hljs-keyword">return</span> a + <span class="hljs-string">&quot;.add(&quot;</span> + b + <span class="hljs-string">&quot;)&quot;</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;-&quot;</span>:<br>                <span class="hljs-keyword">return</span> a + <span class="hljs-string">&quot;.subtract(&quot;</span> + b + <span class="hljs-string">&quot;)&quot;</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;*&quot;</span>:<br>                <span class="hljs-keyword">return</span> a + <span class="hljs-string">&quot;.multiply(&quot;</span> + b + <span class="hljs-string">&quot;)&quot;</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;/&quot;</span>:<br>                <span class="hljs-keyword">return</span> a + <span class="hljs-string">&quot;.divide(&quot;</span> + b + <span class="hljs-string">&quot;, 4, RoundingMode.HALF_UP)&quot;</span>; <span class="hljs-comment">// 使用4位小数精度和四舍五入模式</span><br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Groovy,算术运算</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Arthas常用命令使用</title>
    <link href="/java/arthas.html"/>
    <url>/java/arthas.html</url>
    
    <content type="html"><![CDATA[<h2 id="一、启动Arthas"><a href="#一、启动Arthas" class="headerlink" title="一、启动Arthas"></a>一、启动Arthas</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">java -jar arthas-boot.jar<br></code></pre></td></tr></table></figure><h2 id="二、表达式核心变量"><a href="#二、表达式核心变量" class="headerlink" title="二、表达式核心变量"></a>二、表达式核心变量</h2><p>匹配表达式和观察表达式核心判断变量</p><table><thead><tr><th align="right">变量名</th><th align="left">变量解释</th></tr></thead><tbody><tr><td align="right">loader</td><td align="left">本次调用类所在的 ClassLoader</td></tr><tr><td align="right">clazz</td><td align="left">本次调用类的 Class 引用</td></tr><tr><td align="right">method</td><td align="left">本次调用方法反射引用</td></tr><tr><td align="right">target</td><td align="left">本次调用类的实例</td></tr><tr><td align="right">params</td><td align="left">本次调用参数列表，这是一个数组，如果方法是无参方法则为空数组</td></tr><tr><td align="right">returnObj</td><td align="left">本次调用返回的对象。当且仅当 <code>isReturn==true</code> 成立时候有效，表明方法调用是以正常返回的方式结束。如果当前方法无返回值 <code>void</code>，则值为 null</td></tr><tr><td align="right">throwExp</td><td align="left">本次调用抛出的异常。当且仅当 <code>isThrow==true</code> 成立时有效，表明方法调用是以抛出异常的方式结束。</td></tr><tr><td align="right">isBefore</td><td align="left">辅助判断标记，当前的通知节点有可能是在方法一开始就通知，此时 <code>isBefore==true</code> 成立，同时 <code>isThrow==false</code> 和 <code>isReturn==false</code>，因为在方法刚开始时，还无法确定方法调用将会如何结束。</td></tr><tr><td align="right">isThrow</td><td align="left">辅助判断标记，当前的方法调用以抛异常的形式结束。</td></tr><tr><td align="right">isReturn</td><td align="left">辅助判断标记，当前的方法调用以正常返回的形式结束。</td></tr></tbody></table><p>官网文档：<a href="https://arthas.aliyun.com/doc/advice-class.html">https://arthas.aliyun.com/doc/advice-class.html</a></p><h2 id="三、命令列表"><a href="#三、命令列表" class="headerlink" title="三、命令列表"></a>三、命令列表</h2><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>dashboard</code></td><td>当前系统的实时数据面板–直观查看CPU和内存使用</td></tr><tr><td><code>getstatic</code></td><td>查看类的静态属性</td></tr><tr><td><code>heapdump</code></td><td>打印堆信息，类似与 <code>jmap</code></td></tr><tr><td><code>jvm</code></td><td>查看当前<code>JVM</code>的信息</td></tr><tr><td><code>logger</code></td><td>查看和修改<code>logger</code></td></tr><tr><td><code>memory</code></td><td>查看<code>JVM</code>的内存信息</td></tr><tr><td><code>thread</code></td><td>查看当前<code>JVM</code>的线程堆栈信息</td></tr><tr><td><code>sysenv</code></td><td>查看<code>JVM</code>的环境变量–系统环境变量信息</td></tr><tr><td><code>sysprop</code></td><td>查看和修改<code>JVM</code>的系统属性</td></tr><tr><td><code>vmoption</code></td><td>查看和修改 JVM 里诊断相关的 option</td></tr><tr><td><code>classloader</code></td><td>查看<code>classloader</code>信息</td></tr><tr><td><code>jad</code></td><td>反编译已加载类的源码</td></tr><tr><td><code>sc</code></td><td>查看<code>JVM</code>已加载的类信息</td></tr><tr><td><code>sm</code></td><td>查看<code>JVM</code>已加载类的方法信息</td></tr><tr><td><code>stack</code></td><td>输出当前方法被调用的调用路径</td></tr><tr><td><code>trace</code></td><td>方法内部调用路径，并输出方法路径上每个节点的耗时</td></tr><tr><td><code>watch</code></td><td>方法执行数据观测</td></tr></tbody></table><h3 id="1、dashboard"><a href="#1、dashboard" class="headerlink" title="1、dashboard"></a>1、dashboard</h3><p><strong>参数说明</strong></p><table><thead><tr><th align="right">参数名称</th><th align="left">参数说明</th></tr></thead><tbody><tr><td align="right"><code>-i</code></td><td align="left">刷新实时数据的时间间隔 (ms)，默认 5000ms</td></tr><tr><td align="right"><code>-n</code></td><td align="left">刷新实时数据的次数</td></tr></tbody></table><p><strong>使用示例</strong></p><p>每3秒刷新一次数据，总共刷新3次</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">dashbaord -i 3000 -n 3<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/duwei0227/picbed/main/image-20250507083504830.png" alt="image-20250507083504830"></p><p><strong>CPU数据说明</strong></p><ul><li>ID: Java 级别的线程 ID，注意这个 ID 不能跟 jstack 中的 nativeID 一一对应。</li><li>NAME: 线程名</li><li>GROUP: 线程组名</li><li>PRIORITY: 线程优先级, 1~10 之间的数字，越大表示优先级越高</li><li>STATE: 线程的状态</li><li>CPU%: 线程的 cpu 使用率。比如采样间隔 1000ms，某个线程的增量 cpu 时间为 100ms，则 cpu 使用率&#x3D;100&#x2F;1000&#x3D;10%</li><li>DELTA_TIME: 上次采样之后线程运行增量 CPU 时间，数据格式为<code>秒</code></li><li>TIME: 线程运行总 CPU 时间，数据格式为<code>分:秒</code></li><li>INTERRUPTED: 线程当前的中断位状态</li><li>DAEMON: 是否是 daemon 线程</li></ul><h3 id="2、getstatic"><a href="#2、getstatic" class="headerlink" title="2、getstatic"></a>2、getstatic</h3><p>查看类的静态属性，支持查看<code>private</code>和<code>public</code>属性，官网推荐直接使用<code>ognl</code></p><p><strong>语法</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">getstatic [-c &lt;value&gt;] [-x &lt;value&gt;] [-E] class-pattern field-pattern [express] <br></code></pre></td></tr></table></figure><p><strong>参数说明</strong></p><table><thead><tr><th>参数名称</th><th>参数说明</th></tr></thead><tbody><tr><td><code>-c</code></td><td>指定<code>classloader</code>哈希值，可以通过<code>sc -d</code>获取哈希值或 <code>classloader -t</code>获取</td></tr><tr><td><code>class-pattern</code></td><td>需要查看的类全路径</td></tr><tr><td><code>field-pattern</code></td><td>需要查看的属性,支持模糊匹配,如果添加选项<code>-E</code>时，会按照严格模式匹配</td></tr></tbody></table><p><strong>使用示例</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs shell">// 获取属性<br><span class="hljs-meta prompt_">[arthas@14691]$ </span><span class="language-bash">getstatic cn.probiecoder.arthas_demo.TestController map</span><br>field: map<br>@HashMap[<br>    @String[key1]:@String[value1],<br>    @String[key2]:@String[value2],<br>    @String[key3]:@String[value3],<br>]<br>  <br>// 查看类下边所有属性<br><span class="hljs-meta prompt_">[arthas@14691]$ </span><span class="language-bash">getstatic -c 76ed5528 cn.probiecoder.arthas_demo.TestController *</span><br>field: MESSAGE<br>@String[Hello, Arthas!]<br>field: GETSTATIC_MESSAGE<br>@String[getStaticMessage]<br>field: map<br>@HashMap[<br>    @String[key1]:@String[value1],<br>    @String[key2]:@String[value2],<br>    @String[key3]:@String[value3],<br>]<br><br>// 模糊匹配属性    <br><span class="hljs-meta prompt_">[arthas@14691]$ </span><span class="language-bash">getstatic -c 76ed5528 cn.probiecoder.arthas_demo.TestController *M*</span><br>field: MESSAGE<br>@String[Hello, Arthas!]<br>field: GETSTATIC_MESSAGE<br>@String[getStaticMessage]<br>       <br></code></pre></td></tr></table></figure><h3 id="3、heapdump"><a href="#3、heapdump" class="headerlink" title="3、heapdump"></a>3、heapdump</h3><p>打印堆信息，类似于<code>jmap</code></p><p><strong>语法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">heapdump [-l] [file]<br></code></pre></td></tr></table></figure><p><strong>参数说明</strong></p><table><thead><tr><th>参数名称</th><th>参数说明</th></tr></thead><tbody><tr><td><code>-l</code></td><td>只 <code>dump live</code> 对象，不添加时<code>dump</code>所有对象</td></tr></tbody></table><p><strong>使用示例</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">// dump所有对象<br><span class="hljs-meta prompt_">[arthas@14691]$ </span><span class="language-bash">heapdump /home/duwei/arthas-output/heap.hprof</span><br>Dumping heap to /home/duwei/arthas-output/heap.hprof ...<br>Heap dump file created<br><br>// dump live 对象<br><span class="hljs-meta prompt_">[arthas@14691]$ </span><span class="language-bash">heapdump -l /home/duwei/arthas-output/heap_live.hprof</span><br>Dumping heap to /home/duwei/arthas-output/heap_live.hprof ...<br>Heap dump file created<br></code></pre></td></tr></table></figure><p><code>dump</code>时需要确保路径已经创建，否则会报错：<code>heap dump error: No such file or directory</code></p><h3 id="4、jvm"><a href="#4、jvm" class="headerlink" title="4、jvm"></a>4、jvm</h3><p>查看当前 JVM 信息，会输出当前内存、线程、GC等信息</p><p><strong>语法</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">jvm<br></code></pre></td></tr></table></figure><p><strong>使用示例</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">// 会输出以下类别信息，具体内容省略<br><span class="hljs-meta prompt_">[arthas@14691]$ </span><span class="language-bash">jvm</span><br> RUNTIME                                                                                           <br> CLASS-LOADING                                                                                           <br> COMPILATION                                                                                         <br> GARBAGE-COLLECTORS                                                                        <br> MEMORY-MANAGERS                                                                                  <br> MEMORY                                                                                <br> OPERATING-SYSTEM                                                                                    <br> THREAD                                                                                         <br> FILE-DESCRIPTOR                             <br></code></pre></td></tr></table></figure><h3 id="logger"><a href="#logger" class="headerlink" title="logger"></a>logger</h3><p>查看<code>logger</code> 信息，更新 <code>logger level</code>，临时调整日志记录级别用于问题定位会很有用</p><p><strong>语法</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">logger [-c &lt;value&gt;] [-l &lt;value&gt;] [-n &lt;value&gt;] <br></code></pre></td></tr></table></figure><p><strong>参数说明</strong></p><table><thead><tr><th>参数名称</th><th>参数说明</th></tr></thead><tbody><tr><td><code>-c</code></td><td>指定<code>classloader</code>，可以通过<code>sc -d</code>获取<code>classloader</code>的哈希值</td></tr><tr><td><code>-l</code></td><td>指定<code>level</code>级别</td></tr><tr><td><code>-n</code></td><td>指定<code>logger</code>名字，这里可以为类路径</td></tr></tbody></table><p><strong>使用示例</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">// 查看所有的logger<br><span class="hljs-meta prompt_">[arthas@44455]$ </span><span class="language-bash">logger</span><br> name             ROOT                                                                                  <br> class            ch.qos.logback.classic.Logger                                                         <br> classLoader      jdk.internal.loader.ClassLoaders$AppClassLoader@76ed5528                              <br> classLoaderHash  76ed5528                                                                              <br> level            INFO                                                                                  <br> effectiveLevel   INFO  <br> <br>// 更新指定类或包的日志级别<br><span class="hljs-meta prompt_">[arthas@44455]$ </span><span class="language-bash">logger -n cn.probiecoder.arthas_demo.TestController -l debug</span><br>Update logger level success.<br><span class="hljs-meta prompt_">[arthas@44455]$ </span><span class="language-bash">logger -n cn.probiecoder.arthas_demo -l debug</span><br>Update logger level success.<br><br></code></pre></td></tr></table></figure><h3 id="5、memory"><a href="#5、memory" class="headerlink" title="5、memory"></a>5、memory</h3><p>查看<code>JVM</code>内存信息，如果只查看<code>heap</code>和<code>nonheap</code>使用情况，可以使用<code>dashboard</code>动态刷新监控</p><p><strong>语法</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">memory<br></code></pre></td></tr></table></figure><p><strong>使用示例</strong></p><p>可以使用<code>java.nio.ByteBuffer.allocateDirect(1024 * 1024 * 10); // 10MB</code>分配对外直接内存</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">[arthas@44455]$ </span><span class="language-bash">memory</span> <br>Memory                                       used          total          max            usage          <br>heap                                         37M           76M            3918M          0.95%          <br>g1_eden_space                                10M           40M            -1             25.00%         <br>g1_old_gen                                   25M           34M            3918M          0.66%          <br>g1_survivor_space                            1M            2M             -1             65.71%         <br>nonheap                                      86M           88M            -1             97.96%         <br>codeheap_&#x27;non-nmethods&#x27;                      1M            2M             5M             33.16%         <br>metaspace                                    57M           58M            -1             98.68%         <br>codeheap_&#x27;profiled_nmethods&#x27;                 15M           15M            117M           13.29%         <br>compressed_class_space                       6M            7M             1024M          0.67%          <br>codeheap_&#x27;non-profiled_nmethods&#x27;             5M            5M             117M           4.28%          <br>mapped                                       0K            0K             -              0.00%          <br>direct                                       14M           14M            -              100.00%        <br>mapped - &#x27;non-volatile memory&#x27;               0K            0K             -              0.00%  <br></code></pre></td></tr></table></figure><h3 id="6、thread"><a href="#6、thread" class="headerlink" title="6、thread"></a>6、thread</h3><p>查看当前线程信息，查看线程的堆栈</p><p><strong>语法</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">thread [--all] [-b] [-i &lt;value&gt;] [--state &lt;value&gt;] [-n &lt;value&gt;] [id]    <br></code></pre></td></tr></table></figure><p><strong>参数说明</strong></p><table><thead><tr><th>参数名称</th><th>参数说明</th></tr></thead><tbody><tr><td><code>--all</code></td><td>列出所有线程</td></tr><tr><td><code>-b</code></td><td>找出当前阻塞其他线程的线程</td></tr><tr><td><code>-i</code></td><td>指定采样时间间隔</td></tr><tr><td><code>--state</code></td><td>根据线程状态过滤，<code>NEW, RUNNABLE, TIMED_WAITING, WAITING, BLOCKED, TERMINATED</code></td></tr><tr><td><code>-n</code></td><td>指定要查看的线程数量，按照<code>CPU</code>使用率降序排序</td></tr><tr><td><code>id</code></td><td>线程id，查看指定线程的堆栈信息</td></tr></tbody></table><p><strong>使用示例</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell">// 死锁检测<br><span class="hljs-meta prompt_">[arthas@44455]$ </span><span class="language-bash">thread -b</span><br>&quot;Thread-4&quot; Id=80 BLOCKED on java.lang.Object@12ea72d3 owned by &quot;Thread-5&quot; Id=81<br>    at app//cn.probiecoder.arthas_demo.TestController.lambda$0(TestController.java:89)<br>    -  blocked on java.lang.Object@12ea72d3<br>    -  locked java.lang.Object@16629d6a &lt;---- but blocks 1 other threads!<br>    at app//cn.probiecoder.arthas_demo.TestController$$Lambda/0x00007fa97475dcd0.run(Unknown Source)<br>    at java.base@21.0.6/java.lang.Thread.runWith(Thread.java:1596)<br>    at java.base@21.0.6/java.lang.Thread.run(Thread.java:1583)<br><br><br>// 根据状态过滤<br><span class="hljs-meta prompt_">[arthas@44455]$ </span><span class="language-bash">thread --state BLOCKED</span><br>Threads Total: 39, NEW: 0, RUNNABLE: 17, BLOCKED: 2, WAITING: 13, TIMED_WAITING: 7, TERMINATED: 0       <br>ID  NAME                      GROUP        PRIORITY STATE    %CPU    DELTA_TI TIME     INTERRU DAEMON   <br>80  Thread-4                  main         5        BLOCKED  0.02    0.000    0:0.002  false   true     <br>81  Thread-5                  main         5        BLOCKED  0.01    0.000    0:0.002  false   true     <br>  <br>// 查看最繁忙的3个线程，采样时间为3秒内<br><span class="hljs-meta prompt_">[arthas@44455]$ </span><span class="language-bash">thread -i 3000 -n 3</span><br><br></code></pre></td></tr></table></figure><h3 id="7、sysenv"><a href="#7、sysenv" class="headerlink" title="7、sysenv"></a>7、sysenv</h3><p>查看当前<code>JVM</code>的环境属性，操作系统环境变量信息</p><p><strong>语法</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sysenv [env-name]  <br></code></pre></td></tr></table></figure><p><strong>参数说明</strong></p><table><thead><tr><th>参数名称</th><th>参数说明</th></tr></thead><tbody><tr><td><code>env-name</code></td><td>可选，默认展示所有的环境属性，指定时输出指定属性值</td></tr></tbody></table><p><strong>使用示例</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">[arthas@44455]$ </span><span class="language-bash">sysenv LANG</span><br> KEY                  VALUE                                                                             <br>--------------------------------------------------------------------------------------------------------<br> LANG                 en_US.UTF-8   <br></code></pre></td></tr></table></figure><h3 id="8、sysprop"><a href="#8、sysprop" class="headerlink" title="8、sysprop"></a>8、sysprop</h3><p>查看或修改当前<code>JVM</code> 的系统属性</p><p><strong>语法</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sysprop [property-name] [property-value]  <br></code></pre></td></tr></table></figure><p><strong>参数说明</strong></p><table><thead><tr><th>参数名称</th><th>参数说明</th></tr></thead><tbody><tr><td><code>property-name</code></td><td>属性名称,默认输出所有属性</td></tr><tr><td><code>property-value</code></td><td>属性修改后的值</td></tr></tbody></table><p><strong>使用示例</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">[arthas@44455]$ </span><span class="language-bash">sysenv spring.profiles.active</span><br> KEY                  VALUE                                                                             <br>--------------------------------------------------------------------------------------------------------<br> spring.profiles.active  null            <br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_">[arthas@44455]$ </span><span class="language-bash">sysprop spring.profiles.active dev</span><br>Successfully changed the system property.<br> KEY                  VALUE                                                                             <br>--------------------------------------------------------------------------------------------------------<br> spring.profiles.active  dev                                                                               <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">[arthas@44455]$ </span><span class="language-bash">sysprop spring.profiles.active</span> <br> KEY                  VALUE                                                                             <br>--------------------------------------------------------------------------------------------------------<br> spring.profiles.active  dev                                                                               <br></code></pre></td></tr></table></figure><h3 id="9、vmoption"><a href="#9、vmoption" class="headerlink" title="9、vmoption"></a>9、vmoption</h3><p>查看，更新 VM 诊断相关的参数，在更新<code>option</code>时，<code>option</code>需要支持运行时动态更新</p><p><strong>语法</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vmoption [name] [value]                                                                         <br></code></pre></td></tr></table></figure><p><strong>参数说明</strong></p><table><thead><tr><th>参数名称</th><th>参数说明</th></tr></thead><tbody><tr><td><code>name</code></td><td><code>option</code>的名称</td></tr><tr><td><code>value</code></td><td>修改后的值</td></tr></tbody></table><p><strong>使用示例</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">// 查看指定option<br><span class="hljs-meta prompt_">[arthas@44455]$ </span><span class="language-bash">vmoption HeapDumpBeforeFullGC</span><br> KEY                       VALUE                     ORIGIN                    WRITEABLE                <br>--------------------------------------------------------------------------------------------------------<br> HeapDumpBeforeFullGC      false                     DEFAULT                   true                     <br>// 修改指定option<br><span class="hljs-meta prompt_">[arthas@44455]$ </span><span class="language-bash">vmoption HeapDumpBeforeFullGC <span class="hljs-literal">true</span></span><br>Successfully updated the vm option.<br> NAME                  BEFORE-VALUE  AFTER-VALUE                                                        <br>-------------------------------------------------                                                       <br> HeapDumpBeforeFullGC  false         true                                                               <br><span class="hljs-meta prompt_">[arthas@44455]$ </span><span class="language-bash">vmoption HeapDumpBeforeFullGC</span><br> KEY                       VALUE                     ORIGIN                    WRITEABLE                <br>--------------------------------------------------------------------------------------------------------<br> HeapDumpBeforeFullGC      true                      MANAGEMENT                true      <br></code></pre></td></tr></table></figure><h3 id="10、classloader"><a href="#10、classloader" class="headerlink" title="10、classloader"></a>10、classloader</h3><p>展示<code>JVM</code>中所有的<code>classloader</code>信息，可以加载指定类</p><p><strong>语法</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">classloader -t<br></code></pre></td></tr></table></figure><p><strong>参数说明</strong></p><table><thead><tr><th>参数名称</th><th>参数说明</th></tr></thead><tbody><tr><td><code>-t</code></td><td>查看<code>ClassLoader</code>的继承树</td></tr></tbody></table><p><strong>使用示例</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">[arthas@44455]$ </span><span class="language-bash">classloader -t</span><br>+-BootstrapClassLoader                                                                                  <br>+-jdk.internal.loader.ClassLoaders$PlatformClassLoader@4ca1ec81                                         <br>  +-com.taobao.arthas.agent.ArthasClassloader@734cb0e4                                                  <br>  +-jdk.internal.loader.ClassLoaders$AppClassLoader@76ed5528                                            <br>    +-sun.reflect.misc.MethodUtil@1af4d51c   <br></code></pre></td></tr></table></figure><h3 id="11、jad"><a href="#11、jad" class="headerlink" title="11、jad"></a>11、jad</h3><p>反编译指定已加载类的源码</p><p><strong>语法</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">jad [-c &lt;value&gt;] [--lineNumber &lt;value&gt;] [--source-only] class-pattern [method-name] <br></code></pre></td></tr></table></figure><p><strong>参数说明</strong></p><table><thead><tr><th>参数名称</th><th>参数说明</th></tr></thead><tbody><tr><td><code>-c</code></td><td>指定<code>classloader</code>的哈希值</td></tr><tr><td><code>--lineNumber</code></td><td>反编译以后是否显示行号 <code>true</code> <code>false</code></td></tr><tr><td><code>--source-only</code></td><td>默认情况下，反编译结果里会带有<code>ClassLoader</code>信息，通过<code>--source-only</code>选项，可以只打印源代码</td></tr><tr><td><code>class-pattern</code></td><td>需要反编译的类路径</td></tr><tr><td><code>method-name</code></td><td>方法名，支持指定方法反编译</td></tr></tbody></table><p><strong>使用示例</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">[arthas@44455]$ </span><span class="language-bash">jad -c 76ed5528 --source-only --lineNumber <span class="hljs-literal">false</span> cn.probiecoder.arthas_demo.TestController  threadPoolBlock</span><br>@GetMapping(value=&#123;&quot;/thread_pool_block&quot;&#125;)<br>public String threadPoolBlock() &#123;<br>    ExecutorService executor = Executors.newFixedThreadPool(1);<br>    executor.submit(() -&gt; &#123;<br>        try &#123;<br>            Thread.sleep(10000L);<br>        &#125;<br>        catch (InterruptedException e) &#123;sc<br>            Thread.currentThread().interrupt();<br>        &#125;<br>    &#125;);<br>    return &quot;Thread pool block test started&quot;;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="12、sc-search-class"><a href="#12、sc-search-class" class="headerlink" title="12、sc(search-class)"></a>12、sc(search-class)</h3><p>查看 JVM 已加载的类信息</p><p><strong>语法</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sc [-d] [-c &lt;value&gt;] [-f] class-pattern<br></code></pre></td></tr></table></figure><p><strong>参数说明</strong></p><table><thead><tr><th>参数名称</th><th>参数说明</th></tr></thead><tbody><tr><td><code>-c</code></td><td>指定<code>classloader</code>哈希值</td></tr><tr><td><code>-f</code></td><td>输出当前类的成员变量信息（需要配合参数-d 一起使用）</td></tr><tr><td><code>-d</code></td><td>输出当前类的详细信息，包括这个类所加载的原始文件来源、类的声明、加载的 ClassLoader 等详细信息。<br/>如果一个类被多个 ClassLoader 所加载，则会出现多次</td></tr><tr><td><code>class-pattern</code></td><td>类路径</td></tr></tbody></table><p><strong>使用示例</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">[arthas@73802]$ </span><span class="language-bash">sc -d -f cn.probiecoder.arthas_demo.TestController</span> <br> class-info        cn.probiecoder.arthas_demo.TestController                                            <br> name              cn.probiecoder.arthas_demo.TestController                                            <br> isInterface       false                                                                                <br> isAnnotation      false                                                                                <br> isEnum            false                                                                                <br> isAnonymousClass  false     <br> .....<br></code></pre></td></tr></table></figure><h3 id="13、sm"><a href="#13、sm" class="headerlink" title="13、sm"></a>13、sm</h3><p>查看已加载类的方法信息</p><p><strong>语法</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sm [-c &lt;value&gt;][-d] class-pattern [method-pattern] <br></code></pre></td></tr></table></figure><p><strong>参数说明</strong></p><table><thead><tr><th>参数名称</th><th>参数说明</th></tr></thead><tbody><tr><td><code>-c</code></td><td>指定<code>classloader</code>哈希值</td></tr><tr><td><code>-d</code></td><td>输出当前类的详细信息，包括这个类所加载的原始文件来源、类的声明、加载的 ClassLoader 等详细信息。<br/>如果一个类被多个 ClassLoader 所加载，则会出现多次</td></tr><tr><td><code>class-pattern</code></td><td>类路径</td></tr><tr><td><code>method-pattern</code></td><td>方法名称，支持*模糊匹配，不指定时列出当前类下所有的方法</td></tr></tbody></table><p><strong>使用示例</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">[arthas@73802]$ </span><span class="language-bash">sm -d cn.probiecoder.arthas_demo.TestController throwException</span><br> declaring-class  cn.probiecoder.arthas_demo.TestController                                             <br> method-name      throwException                                                                        <br> modifier         public                                                                                <br> annotation       org.springframework.web.bind.annotation.GetMapping                                    <br> parameters                                                                                             <br> return           void                                                                                  <br> exceptions                                                                                             <br> classLoaderHash  76ed5528 <br> <br>// 列出所有方法<br><span class="hljs-meta prompt_">[arthas@73802]$ </span><span class="language-bash">sm cn.probiecoder.arthas_demo.TestController</span> <br>cn.probiecoder.arthas_demo.TestController &lt;init&gt;()V<br>cn.probiecoder.arthas_demo.TestController throwException()V<br>......<br></code></pre></td></tr></table></figure><h3 id="14、stack"><a href="#14、stack" class="headerlink" title="14、stack"></a>14、stack</h3><p>输出当前方法被调用的调用路径</p><p><strong>语法</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">stack class-pattern [method-pattern] [condition-express] <br></code></pre></td></tr></table></figure><p><strong>参数说明</strong></p><table><thead><tr><th>参数名称</th><th>参数说明</th></tr></thead><tbody><tr><td><code>class-pattern</code></td><td>类路径</td></tr><tr><td><code>method-pattern</code></td><td>监控方法，可选，为空时可以跟踪类下所有方法</td></tr><tr><td><code>condition-express</code></td><td>条件表达式，一个合法的<code>ognl</code>表达式，可以参考核心变量，<code>#cost</code>：执行时间，使用条件表达式时，监控方法需要指定</td></tr></tbody></table><p><strong>使用示例</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">// 按照时间过滤<br>stack cn.probiecoder.arthas_demo.TestController longRunning &#x27;#cost&gt;2000&#x27;<br><br>// 匹配第一个参数的长度为3<br>stack cn.probiecoder.arthas_demo.TestController hello params[0].length==3<br></code></pre></td></tr></table></figure><h3 id="15、trace"><a href="#15、trace" class="headerlink" title="15、trace"></a>15、trace</h3><p>方法内部调用路径，并输出方法路径上的每个节点上耗时，可以用于分析方法执行性能瓶颈</p><p><strong>语法</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">trace [-n &lt;value&gt;] [--skipJDKMethod &lt;value&gt;] class-pattern method-pattern [condition-express]<br></code></pre></td></tr></table></figure><p><strong>参数说明</strong></p><table><thead><tr><th>参数名称</th><th>参数说明</th></tr></thead><tbody><tr><td><code>-n</code></td><td>指定捕捉结果的次数，达到限制次数时直接停止监听</td></tr><tr><td><code>--skipJDKMethod</code></td><td>是否包含 jdk 里的函数调用，默认<code>false</code></td></tr><tr><td><code>class-pattern</code></td><td>类路径</td></tr><tr><td><code>method-pattern</code></td><td>方法名，支持*通配匹配</td></tr><tr><td><code>condition-express</code></td><td>过滤条件表达式，符合<code>ognl</code>的表达式，支持<code>#cost</code>进行时间过滤</td></tr></tbody></table><p><strong>使用示例</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">// 启用jdk方法调用监控，限制监听次数<br><span class="hljs-meta prompt_">[arthas@73802]$ </span><span class="language-bash">trace --skipJDKMethod <span class="hljs-literal">true</span> -n 1 cn.probiecoder.arthas_demo.TestController longRunning <span class="hljs-string">&#x27;#cost&gt;2000&#x27;</span></span><br>Press Q or Ctrl+C to abort.<br>Affect(class count: 1 , method count: 1) cost in 35 ms, listenerId: 20<br>`---ts=2025-05-08 01:16:40.324;thread_name=http-nio-8080-exec-2;id=46;is_daemon=true;priority=5;TCCL=org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedWebappClassLoader@5e8507f1<br>    `---[2200.492615ms] cn.probiecoder.arthas_demo.TestController:longRunning()<br><br>Command execution times exceed limit: 1, so command will exit. You can set it with -n option.<br><br></code></pre></td></tr></table></figure><h3 id="16、watch"><a href="#16、watch" class="headerlink" title="16、watch"></a>16、watch</h3><p>函数执行数据观测，能观察到的范围为：<code>返回值</code>、<code>抛出异常</code>、<code>入参</code>，通过编写 OGNL 表达式进行对应变量的查看</p><p><strong>语法</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">watch [-b] [-e] [-f] [-s] [-n &lt;value&gt;] class-pattern method-pattern [express] [condition-express]  <br></code></pre></td></tr></table></figure><p><strong>参数说明</strong></p><table><thead><tr><th>参数名称</th><th>参数说明</th></tr></thead><tbody><tr><td><code>-b</code></td><td>在<strong>函数调用之前</strong>观察，由于观察事件点是在函数调用前，此时返回值或异常均不存在</td></tr><tr><td><code>-e</code></td><td>在<strong>函数异常之后</strong>观察</td></tr><tr><td><code>-f</code></td><td>在<strong>函数结束之后</strong>(正常返回和异常返回)观察，默认值</td></tr><tr><td><code>-s</code></td><td>在<strong>函数成功返回之后</strong>观察</td></tr><tr><td><code>-n</code></td><td>执行监控次数</td></tr><tr><td><code>class-pattern</code></td><td>要监控的类路径</td></tr><tr><td><code>method-pattern</code></td><td>方法匹配模式，可以通过*进行通配匹配</td></tr><tr><td><code>express</code></td><td>观察表达式，默认值：<code>&#123;params, target, returnObj&#125;</code>，围绕<code>Advice</code>通知对象，<code>get</code>请求使用<code>params</code>观察时入参为空，需要使用<code>params[0]</code></td></tr><tr><td><code>condition-expression</code></td><td>条件表达式，合法的<code>ognl</code>表达式，根据条件过滤拦截</td></tr></tbody></table><p><strong>使用示例</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell">// 方法调用前监听<br><span class="hljs-meta prompt_">[arthas@73802]$ </span><span class="language-bash">watch -b cn.probiecoder.arthas_demo.TestController hello &#123;params[0],returnObj&#125;</span><br>Press Q or Ctrl+C to abort.<br>Affect(class count: 1 , method count: 1) cost in 28 ms, listenerId: 28<br>method=cn.probiecoder.arthas_demo.TestController.hello location=AtEnter<br>ts=2025-05-08 01:38:32.377; [cost=0.006553ms] result=@ArrayList[<br>    @String[waw],<br>    null,<br><br>// 限制监听次数<br><span class="hljs-meta prompt_">[arthas@73802]$ </span><span class="language-bash">watch -b -n 1 cn.probiecoder.arthas_demo.TestController hello &#123;params[0],returnObj&#125;</span><br>Press Q or Ctrl+C to abort.<br>Affect(class count: 1 , method count: 1) cost in 38 ms, listenerId: 29<br>method=cn.probiecoder.arthas_demo.TestController.hello location=AtEnter<br>ts=2025-05-08 01:41:43.892; [cost=0.022054ms] result=@ArrayList[<br>    @String[waw],<br>    null,<br>]<br>Command execution times exceed limit: 1, so command will exit. You can set it with -n option.<br><br></code></pre></td></tr></table></figure><h2 id="三、后台任务"><a href="#三、后台任务" class="headerlink" title="三、后台任务"></a>三、后台任务</h2><p>需要监控偶发性行为时，可以借助后台任务捕获，同时将捕获结果可以输出到文件</p><h3 id="1、执行后台任务"><a href="#1、执行后台任务" class="headerlink" title="1、执行后台任务"></a>1、执行后台任务</h3><p>在命令最后边添加 <strong><code>*</code></strong> 执行后台任务，命令不会阻断终端屏幕，可以继续执行其他任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">trace Class method &amp;<br></code></pre></td></tr></table></figure><h3 id="2、查看后台任务"><a href="#2、查看后台任务" class="headerlink" title="2、查看后台任务"></a>2、查看后台任务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">jobs<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">[arthas@<span class="hljs-number">252</span>]$ jobs<br>[<span class="hljs-number">10</span>]*<br>       Running           trace org.apache.aries.spifly.Util  storeContextClassloader &amp;<br>       execution count : <span class="hljs-number">0</span><br>       start time      : Mon May <span class="hljs-number">12</span> <span class="hljs-number">19</span>:<span class="hljs-number">33</span>:<span class="hljs-number">48</span> CST <span class="hljs-number">2025</span><br>       timeout date    : Tue May <span class="hljs-number">13</span> <span class="hljs-number">19</span>:<span class="hljs-number">33</span>:<span class="hljs-number">48</span> CST <span class="hljs-number">2025</span><br>       session         : eb3cedf4-75a1-488c-af93-df3405ea7398 (current)<br></code></pre></td></tr></table></figure><p>结果会输出任务id、任务状态，已执行捕获次数等信息</p><h3 id="3、停止命令"><a href="#3、停止命令" class="headerlink" title="3、停止命令"></a>3、停止命令</h3><p>异步执行的命令，如果希望停止，可执行&#96;kill <job-id></p><h3 id="4、任务输出重定向"><a href="#4、任务输出重定向" class="headerlink" title="4、任务输出重定向"></a>4、任务输出重定向</h3><p>可通过<code>&gt;</code>或者<code>&gt;&gt;</code>将任务输出结果输出到指定的文件中，可以和<code>&amp;</code>一起使用，实现 arthas 命令的后台异步任务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">trace Test t &gt;&gt; test.out &amp;</span><br></code></pre></td></tr></table></figure><h2 id="四、附录"><a href="#四、附录" class="headerlink" title="四、附录"></a>四、附录</h2><p>官方文档：<a href="https://arthas.aliyun.com/doc/quick-start.html">https://arthas.aliyun.com/doc/quick-start.html</a></p><p>OGNL表达式官网：<a href="https://commons.apache.org/dormant/commons-ognl/language-guide.html">https://commons.apache.org/dormant/commons-ognl/language-guide.html</a></p><p>命令参数：<code>[xx]</code>选项为可选参数</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>性能</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法概要介绍</title>
    <link href="/algorithms/introduce.html"/>
    <url>/algorithms/introduce.html</url>
    
    <content type="html"><![CDATA[<h3 id="一、对称算法"><a href="#一、对称算法" class="headerlink" title="一、对称算法"></a>一、对称算法</h3><p>对称算法使用一个密钥。给定一个明文和一个密钥，加密产生密文，其长度和明文大致相同。解密时，使用读密钥与加密密钥相同。</p><p>​ 对称算法主要有四种加密模式：</p><p>(1) 电子密码本模式 Electronic Code Book(ECB)</p><p>这种模式是最早采用和最简单的模式，它将加密的数据分成若干组，每组的大小跟加密密钥长度相同，然后每组都用相同的密钥进行加密。</p><p>其缺点是：电子编码薄模式用一个密钥加密消息的所有块，如果原消息中重复明文块，则加密消息中的相应密文块也会重复，因此，电子编码薄模式适于加密小消息。</p><p>（2）加密块链模式 Cipher Block Chaining(CBC)</p><p>CBC模式的加密首先也是将明文分成固定长度的块，然后将前面一个加密块输出的密文与下一个要加密的明文块进行异或操作，将计算结果再用密钥进行加密得到密文。第一明文块加密的时候，因为前面没有加密的密文，所以需要一个初始化向量。跟ECB方式不一样，通过连接关系，使得密文跟明文不再是一一对应的关系，破解起来更困难，而且克服了只要简单调换密文块可能达到目的的攻击。</p><p>（3）加密反馈模式 Cipher Feedback Mode(CFB)</p><p>面向字符的应用程序的加密要使用流加密法，可以使用加密反馈模式。在此模式下，数据用更小的单元加密，如可以是8位，这个长度小于定义的块长（通常是64位）。其加密步骤是：</p><p>a） 使用64位的初始化向量。初始化向量放在移位寄存器中，在第一步加密，产生相应的64位初始化密文；<br>b) 始化向量最左边的8位与明文前8位进行异或运算，产生密文第一部分（假设为c），然后将c传输到接收方；</p><p>c) 向量的位（即初始化向量所在的移位寄存器内容）左移8位，使移位寄存器最右边的8位为不可预测的数据，在其中填入c的内容；<br>d) 第1-3步，直到加密所有的明文单元。</p><p>解密过程相反</p><p>4）输出反馈模式 Output Feedback Mode(OFB)</p><p>输出反馈模式与CFB相似，惟一差别是，CFB中密文填入加密过程下一阶段，而在OFB中，初始化向量加密过程的输入填入加密过程下一阶段。</p><h3 id="二、摘要算法"><a href="#二、摘要算法" class="headerlink" title="二、摘要算法"></a>二、摘要算法</h3><p>摘要算法是一种能产生特殊输出格式的算法，这种算法的特点是：无论用户输入什么长度的原始数据，经过计算后输出的密文都是固定长度的，这种算法的原理是根据一定的运算规则对原数据进行某种形式的提取，这种提取就是摘要，被摘要的数据内容与原数据有密切联系，只要原数据稍有改变，输出的“摘要”便完全不同，因此，基于这种原理的算法便能对数据完整性提供较为健全的保障。但是，由于输出的密文是提取原数据经过处理的定长值，所以它已经不能还原为原数据，即消息摘要算法是不可逆的，理论上无法通过反向运算取得原数据内容，因此它通常只能被用来做数据完整性验证。</p><p>如今常用的“消息摘要”算法经历了多年验证发展而保留下来的算法已经不多，这其中包括MD2、MD4、MD5、SHA、SHA-1&#x2F;256&#x2F;383&#x2F;512等。</p><p>​ 常用的摘要算法主要有MD5和SHA256。D5的输出结果为16字节。</p><h3 id="三、公钥算法"><a href="#三、公钥算法" class="headerlink" title="三、公钥算法"></a>三、公钥算法</h3><p>在公钥密码系统中，加密和解密使用的是不同的密钥，这两个密钥之间存在着相互依存关系：即用其中任一个密钥加密的信息只能用另一个密钥进行解密。这使得通信双方无需事先交换密钥就可进行保密通信。其中加密密钥和算法是对外公开的，人人都可以通过这个密钥加密文件然后发给收信者，这个加密密钥又称为公钥；而收信者收到加密文件后,它可以使用他的解密密钥解密，这个密钥是由他自己私人掌管的，并不需要分发，因此又成称为私钥，这就解决了密钥分发的问题。</p><p>主要的公钥算法有：RSA、DSA、DH和ECC。</p><p>（1）RSA算法</p><p>当前最著名、应用最广泛的公钥系统RSA是在1978年，由美国麻省理工学院(MIT)的Rivest、Shamir和Adleman在题为《获得数字签名和公开钥密码系统的方法》的论文中提出的。它是一个基于数论的非对称(公开钥)密码体制，是一种分组密码体制。其名称来自于三个发明者的姓名首字母。 它的安全性是基于大整数素因子分解的困难性，而大整数因子分解问题是数学上的著名难题，至今没有有效的方法予以解决，因此可以确保RSA算法的安全性。RSA系统是公钥系统的最具有典型意义的方法，大多数使用公钥密码进行加密和数字签名的产品和标准使用的都是RSA算法。</p><p>RSA算法是第一个既能用于数据加密也能用于数字签名的算法，因此它为公用网络上信息的加密和鉴别提供了一种基本的方法。它通常是先生成一对RSA 密钥，其中之一是保密密钥，由用户保存；另一个为公开密钥，可对外公开，甚至可在网络服务器中注册，人们用公钥加密文件发送给个人，个人就可以用私钥解密接受。为提高保密强度，RSA密钥至少为500位长，一般推荐使用2048位。</p><p>RSA算法是R.Rivest、A.Shamir和L.Adleman于1977年在美国麻省理工学院开发，于1978年首次公布。</p><p>RSA公钥密码算法是目前网络上进行保密通信和数字签名的最有效的安全算法之一。RSA算法的安全性基于数论中大素数分解的困难性，所以，RSA需采用足够大的整数。因子分解越困难，密码就越难以破译，加密强度就越高。</p><p>其算法如下：</p><p>A. 选择两质数<em>p</em>、<em>q</em></p><p>B. 计算<em>n</em> &#x3D; <em>p * q</em></p><p>C. 计算<em>n</em>的欧拉函数Φ(<em>n</em>) &#x3D; (<em>p</em> - 1)(<em>q</em> - 1)</p><p>D. 选择整数<em>e</em>，使<em>e</em>与Φ(<em>n</em>)互质，且1 &lt; e &lt; Φ(<em>n</em>)</p><p>E. 计算<em>d</em>，使<em>d * e &#x3D; 1 mod</em> <em>Φ(n)</em></p><p>其中，公钥KU＝{<em>e, n</em>}，私钥KR&#x3D;{<em>d, n</em>}。</p><p>加密&#x2F;解密过程：</p><p>利用RSA加密，首先需将明文数字化，取长度小于log2n位的数字作为明文块。</p><p>对于明文块M和密文块C，加&#x2F;解密的形式如下：</p><p>加密： C &#x3D; Me mod n</p><p>解密： M &#x3D; Cd mod n &#x3D; (Me)d mod n &#x3D; Med mod n</p><p>RSA的安全性基于大数分解质因子的困难性。因为若n被分解为<em>n</em> &#x3D; <em>p * q</em>，则Φ(<em>n</em>)、<em>e</em>、<em>d</em>可依次求得。目前，因式分解速度最快的方法的时间复杂性为exp(sqrt(ln(n)lnln(n)))。统计数据表明，在重要应用中，使用512位的密钥已不安全，需要采用1024位的密钥。</p><p>（2）DSA算法</p><p>DSA（Digital Signature Algorithm，数字签名算法，用作数字签名标准的一部分），它是另一种公开密钥算法，它不能用作加密，只用作数字签名。DSA使用公开密钥，为接受者验证数据的完整性和数据发送者的身份。它也可用于由第三方去确定签名和所签数据的真实性。DSA算法的安全性基于解离散对数的困难性，这类签字标准具有较大的兼容性和适用性，成为网络安全体系的基本构件之一。</p><p>DSA签名算法中用到了以下参数：</p><p>p是L位长的素数，其中L从512到1024且是64的倍数。</p><p>q是160位长且与p-1互素的因子 ，其中h是小于p-1并且满足 大于1的任意数。</p><p>x是小于q的数。</p><p>另外，算法使用一个单向散列函数H（m）。标准指定了安全散列算法（SHA）。三个参数p，q和g是公开的，且可以被网络中所有的用户公有。私人密钥是x，公开密钥是y。</p><p>对消息m签名时：</p><p>（1） 发送者产生一个小于q的随机数k。</p><p>（2） 发送者产生：</p><p>r和s就是发送者的签名，发送者将它们发送给接受者。</p><p>（3） 接受者通过计算来验证签名：</p><p>如果v&#x3D;r，则签名有效。</p><p>（3）Diffie-Hellman密钥交换</p><p>DH算法是W.Diffie和M.Hellman提出的。此算法是最早的公钥算法。它实质是一个通信双方进行密钥协定的协议：两个实体中的任何一个使用自己的私钥和另一实体的公钥，得到一个对称密钥，这一对称密钥其它实体都计算不出来。DH算法的安全性基于有限域上计算离散对数的困难性。离散对数的研究现状表明：所使用的DH密钥至少需要1024位，才能保证有足够的中、长期安全。</p><p>(4) 椭圆曲线密码体制(ECC)</p><p>1985年，N. Koblitz和V. Miller分别独立提出了椭圆曲线密码体制(ECC)，其依据就是定义在椭圆曲线点群上的离散对数问题的难解性。</p><p>为了用椭圆曲线构造密码系统，首先需要找到一个单向陷门函数，椭圆曲线上的数量乘就是这样的单向陷门函数。</p><p>椭圆曲线的数量乘是这样定义的：设E为域K上的椭圆曲线，G为E上的一点，这个点被一个正整数k相乘的乘法定义为 k个G相加，因而有</p><p>kG &#x3D; G + G + … + G (共有k个G)</p><p>若存在椭圆曲线上的另一点N ≠ G，满足方程kG &#x3D; N。容易看出，给定k和G，计算N相对容易。而给定N和G，计算k &#x3D; logG N相对困难。这就是椭圆曲线离散对数问题。</p><p>离散对数求解是非常困难的。椭圆曲线离散对数问题比有限域上的离散对数问题更难求解。对于有理点数有大素数因子的椭圆离散对数问题，目前还没有有效的攻击方法。</p><p>参考：</p><p><a href="https://www.openssl.net.cn/">https://www.openssl.net.cn/</a></p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Docker使用错误汇总</title>
    <link href="/docker/errors.html"/>
    <url>/docker/errors.html</url>
    
    <content type="html"><![CDATA[<h3 id="一、Permission-Denied"><a href="#一、Permission-Denied" class="headerlink" title="一、Permission Denied"></a>一、Permission Denied</h3><p><code>Ubuntu</code>系统使用<code>snap</code>或<code>apt</code>安装完成后，在当前用户通过<code>docker</code>命令检查镜像等操作时，会提示 <code>permission denied</code>，此时可以通过增加 <code>sudo</code> 提升权限进行操作，如果不需要每次通过<code>sudo</code>操作，可以参考以下方式调整：</p><p>错误提示：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">permission denied <span class="hljs-keyword">while</span> trying <span class="hljs-built_in">to</span> connect <span class="hljs-built_in">to</span> <span class="hljs-keyword">the</span> Docker daemon <span class="hljs-built_in">socket</span> <span class="hljs-keyword">at</span> unix:<span class="hljs-comment">///var/run/docker.sock: Get &quot;http://%2Fvar%2Frun%2Fdocker.sock/v1.24/images/json&quot;: dial unix /var/run/docker.sock: connect: permission denied</span><br></code></pre></td></tr></table></figure><p>操作步骤(基于<code>ubuntu 24.04</code>)：<br>1、安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt install docker.io<br></code></pre></td></tr></table></figure><p>2、添加当前用户到<code>docker</code>组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> gpasswd -a 用户名 docker<br></code></pre></td></tr></table></figure><p>3、更新<code>docker</code>用户组</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">newgrp docker</span><br></code></pre></td></tr></table></figure><p>4、完成，检查</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">docker <span class="hljs-built_in">version</span> 或 docker images<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java知识点</title>
    <link href="/java/common.html"/>
    <url>/java/common.html</url>
    
    <content type="html"><![CDATA[<h3 id="1、Hibernate框架mysql数据库id主键自增"><a href="#1、Hibernate框架mysql数据库id主键自增" class="headerlink" title="1、Hibernate框架mysql数据库id主键自增"></a>1、Hibernate框架mysql数据库id主键自增</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span><br><span class="hljs-meta">@GenericGenerator(name = &quot;mySeq&quot;, strategy = &quot;increment&quot; )</span><br></code></pre></td></tr></table></figure><h3 id="2、Spring-Security去掉默认认证"><a href="#2、Spring-Security去掉默认认证" class="headerlink" title="2、Spring Security去掉默认认证"></a>2、Spring Security去掉默认认证</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"># spring boot <span class="hljs-number">2.</span>x<br><span class="hljs-meta">@SpringBootApplication(exclude = &#123;SecurityAutoConfiguration.class, ManagementWebSecurityAutoConfiguration.class&#125;)</span><br></code></pre></td></tr></table></figure><h3 id="3、字符串替换-或者"><a href="#3、字符串替换-或者" class="headerlink" title="3、字符串替换 $ 或者 \"></a>3、字符串替换 $ 或者 \</h3><h4 id="3-1-单个-符号-使用replace替换-–-能实现替换"><a href="#3-1-单个-符号-使用replace替换-–-能实现替换" class="headerlink" title="3.1 单个 $ 符号, 使用replace替换 – 能实现替换"></a>3.1 单个 $ 符号, 使用<code>replace</code>替换 – <strong>能实现替换</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">singleDollar</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc$sef&quot;</span>;<br>System.out.println(singleDollar.replace(<span class="hljs-string">&quot;$&quot;</span>, <span class="hljs-string">&quot;\\$\\&quot;</span>));<br>System.out.println(singleDollar.replace(<span class="hljs-string">&quot;$&quot;</span>, <span class="hljs-string">&quot;_&quot;</span>));<br><br><span class="hljs-comment">// 输出结果</span><br>abc\$\sef<br>abc_sef<br></code></pre></td></tr></table></figure><h4 id="3-2-多个-符号，使用replaceAll替换-–-未能完成替换"><a href="#3-2-多个-符号，使用replaceAll替换-–-未能完成替换" class="headerlink" title="3.2 多个 $ 符号，使用replaceAll替换 – 未能完成替换"></a>3.2 多个 $ 符号，使用<code>replaceAll</code>替换 – <strong>未能完成替换</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">multiDollar</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc$edf$mgl&quot;</span>;<br>System.out.println(multiDollar.replaceAll(<span class="hljs-string">&quot;\\\\$&quot;</span>, <span class="hljs-string">&quot;\\\\$\\\\&quot;</span>));<br>System.out.println(multiDollar.replaceAll(<span class="hljs-string">&quot;\\\\$&quot;</span>, <span class="hljs-string">&quot;_&quot;</span>));<br><br><span class="hljs-comment">// 输出结果</span><br>abc$edf$mgl<br>abc$edf$mgl<br></code></pre></td></tr></table></figure><h4 id="3-3-多个-符号，使用Matcher-quoteReplacement替换-–-完成替换且不需要太多的转义，推荐"><a href="#3-3-多个-符号，使用Matcher-quoteReplacement替换-–-完成替换且不需要太多的转义，推荐" class="headerlink" title="3.3 多个 $ 符号，使用Matcher.quoteReplacement替换  – 完成替换且不需要太多的转义，推荐"></a>3.3 多个 $ 符号，使用<code>Matcher.quoteReplacement</code>替换  – <strong>完成替换且不需要太多的转义，推荐</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">multiDollar</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc$edf$mgl&quot;</span>;<br>System.out.println(multiDollar.replaceAll(Matcher.quoteReplacement(<span class="hljs-string">&quot;$&quot;</span>), Matcher.quoteReplacement(<span class="hljs-string">&quot;\\$\\&quot;</span>)));<br>System.out.println(multiDollar.replaceAll(Matcher.quoteReplacement(<span class="hljs-string">&quot;$&quot;</span>), Matcher.quoteReplacement(<span class="hljs-string">&quot;_&quot;</span>)));<br><br><span class="hljs-comment">// 输出结果</span><br>abc\$\edf\$\mgl<br>abc_edf_mgl<br></code></pre></td></tr></table></figure><h4 id="3-4-单个-符号，使用replace替换-–-完成替换"><a href="#3-4-单个-符号，使用replace替换-–-完成替换" class="headerlink" title="3.4 单个 $ 符号，使用replace替换 – 完成替换"></a>3.4 单个 $ 符号，使用<code>replace</code>替换 – <strong>完成替换</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">singleSlash</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc\\abc&quot;</span>;<br>System.out.println(singleSlash.replace(<span class="hljs-string">&quot;\\&quot;</span>, <span class="hljs-string">&quot;\\\\&quot;</span>));<br>System.out.println(singleSlash.replace(<span class="hljs-string">&quot;\\&quot;</span>, <span class="hljs-string">&quot;_&quot;</span>));<br><br><span class="hljs-comment">// 输出结果</span><br>abc\\abc<br>abc_abc<br></code></pre></td></tr></table></figure><h4 id="3-5-多个-符号，使用replaceAll替换-–-可以替换"><a href="#3-5-多个-符号，使用replaceAll替换-–-可以替换" class="headerlink" title="3.5 多个 $ 符号，使用replaceAll替换 – 可以替换"></a>3.5 多个 $ 符号，使用<code>replaceAll</code>替换 – <strong>可以替换</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">multiSlash</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc\\edf\\mgl&quot;</span>;<br>System.out.println(multiSlash.replaceAll(<span class="hljs-string">&quot;\\\\&quot;</span>, <span class="hljs-string">&quot;\\\\\\\\&quot;</span>));<br>System.out.println(multiSlash.replaceAll(<span class="hljs-string">&quot;\\\\&quot;</span>, <span class="hljs-string">&quot;_&quot;</span>));<br><br><span class="hljs-comment">// 输出结果</span><br>abc\\edf\\mgl<br>abc_edf_mgl<br></code></pre></td></tr></table></figure><h4 id="3-6-多个-符号，使用Matcher-quoteReplacement替换-–-可以替换-推荐"><a href="#3-6-多个-符号，使用Matcher-quoteReplacement替换-–-可以替换-推荐" class="headerlink" title="3.6 多个 $ 符号，使用Matcher.quoteReplacement替换 – 可以替换,推荐"></a>3.6 多个 $ 符号，使用<code>Matcher.quoteReplacement</code>替换 – <strong>可以替换,推荐</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">multiSlash</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc\\edf\\mgl&quot;</span>;<br>System.out.println(multiSlash.replaceAll(Matcher.quoteReplacement(<span class="hljs-string">&quot;\\&quot;</span>), Matcher.quoteReplacement(<span class="hljs-string">&quot;\\\\&quot;</span>)));<br>System.out.println(multiSlash.replaceAll(Matcher.quoteReplacement(<span class="hljs-string">&quot;\\&quot;</span>), Matcher.quoteReplacement(<span class="hljs-string">&quot;_&quot;</span>)));<br><br><span class="hljs-comment">// 输出结果</span><br>abc\\edf\\mgl<br>abc_edf_mgl<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java单元测试</title>
    <link href="/java/test.html"/>
    <url>/java/test.html</url>
    
    <content type="html"><![CDATA[<p>Java单元测试</p><p>单元测试：只测试系统中最原子化的行为单元的自动化测试–测试核心逻辑</p><p>简单设计4原则：</p><blockquote><p>测试变绿–测试通过<br>没有重复–代码没有重复<br>揭示意图–测试什么功能<br>最少元素  </p></blockquote><p>单元测试策略：变红(单元测试)-&gt;变绿(烂代码)-&gt;重构(优化)</p><h3 id="测试替身"><a href="#测试替身" class="headerlink" title="测试替身"></a>测试替身</h3><blockquote><p>SUT System Under Test<br>DOC Dependence On Component</p></blockquote><h3 id="Mockito"><a href="#Mockito" class="headerlink" title="Mockito"></a>Mockito</h3><ul><li>Mock – 不关心数据的输入和输出，验证mock的方法是否被调用过<ul><li>验证行为</li><li>屏蔽行为</li></ul></li><li>Stub – 数据的伪造，替换真实数据<ul><li>状态模拟</li></ul></li><li>Spy<ul><li>假中有真</li></ul></li></ul><p>采用Mockito和PowerMockito进行单元测试<br>以下单元测试案例执行基于：<br>Spring Boot 1.5.6.RELEASE<br>Mockito 2.25.1<br>PowerMockito 2.0.2<br>Jacoco 0.8.2</p><h3 id="1、属性注入"><a href="#1、属性注入" class="headerlink" title="1、属性注入"></a>1、属性注入</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.test.util.ReflectionTestUtils;<br><br>ReflectionTestUtils.setField(被测试类, <span class="hljs-string">&quot;属性名&quot;</span>, 属性实际值);<br></code></pre></td></tr></table></figure><h3 id="2、调用方法中有-new-操作"><a href="#2、调用方法中有-new-操作" class="headerlink" title="2、调用方法中有 new 操作"></a>2、调用方法中有 new 操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 类级别使用如下注解</span><br><span class="hljs-meta">@RunWith(PowerMockRunner.class)</span><br><span class="hljs-comment">// 方法层使用如下注解</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-meta">@PrepareForTest(value = &#123;被测试类.class, 需要new的类.class&#125;)</span><br><br><span class="hljs-comment">// 例如：</span><br><span class="hljs-meta">@RunWith(PowerMockRunner.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTest</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-meta">@PrepareForTest(value = &#123;Test.class, Date.class&#125;)</span> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> PoweerMockito.mock(Date.class);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            PowerMockito.whenNew(Date.class).withNoArguments().thenReturn(date);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3、静态方法"><a href="#3、静态方法" class="headerlink" title="3、静态方法"></a>3、静态方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 类级别使用如下注解</span><br><span class="hljs-meta">@RunWith(PowerMockRunner.class)</span><br><span class="hljs-comment">// 方法层使用如下注解</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-meta">@PrepareForTest(value = &#123;被测试类.class, 需要使用的静态方法所属类.class&#125;)</span><br><br><span class="hljs-comment">// 例如：</span><br><br><span class="hljs-meta">@RunWith(PowerMockRunner.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTest</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-meta">@PrepareForTest(value = &#123;Test.class, EncodeUtils.class&#125;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>        PowerMockito.mockStatic(EncodeUtils.class);<br>        PowerMockito.<span class="hljs-keyword">when</span>(EncodeUtils.decript(passwd, key)).thenReturn(plainPwd);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4、一般方法"><a href="#4、一般方法" class="headerlink" title="4、一般方法"></a>4、一般方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// mock操作，提供</span><br>doReturn(xxx).<span class="hljs-keyword">when</span>(mockXX).executeMethod();<br>doThrow(Exception.class)<br>doNothing()<br><br><span class="hljs-comment">// 验证</span><br>verify(mockXX, times(调用次数)).executeMethod()<br><br></code></pre></td></tr></table></figure><h3 id="5、单元测试使用PowerMockito时，jacoco覆盖率无法兼容解决"><a href="#5、单元测试使用PowerMockito时，jacoco覆盖率无法兼容解决" class="headerlink" title="5、单元测试使用PowerMockito时，jacoco覆盖率无法兼容解决"></a>5、单元测试使用PowerMockito时，jacoco覆盖率无法兼容解决</h3><p>参考 <a href="https://github.com/powermock/powermock-examples-maven/blob/master/jacoco-offline/pom.xml">https://github.com/powermock/powermock-examples-maven/blob/master/jacoco-offline/pom.xml</a><br>生成html覆盖报告，可以修改为如下内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;execution&gt;<br>  &lt;id&gt;report&lt;/id&gt;<br>  &lt;phase&gt;prepare-<span class="hljs-keyword">package</span>&lt;/phase&gt;<br>  &lt;goals&gt;<br>      &lt;goal&gt;report&lt;/goal&gt;<br>  &lt;/goals&gt;<br>  &lt;configuration&gt;<br>      &lt;dataFile&gt;$&#123;project.build.directory&#125;/coverage.exec&lt;/dataFile&gt;<br>      &lt;outputDirectory&gt;$&#123;basedir&#125;/target/coverage-reports&lt;/outputDirectory&gt;<br>  &lt;/configuration&gt;<br>&lt;execution&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>BufferedReader使用记录</title>
    <link href="/java/bufferedreader.html"/>
    <url>/java/bufferedreader.html</url>
    
    <content type="html"><![CDATA[<p>BufferedReader使用记录</p><p>一种以缓冲方式读取字符IO流，可以指定缓冲空间大小，默认为8192 </p><p>常见读取有如下三种方式：</p><h4 id="1、readline"><a href="#1、readline" class="headerlink" title="1、readline()"></a>1、readline()</h4><p>按行读取，解析IO流中的<code>\n</code>、<code>\r</code>、<code>\r\n</code>作为读取结束依据，不会解析字符串中的<code>\n</code>、<code>\r</code><br>以普通文件为例：按照回车符作为每一行的结束<br>以<code>shell</code>或<code>python</code>脚本为例：以每一个<code>echo</code>或者<code>print</code>或者<code>log</code>输出结束<br>示例：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">String buffer;<br><span class="hljs-keyword">while</span> ((buffer = reader.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>    System.out.println(buffer);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2、read"><a href="#2、read" class="headerlink" title="2、read()"></a>2、read()</h4><p>一个字节一个的读取缓冲区，直到最后一个字节读取完成<br>示例：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> ((size = reader.read()) != -<span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-comment">// 此处使用println时，会在每一个字符后换行，不是想要的结果</span><br>    System.out.print((<span class="hljs-type">char</span>)size);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3、read-char-targetCharArray-int-off-int-length"><a href="#3、read-char-targetCharArray-int-off-int-length" class="headerlink" title="3、read(char[] targetCharArray, int off, int length)"></a>3、read(char[] targetCharArray, int off, int length)</h4><p><code>targetCharArray</code>: 将读取到的内容存储到该字符数组，如果读取内容小于字符数组大小，会默认填充值，需要做处理<br><code>off</code>: 偏移量，从什么位置开始读取，一般设置为0，从原点读取，每次完整的读取一个<code>char</code>数组<br><code>length</code>：从缓冲区读取大小<br>示例：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-type">char</span>[] readChar = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">1024</span>];  <span class="hljs-comment">// 字符数组大小自定义</span><br><span class="hljs-type">String</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">while</span> ((size = reader.read(readChar, <span class="hljs-number">0</span>, readChar.length)) != -<span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-comment">// 读取到的内容小于自定义字符数组，需要去除默认填充值</span><br>    <span class="hljs-keyword">if</span> (size &lt; readChar.length) &#123;<br>        <span class="hljs-type">char</span>[] newReaderChar = Arrays.copyOf(readChar, size);<br>        buffer = String.valueOf(newReaderChar);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        buffer = String.valueOf(readChar);<br>    &#125;<br>    System.out.println(buffer);<br>&#125;<br></code></pre></td></tr></table></figure><p>完整示例请访问：<a href="https://github.com/duwei0227/java-demo/blob/master/src/main/java/top/probiecoder/BufferedReaderDemo.java">BufferedReader</a></p><p><strong>如有理解不对之处，请指出，谢谢。</strong></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>全局资源文件加载</title>
    <link href="/python/global-env-load.html"/>
    <url>/python/global-env-load.html</url>
    
    <content type="html"><![CDATA[<h2 id="一、使用-classmethod-全局加载"><a href="#一、使用-classmethod-全局加载" class="headerlink" title="一、使用 @classmethod 全局加载"></a>一、使用 <code>@classmethod</code> 全局加载</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> tomllib<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Config</span>:<br>    _profile = <span class="hljs-literal">None</span><br><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__load</span>(<span class="hljs-params">cls</span>):<br>        <span class="hljs-keyword">if</span> cls._profile <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">import</span> os<br>            <span class="hljs-comment"># 根据当前配置加载文件获取 config.toml 文件的配置路径</span><br>            root_dir = os.path.dirname(os.path.abspath(__file__))<br>            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(os.path.join(root_dir, <span class="hljs-string">&quot;config.toml&quot;</span>), <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> fp:<br>                config_data = tomllib.load(fp)<br>                profiles = config_data.get(<span class="hljs-string">&quot;profiles&quot;</span>)<br>                active = profiles.get(<span class="hljs-string">&quot;active&quot;</span>)<br>                cls._profile = profiles.get(active)<br>        <span class="hljs-keyword">return</span> cls._profile<br><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">cls, key: <span class="hljs-built_in">str</span></span>):<br>        <span class="hljs-keyword">if</span> cls._profile <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            cls.__load()<br>        <span class="hljs-keyword">return</span> cls._profile.get(key)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Fedora问题汇总</title>
    <link href="/other/fedora.html"/>
    <url>/other/fedora.html</url>
    
    <content type="html"><![CDATA[<h3 id="一、删除旧内核"><a href="#一、删除旧内核" class="headerlink" title="一、删除旧内核"></a>一、删除旧内核</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo dnf remove --oldinstallonly<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Camunda自定义历史日志级别</title>
    <link href="/camunda/custom-history-level.html"/>
    <url>/camunda/custom-history-level.html</url>
    
    <content type="html"><![CDATA[<p><code>Camunda 7</code>支持的日志级别为：<code>None</code>、<code>Activity</code>、<code>Audit</code>、<code>Full</code>，记录的信息逐级增加，<code>None</code>和<code>Activity</code>不会记录流传变量，<strong>可以显著提升引擎性能</strong>，如果在项目中有诉求需要对历史日志自定义记录，也可以通过实现<code>HistoryLevel</code>接口或者继承已有的历史日志类进行能力扩展。</p><p>自定义日志需要通过继承 <code>AbstractProcessEnginePlugin</code> 类进行注册，相关示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomHistoryLevelProcessEnginePlugin</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractProcessEnginePlugin</span> &#123;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">preInit</span><span class="hljs-params">(ProcessEngineConfigurationImpl processEngineConfiguration)</span> &#123;<br>    List&lt;HistoryLevel&gt; customHistoryLevels = processEngineConfiguration.getCustomHistoryLevels();<br>    <span class="hljs-keyword">if</span> (customHistoryLevels == <span class="hljs-literal">null</span>) &#123;<br>      customHistoryLevels = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;HistoryLevel&gt;();<br>      processEngineConfiguration.setCustomHistoryLevels(customHistoryLevels);<br>    &#125;<br>    customHistoryLevels.add(CustomVariableHistoryLevel.getInstance());<br><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>在Spring Boot</strong>项目中，需要将<code>CustomHistoryLevelProcessEnginePlugin</code> 注册为<code>Bean</code></p><p>通过接口实现日志事件类型判断：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomVariableHistoryLevel</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HistoryLevel</span> &#123;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">CustomVariableHistoryLevel</span> <span class="hljs-variable">INSTANCE</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomVariableHistoryLevel</span>();<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> CustomVariableHistoryLevel <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> INSTANCE;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-comment">// 注意：不要和camunda已有的冲突</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">11</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;custom-variable&quot;</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isHistoryEventProduced</span><span class="hljs-params">(HistoryEventType historyEventType, Object entity)</span> &#123;<br>     <span class="hljs-comment">// 可以对事件类型进行判断，支持的事件类型可以查看 HistoryEventTypes</span><br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>也可以通过继承已有的日志类进行能力扩展：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomVariableHistoryLevel</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HistoryLevelActivity</span> &#123;<br>    <span class="hljs-comment">// 同实现接口一样</span><br>&#125;<br></code></pre></td></tr></table></figure><p>参考：<a href="https://github.com/camunda/camunda-bpm-examples/blob/master/process-engine-plugin/custom-history-level/README.md">https://github.com/camunda/camunda-bpm-examples/blob/master/process-engine-plugin/custom-history-level/README.md</a></p>]]></content>
    
    
    <categories>
      
      <category>Camunda</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>国内镜像源</title>
    <link href="/other/mirrors.html"/>
    <url>/other/mirrors.html</url>
    
    <content type="html"><![CDATA[<h3 id="一、Maven源"><a href="#一、Maven源" class="headerlink" title="一、Maven源"></a>一、Maven源</h3><p>在 <code>maven</code>的配置文件(<code>conf/setting</code>)中添加如下内容，内容需要放在<code>mirrors</code>节点下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>aliyunmaven<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>阿里云公共仓库<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="二、Docker镜像"><a href="#二、Docker镜像" class="headerlink" title="二、Docker镜像"></a>二、Docker镜像</h3><p>在<code>daemon.json</code>文件中添加如下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> vi /etc/docker/daemon.json<br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;registry-mirrors&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>使配置文件生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl daemon-reload<br></code></pre></td></tr></table></figure><p>重启<code>docker</code>服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl restart docker<br></code></pre></td></tr></table></figure><p>检查<code>docker</code>服务状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> systemctl status docker<br></code></pre></td></tr></table></figure><p><strong>Docker国内镜像源目前处于无法使用状态</strong></p><h3 id="三、PIP源"><a href="#三、PIP源" class="headerlink" title="三、PIP源"></a>三、PIP源</h3><p>升级 pip 到最新的版本 (&gt;&#x3D;10.0.0) 后进行配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">python -m pip install --upgrade pip<br>pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple<br></code></pre></td></tr></table></figure><p>如果到 pip 默认源的网络连接较差，临时使用如下命令升级 pip：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python -m pip install -i https://pypi.tuna.tsinghua.edu.cn/simple --upgrade pip<br></code></pre></td></tr></table></figure><h3 id="四、go国内源"><a href="#四、go国内源" class="headerlink" title="四、go国内源"></a>四、go国内源</h3><p>Go 1.13及以上：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">go env -w GO111MODULE=on<br>go env -w GOPROXY=https://goproxy.cn,direct<br></code></pre></td></tr></table></figure><h3 id="五、NPM源"><a href="#五、NPM源" class="headerlink" title="五、NPM源"></a>五、NPM源</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">npm config set registry https:<span class="hljs-comment">//registry.npmmirror.com</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>学习网站</title>
    <link href="/other/learn_websites.html"/>
    <url>/other/learn_websites.html</url>
    
    <content type="html"><![CDATA[<h3 id="一、Rust"><a href="#一、Rust" class="headerlink" title="一、Rust"></a>一、Rust</h3><p><a href="https://rust-lang-nursery.github.io/rust-cookbook/intro.html">https://rust-lang-nursery.github.io/rust-cookbook/intro.html</a></p><p><a href="https://github.com/rust-unofficial/awesome-rust">https://github.com/rust-unofficial/awesome-rust</a></p><h3 id="二、Java"><a href="#二、Java" class="headerlink" title="二、Java"></a>二、Java</h3><p><a href="https://stuefe.de/">https://stuefe.de/</a></p>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>使用Docker创建MySQL无法输入中文</title>
    <link href="/docker/mysql_chinese.html"/>
    <url>/docker/mysql_chinese.html</url>
    
    <content type="html"><![CDATA[<p>在使用<code>docker</code>创建的<code>MySQL</code>容器中，使用终端连接数据后，无法输入中文或者中文查询结果为问号，本文介绍两种方式处理中文问题，方法一在重新进入容器后会失效，需要手工再次执行<code>source /etc/profile</code>，方法二永久生效。</p><h3 id="方法一、在容器内修改系统字符编码"><a href="#方法一、在容器内修改系统字符编码" class="headerlink" title="方法一、在容器内修改系统字符编码"></a>方法一、在容器内修改系统字符编码</h3><p><strong>进入容器后修改系统字符编码，在退出容器后，配置不在生效，需要重新进行 <code>source /etc/profile</code></strong></p><p>1、进入mysql容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker exec -it mysql bash<br></code></pre></td></tr></table></figure><p>2、查看系统字符编码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">bash-4.4# locale<br>LANG=<br>LC_CTYPE=&quot;POSIX&quot;<br>LC_NUMERIC=&quot;POSIX&quot;<br>LC_TIME=&quot;POSIX&quot;<br>LC_COLLATE=&quot;POSIX&quot;<br>LC_MONETARY=&quot;POSIX&quot;<br>LC_MESSAGES=&quot;POSIX&quot;<br>LC_PAPER=&quot;POSIX&quot;<br>LC_NAME=&quot;POSIX&quot;<br>LC_ADDRESS=&quot;POSIX&quot;<br>LC_TELEPHONE=&quot;POSIX&quot;<br>LC_MEASUREMENT=&quot;POSIX&quot;<br>LC_IDENTIFICATION=&quot;POSIX&quot;<br>LC_ALL=<br></code></pre></td></tr></table></figure><p>当前字符集为 <code>POSIX</code>，不支持中文，需要修改系统字符集支持中文输入</p><p>3、查看系统支持字符集</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">bash-4.4# locale -a<br>C<br>C.utf8<br>POSIX<br></code></pre></td></tr></table></figure><p>字符集列表中 <code>C.utf8</code>支持中文，设置系统字符集为 <code>C.utf8</code></p><p>4、修改系统字符集</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &quot;export LANG=C.utf8&quot; &gt;&gt; /etc/profile &amp;&amp; source /etc/profile<br></code></pre></td></tr></table></figure><p>5、再次进行数据操作，中文操作无问题</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student;<br><span class="hljs-operator">+</span><span class="hljs-comment">----+-----------+-----+-----+---------------------+</span><br><span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> name      <span class="hljs-operator">|</span> age <span class="hljs-operator">|</span> sex <span class="hljs-operator">|</span> creation_date       <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+-----------+-----+-----+---------------------+</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> 张三      <span class="hljs-operator">|</span>   <span class="hljs-number">6</span> <span class="hljs-operator">|</span> M   <span class="hljs-operator">|</span> <span class="hljs-number">2023</span><span class="hljs-number">-10</span><span class="hljs-number">-12</span> <span class="hljs-number">10</span>:<span class="hljs-number">10</span>:<span class="hljs-number">10</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">2</span> <span class="hljs-operator">|</span> 李四      <span class="hljs-operator">|</span>   <span class="hljs-number">7</span> <span class="hljs-operator">|</span> M   <span class="hljs-operator">|</span> <span class="hljs-number">2023</span><span class="hljs-number">-10</span><span class="hljs-number">-12</span> <span class="hljs-number">11</span>:<span class="hljs-number">10</span>:<span class="hljs-number">10</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">3</span> <span class="hljs-operator">|</span> 王麻子    <span class="hljs-operator">|</span>   <span class="hljs-number">8</span> <span class="hljs-operator">|</span> F   <span class="hljs-operator">|</span> <span class="hljs-number">2023</span><span class="hljs-number">-10</span><span class="hljs-number">-12</span> <span class="hljs-number">12</span>:<span class="hljs-number">10</span>:<span class="hljs-number">10</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+-----------+-----+-----+---------------------+</span><br><span class="hljs-number">3</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.01</span> sec)<br><br></code></pre></td></tr></table></figure><h4 id="方法二：创建容器时指定系统字符变量"><a href="#方法二：创建容器时指定系统字符变量" class="headerlink" title="方法二：创建容器时指定系统字符变量"></a>方法二：创建容器时指定系统字符变量</h4><p>在使用<code>run</code>穿件容器服务是，通过<code>-e LANG=C.utf8</code>指定系统变量，<strong>此种方法在退出容器重新进入一直生效</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -itd -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root -e LANG=C.utf8 --name mysql1 mysql<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">bash-4.4# locale<br>LANG=C.utf8<br>LC_CTYPE=&quot;C.utf8&quot;<br>LC_NUMERIC=&quot;C.utf8&quot;<br>LC_TIME=&quot;C.utf8&quot;<br>LC_COLLATE=&quot;C.utf8&quot;<br>LC_MONETARY=&quot;C.utf8&quot;<br>LC_MESSAGES=&quot;C.utf8&quot;<br>LC_PAPER=&quot;C.utf8&quot;<br>LC_NAME=&quot;C.utf8&quot;<br>LC_ADDRESS=&quot;C.utf8&quot;<br>LC_TELEPHONE=&quot;C.utf8&quot;<br>LC_MEASUREMENT=&quot;C.utf8&quot;<br>LC_IDENTIFICATION=&quot;C.utf8&quot;<br>LC_ALL=<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>如何在Spring Bean创建销毁前执行自定义行为</title>
    <link href="/spring/bean.html"/>
    <url>/spring/bean.html</url>
    
    <content type="html"><![CDATA[<p><code>Bean</code>创建后和<code>Bean</code>销毁前执行自定义行为的三种方式。</p><h3 id="一、实现-InitializingBean-和-DisposableBean-接口"><a href="#一、实现-InitializingBean-和-DisposableBean-接口" class="headerlink" title="一、实现 InitializingBean 和 DisposableBean 接口"></a>一、实现 InitializingBean 和 DisposableBean 接口</h3><p><code>InitializingBean</code>在<code>Bean</code>创建完成后调用；<code>DisposableBean</code>在<code>Bean</code>销毁前调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InitializingBean</span>, DisposableBean &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;destroy bean&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterPropertiesSet</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(<span class="hljs-string">&quot;bean init&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="二、使用-JSR-250-的-PostConstruct-和-PreDestroy-注解"><a href="#二、使用-JSR-250-的-PostConstruct-和-PreDestroy-注解" class="headerlink" title="二、使用 JSR-250 的 @PostConstruct 和 @PreDestroy 注解"></a>二、使用 JSR-250 的 @PostConstruct 和 @PreDestroy 注解</h3><p><code>PostConstruct</code>在<code>Bean</code>创建完成后调用；<code>PreDestroy</code>在<code>Bean</code>销毁前调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostConstruct</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;====== bean init ======&quot;</span>);<br>&#125;<br><br><span class="hljs-meta">@PreDestroy</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeDestroy</span><span class="hljs-params">()</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="三、在-或-Bean-里配置初始化和销毁方法"><a href="#三、在-或-Bean-里配置初始化和销毁方法" class="headerlink" title="三、在&lt;bean/&gt; 或 @Bean 里配置初始化和销毁方法"></a>三、在<code>&lt;bean/&gt;</code> 或 @Bean 里配置初始化和销毁方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean(name = &quot;hello&quot;, initMethod = &quot;init&quot;, destroyMethod = &quot;destroy&quot;)</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Bean</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>获取Spring容器</title>
    <link href="/spring/container.html"/>
    <url>/spring/container.html</url>
    
    <content type="html"><![CDATA[<p>在普通<code>Bean</code>中获取<code>Spring</code>容器，可以通过实现 <code>Aware</code>接口或者直接注入，方式如下。</p><p>优先建议注入<code>ApplicationContext</code>，<code>ApplicationContext</code>扩展了<code>BeanFactory</code>功能</p><h4 id="方式一：实现-BeanFactoryAware-或-ApplicationContextAware-接口"><a href="#方式一：实现-BeanFactoryAware-或-ApplicationContextAware-接口" class="headerlink" title="方式一：实现 BeanFactoryAware 或 ApplicationContextAware 接口"></a>方式一：实现 BeanFactoryAware 或 ApplicationContextAware 接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">implements</span> <span class="hljs-title class_">ApplicationContextAware</span><br>     <br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setApplicationContext</span><span class="hljs-params">(ApplicationContext applicationContext)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>    <span class="hljs-built_in">this</span>.ac = applicationContext;<br>&#125;<br><br><br><span class="hljs-keyword">implements</span> <span class="hljs-title class_">BeanFactoryAware</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBeanFactory</span><span class="hljs-params">(BeanFactory beanFactory)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>此种方式适合于普通的<code>Java</code>类</p><h4 id="方式二：用-Autowired-注解或构造器来注入-BeanFactory-或-ApplicationContext"><a href="#方式二：用-Autowired-注解或构造器来注入-BeanFactory-或-ApplicationContext" class="headerlink" title="方式二：用 @Autowired 注解或构造器来注入 BeanFactory 或 ApplicationContext"></a>方式二：用 @Autowired 注解或构造器来注入 BeanFactory 或 ApplicationContext</h4><p>此种方式适合于<code>Spring Bean</code>中注入</p><p>获取到<code>ApplicationContext</code>后可以用来获取<code>Bean</code>，并执行<code>Bean</code>的相关方法，获取环境资源文件配置</p>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Spring自定义事件</title>
    <link href="/spring/event.html"/>
    <url>/spring/event.html</url>
    
    <content type="html"><![CDATA[<p>ApplicationContext 提供了一套事件机制，在容器发生变动时我们可以通过 ApplicationEvent 的子类通知到 ApplicationListener 接口的实现类，做对应的处理。例如，ApplicationContext 在启动、停止、关闭和刷新 20 时，分别会发出 ContextStartedEvent、ContextStoppedEvent、ContextClosedEvent 和 ContextRefreshedEvent 事件，这些事件就让我们有机会感知当前容器的状态。</p><p>如下两种方式可以进行自定义事件的发布和监听。</p><h4 id="方式一：实现接口发布、监听事件"><a href="#方式一：实现接口发布、监听事件" class="headerlink" title="方式一：实现接口发布、监听事件"></a>方式一：实现接口发布、监听事件</h4><ul><li><p>事件监听 实现 <code>ApplicationListener</code> 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.probiecoder.fund.event;<br><br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationListener;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AgreeEventListener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ApplicationListener</span>&lt;AgreeEvent&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onApplicationEvent</span><span class="hljs-params">(AgreeEvent event)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;我是监听器&quot;</span>);<br>        System.out.println(event.getMessage());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>事件发布 实现 <code>ApplicationEventPublisherAware</code> 接口</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.probiecoder.fund.event;<br><br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationEventPublisher;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationEventPublisherAware;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/event&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EventController</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ApplicationEventPublisherAware</span> &#123;<br>    <span class="hljs-keyword">private</span> ApplicationEventPublisher publisher;<br>    <span class="hljs-meta">@GetMapping</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">publicEvent</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">AgreeEvent</span> <span class="hljs-variable">agreeEvent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AgreeEvent</span>(<span class="hljs-built_in">this</span>, <span class="hljs-string">&quot;hello, event&quot;</span>);<br>        publisher.publishEvent(agreeEvent);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;publicEvent&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setApplicationEventPublisher</span><span class="hljs-params">(ApplicationEventPublisher applicationEventPublisher)</span> &#123;<br>        <span class="hljs-built_in">this</span>.publisher = applicationEventPublisher;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="方式二、使用注解"><a href="#方式二、使用注解" class="headerlink" title="方式二、使用注解"></a>方式二、使用注解</h4><p>发布事件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> ApplicationEventPublisher publisher;<br></code></pre></td></tr></table></figure><p>使用注解<code>@EventListener</code>监听事件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EventListener</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onApplicationEvent</span><span class="hljs-params">(AgreeEvent event)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;我是监听器&quot;</span>);<br>    System.out.println(event.getMessage());<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>自定义事件：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.probiecoder.fund.event;<br><br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationEvent;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AgreeEvent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ApplicationEvent</span> &#123;<br>    <span class="hljs-keyword">private</span> String message;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AgreeEvent</span><span class="hljs-params">(Object source, String message)</span> &#123;<br>        <span class="hljs-built_in">super</span>(source);<br>        <span class="hljs-built_in">this</span>.message = message;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getMessage</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.message;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Event</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用AspectJ配置切面</title>
    <link href="/spring/aspectj.html"/>
    <url>/spring/aspectj.html</url>
    
    <content type="html"><![CDATA[<p>基于 <code>@AspectJ</code>配置<code>AOP</code>,使用面向切面能力。</p><h4 id="声明切入点-Pointcut"><a href="#声明切入点-Pointcut" class="headerlink" title="声明切入点 @Pointcut"></a>声明切入点 <code>@Pointcut</code></h4><p>常用的切入点标识符,切入点可以参考对照方法的签名类记忆 <strong>【修饰符(publci、private) 返回类型 包路径.方法名(参数列) 异常】</strong></p><p>其中方法修饰符，异常为可选项，可以不配置，其他为必须项，各部分都可以使用 ***** 表示任意类型</p><table><thead><tr><th>标识符</th><th>说明</th></tr></thead><tbody><tr><td><code>execution</code></td><td>最常用的一个 PCD，用来匹配特定方法的执行</td></tr><tr><td><code>within</code></td><td>匹配特定范围内的类型，可以用通配符来匹配某个 Java 包内的所有类</td></tr><tr><td><code>this</code></td><td>Spring AOP 代理对象这个 Bean 本身要匹配某个给定的类型</td></tr><tr><td><code>target</code></td><td>目标对象要匹配某个给定的类型，比 this 更常用一些</td></tr><tr><td><code>args</code></td><td>传入的方法参数要匹配某个给定的类型，它也可以用于绑定请求参数</td></tr><tr><td><code>bean</code></td><td>Spring AOP 特有的一个 PCD，匹配 Bean 的 ID 或名称，可以用通配符</td></tr></tbody></table><p><code>execution</code>使用详细介绍（<code>[]</code>代表可选项，<code>&lt;&gt;</code>代表必选项）：</p><blockquote><p>execution([修饰符] &lt;返回类型&gt; [全限定类名.]&lt;方法&gt;(&lt;参数&gt;) [异常])</p></blockquote><ul><li>每个部分都可以使用 ***** 通配符</li><li>类名中使用 **.*<strong>表示包中的所有类，</strong>..***表示当前包与子包中的所有类</li><li>参数主要分为以下几种情况：<ul><li><code>()</code>表示方法无参数</li><li><code>(..)</code>表示有任意个参数</li><li><code>(*)</code>表示有一个任意类型的参数</li><li><code>(String)</code>表示有一个<code>String</code>类型的参数</li><li><code>(String,String)</code>表示有两个<code>String</code>类型的参数</li></ul></li></ul><p><strong>切入点表达式支持与、或、非运算，运算符分别为 &amp;&amp;、||和 !</strong></p><h4 id="声明通知"><a href="#声明通知" class="headerlink" title="声明通知"></a>声明通知</h4><h5 id="1、前置通知-Before"><a href="#1、前置通知-Before" class="headerlink" title="1、前置通知 @Before"></a>1、前置通知 <code>@Before</code></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Before(value = &quot;execution(* cn.probiecoder.fund.aop.AspectJController.aspectj(..))&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;before....&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2、后置通知"><a href="#2、后置通知" class="headerlink" title="2、后置通知"></a>2、后置通知</h5><ul><li><p>拦截正常返回 <code>@AfterReturning</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AfterReturning(value = &quot;pointcut() &amp;&amp; args()&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterReturning</span><span class="hljs-params">()</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;after method execute success&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>拦截一场返回 <code>@AfterThrowing</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AfterThrowing(value = &quot;pointcut() &amp;&amp; args(throwException)&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterThrowing</span><span class="hljs-params">(<span class="hljs-type">boolean</span> throwException)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;请求参数：&quot;</span>+throwException);<br>    System.out.println(<span class="hljs-string">&quot;after method execute throw exception&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>无论成功与否都执行 <code>@After</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@After(value = &quot;execution(* cn.probiecoder.fund.aop..*.*(..))&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">()</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;after method execute no matter success or error&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li></li></ul></li></ul><h5 id="3、环绕通知"><a href="#3、环绕通知" class="headerlink" title="3、环绕通知"></a>3、环绕通知</h5><p>环绕通知不仅可以在方法执行前后加入自己的逻辑，甚至可以完全替换方法本身的逻辑，或者替换调用参数，可以通过<code>@Around</code>注解来声明环绕通知，这个注解<strong>要求方法的第一个参数必须是<code>ProceedingJoinPoint</code>，方法的返回类型是被拦截方法的返回类型，或者直接用<code>Object</code>类型</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-meta">@Around(value = &quot;pointcut() &amp;&amp; args(throwException)&quot;)</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint pjp, <span class="hljs-type">boolean</span> throwException)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;around before execute&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;请求参数：&quot;</span> + throwException);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> pjp.proceed();<br>        System.out.println(<span class="hljs-string">&quot;around after execute&quot;</span>);<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="5、声明切入点"><a href="#5、声明切入点" class="headerlink" title="5、声明切入点"></a>5、声明切入点</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Pointcut(&quot;execution(* cn.probiecoder.fund.aop.AspectJController.aspectj(..))&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pointcut</span><span class="hljs-params">()</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="方法参数拦截"><a href="#方法参数拦截" class="headerlink" title="方法参数拦截"></a>方法参数拦截</h4><h5 id="1、args方法参数声明"><a href="#1、args方法参数声明" class="headerlink" title="1、args方法参数声明"></a>1、args方法参数声明</h5><p>格式：<code>args(参数变量名...)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">args(throwException)<br></code></pre></td></tr></table></figure><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p>1、使用<code>AspectJ</code>需要在<code>pom</code>文件中引入相关依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.aspectj<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aspectjweaver<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.9.21<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2、在启动类或者配置类上添加注解<code>@EnableAspectJAutoProxy</code>启用<code>AOP</code>切面编程支持</p><p>3、配置类上的<code>@Aspectj</code>仅仅是一个标识，不会被<code>Spring</code>识别为<code>Bean</code>进行注入，<code>AOP</code>不生效时，需要检查是否有添加<code>@Component</code>等注解声明类为<code>Bean</code></p><h4 id="请求示例"><a href="#请求示例" class="headerlink" title="请求示例"></a>请求示例</h4><pre><code class="java">配置类：package cn.probiecoder.fund.aop;import org.aspectj.lang.ProceedingJoinPoint;import org.aspectj.lang.annotation.*;import org.springframework.stereotype.Component;@Aspect@Componentpublic class HelloAspectConfig &#123;    @Pointcut(&quot;execution(* cn.probiecoder.fund.aop.AspectJController.aspectj(..))&quot;)    public void pointcut() &#123;    &#125;    @Before(value = &quot;execution(* cn.probiecoder.fund.aop.AspectJController.aspectj(..))&quot;)    public void before() &#123;        System.out.println(&quot;before....&quot;);    &#125;    @AfterReturning(value = &quot;pointcut() &amp;&amp; args()&quot;)    public void afterReturning() &#123;        System.out.println(&quot;after method execute success&quot;);    &#125;    @AfterThrowing(value = &quot;pointcut() &amp;&amp; args(throwException)&quot;)    public void afterThrowing(boolean throwException) &#123;        System.out.println(&quot;请求参数：&quot;+throwException);        System.out.println(&quot;after method execute throw exception&quot;);    &#125;    @After(value = &quot;execution(* cn.probiecoder.fund.aop..*.*(..))&quot;)    public void after() &#123;        System.out.println(&quot;after method execute no matter success or error&quot;);    &#125;    @Around(value = &quot;pointcut() &amp;&amp; args(throwException)&quot;)    public Object around(ProceedingJoinPoint pjp, boolean throwException) &#123;        try &#123;            System.out.println(&quot;around before execute&quot;);            System.out.println(&quot;请求参数：&quot; + throwException);            Object obj = pjp.proceed();            System.out.println(&quot;around after execute&quot;);            return obj;        &#125; catch (Throwable e) &#123;            throw new RuntimeException(e);        &#125;    &#125;&#125;拦截类：@RestController@RequestMapping(&quot;/aspectj&quot;)public class AspectJController &#123;    @GetMapping    public String aspectj(@RequestParam(value = &quot;throwException&quot;, required = false) boolean throwException) &#123;        if (throwException) &#123;            throw new RuntimeException(&quot;抛出异常&quot;);        &#125;        return &quot;aspectj&quot;;    &#125;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AspectJ</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring事务基本概念</title>
    <link href="/spring/transaction.html"/>
    <url>/spring/transaction.html</url>
    
    <content type="html"><![CDATA[<h4 id="事务传播性"><a href="#事务传播性" class="headerlink" title="事务传播性"></a>事务传播性</h4><table><thead><tr><th>传播性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td><code>PROPAGATION_REQUIRED</code></td><td>0</td><td>当前有事务就用当前事务，没有事务就启动一个新事务</td></tr><tr><td><code>PROPAGATION_SUPPORTSP</code></td><td>1</td><td>事务不是必须的，可以有事务，也可以没有</td></tr><tr><td><code>PROPAGATION_MANDATORY</code></td><td>2</td><td>一定要存在一个事务，不然就报错</td></tr><tr><td><code>PROPAGATION_REQUIRES_NEW</code></td><td>3</td><td>新启动一个事务，如果当前存在一个事务就将其挂起</td></tr><tr><td><code>PROPAGATION_NOT_SUPPORTED</code></td><td>4</td><td>不支持事务，以非事务的方式运行</td></tr><tr><td><code>PROPAGATION_NEVER</code></td><td>5</td><td>不支持事务，如果当前存在一个事务则抛异常</td></tr><tr><td><code>PROPAGATION_NESTED</code></td><td>6</td><td>如果当前存在一个事务，则在该事务内在启动一个事务</td></tr></tbody></table><h4 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h4><table><thead><tr><th>隔离性</th><th>描述</th><th>取值</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td><code>ISOLATION_READ_UNCOMMITTED</code></td><td>读未提交</td><td>1</td><td>存在</td><td>存在</td><td>存在</td></tr><tr><td><code>ISOLATION_READ_COMMITTED</code></td><td>读已提交</td><td>2</td><td>不存在</td><td>存在</td><td>存在</td></tr><tr><td><code>ISOLATION_REPEATABLE_READ</code></td><td>可重复读</td><td>3</td><td>不存在</td><td>不存在</td><td>存在</td></tr><tr><td><code>ISOLATION_SERIALIZABLE</code></td><td>串行读</td><td>4</td><td>不存在</td><td>不存在</td><td>不存在</td></tr></tbody></table><h4 id="使用-Transaction-注解声明事务"><a href="#使用-Transaction-注解声明事务" class="headerlink" title="使用 @Transaction 注解声明事务"></a>使用 @Transaction 注解声明事务</h4><table><thead><tr><th>属性名</th><th>属性描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>transactionManager</code></td><td>指定事务管理器</td><td>默认查找<code>transactionManager</code>的事务管理器</td></tr><tr><td><code>propagation</code></td><td>指定事务的传播性</td><td><code>Propagation.REQUIRED</code></td></tr><tr><td><code>isolation</code></td><td>指定事务的隔离级别</td><td><code>Isolation.DEFAULT</code>取决于数据库本身的事务级别</td></tr><tr><td><code>timeout</code></td><td>指定事务超时事件</td><td>-1，由具体的底层实现来设置</td></tr><tr><td><code>readonly</code></td><td>是否为只读事务</td><td><code>false</code></td></tr><tr><td><code>rollbackFor/rollbackForClassName</code></td><td>指定需要回滚事务的异常类型</td><td>无</td></tr><tr><td><code>noRollbackFor/noRollbackForClassName</code></td><td>指定无需回滚事务的异常类型</td><td>无</td></tr></tbody></table><p><strong>注意事项：</strong><code>Spring</code>的声明式事务，其本质是对目标类和方法进行了<code>AOP</code>拦截，并在方法的执行前后增加了事务相关的操作，比如启动事务、提交事务和回滚事务。必须调用增强后的代理类中的方法，而非原本的对象，这样才能拥有事务。</p>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JDBC常用操作</title>
    <link href="/java/jdbc.html"/>
    <url>/java/jdbc.html</url>
    
    <content type="html"><![CDATA[<h3 id="一、查询条件中使用IN"><a href="#一、查询条件中使用IN" class="headerlink" title="一、查询条件中使用IN"></a>一、查询条件中使用IN</h3><p>可以使用<code>JDBC</code>提供的<code>setArray</code>方法设置（此处由于无<code>Oracle</code>数据库暂未验证）<br>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from table_name where id in ?&quot;</span>;<br><span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> conn.prepareStatement(sql);<br>ps.setArray(<span class="hljs-number">1</span>, conn.createArrayOf(<span class="hljs-string">&quot;BIGINT&quot;</span>, instanceIdList.toArray()));<br>ps.executeQuery();<br></code></pre></td></tr></table></figure><p>在 <code>MySQL</code>环境下，执行 <code>setArray</code>会抛出<code>java.sql.SQLFeatureNotSupportedException</code>异常，需要自行进行处理。<br>个人处理方案如下(对于查询字段为数字类型时，拼接单引号<code>&#39;</code>不会导致索引失效)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">forEach</span><span class="hljs-params">(List&lt;String&gt; idList)</span> &#123;<br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;(&quot;</span>);<br>    idList.forEach(id -&gt; &#123;<br>        builder.append(<span class="hljs-string">&quot;&#x27;&quot;</span>).append(id).append(<span class="hljs-string">&quot;&#x27;&quot;</span>).append(<span class="hljs-string">&quot;,&quot;</span>);<br>    &#125;);<br>    builder.deleteCharAt(builder.length() - <span class="hljs-number">1</span>);<br>    builder.append(<span class="hljs-string">&quot;)&quot;</span>);<br>    <span class="hljs-keyword">return</span> builder.toString();<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MySQL错误汇总</title>
    <link href="/mysql/errors.html"/>
    <url>/mysql/errors.html</url>
    
    <content type="html"><![CDATA[<h3 id="一、ERROR-1118-42000-Row-size-too-large"><a href="#一、ERROR-1118-42000-Row-size-too-large" class="headerlink" title="一、ERROR 1118 (42000): Row size too large"></a>一、ERROR 1118 (42000): Row size too large</h3><p><strong>问题背景</strong>：修改表字段(数据类型为<code>varchar</code>)长度时提示1118</p><p><strong>问题原因</strong>：<code>MySQL</code>对数据表<code>column</code>的数量以及行记录大小进行了限制，所以在创建数据表或者通过<code>alter</code>修改表结构时可能会触发1118错误</p><p><strong>解决方案</strong>：保证行记录允许最大字段和在允许范围内，其中对于<code>BLOB</code>和<code>TEXT</code>分别占用9到12字节(bytes)</p><p><code>MySQL</code>对于数据表允许最大行记录取决与以下几个因素：</p><ul><li><p><code>MySQL</code>服务器本身允许的最大行限制为65535字节，即使存储引擎可以支持更大的行；其中对于<code>BLOB</code>和<code>TEXT</code>只占行记录的9到12字节，字段内容不计算在内</p></li><li><p>对于<code>InnoDB</code>引擎而言，数据存储按照数据页的形式，允许的最大行记录略小于数据页的一半(数据页通过参数<code>innodb_page_size</code>设置，支持<code>4KB、8KB、16KB、32KB</code>,默认为<code>16KB</code>)。例如，对于默认的<code>16KB InnoDB</code>页面大小，最大行大小略小于<code>8KB</code>。</p><p>如果包含可变长度列的行超过了<code>InnoDB</code>的最大行大小，<code>InnoDB</code>会选择可变长度列用于外部页外存储，直到该行符合<code>InnoDB</code>的行大小限制。对于页外存储的可变长度列，本地存储的数据量因行格式而异。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; show variables like &#x27;innodb_page_size&#x27;;<br>+------------------+-------+<br>| Variable_name    | Value |<br>+------------------+-------+<br>| innodb_page_size | 16384 |<br>+------------------+-------+<br>1 row in set (0.01 sec)<br><br></code></pre></td></tr></table></figure></li><li><p>不同的数据存储格式(<code>storage format</code>)会包含不同数量的页头和尾部数据，这些信息也会影响行的可用存储；</p><p>关于<code>InnoDB</code>行格式的介绍可以参考：<a href="https://dev.mysql.com/doc/refman/8.0/en/innodb-row-format.html">https://dev.mysql.com/doc/refman/8.0/en/innodb-row-format.html</a></p></li></ul><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs mysql">-- 建表时，超过允许最大行记录<br>create table max_row_size_test(<br>    id int primary key,<br>    name1 varchar(10000),<br>    name2 varchar(10000)<br>);<br><br><br>mysql&gt; create table max_row_size_test(<br>    -&gt;     id int primary key,<br>    -&gt;     name1 varchar(10000),<br>    -&gt;     name2 varchar(10000)<br>    -&gt; );<br>ERROR 1118 (42000): Row size too large. The maximum row size for the used table type, not counting BLOBs, is 65535. This includes storage overhead, check the manual. You have to change some columns to TEXT or BLOBs<br><br><br>-- 修改表结构时超过允许最大行记录<br>create table max_row_size_test(<br>    id int primary key,<br>    name1 varchar(10000),<br>    name2 varchar(10)<br>);<br><br>mysql&gt; create table max_row_size_test(<br>    -&gt;     id int primary key,<br>    -&gt;     name1 varchar(10000),<br>    -&gt;     name2 varchar(10)<br>    -&gt; );<br>Query OK, 0 rows affected (0.02 sec)<br><br>mysql&gt; alter table max_row_size_test modify column name2 varchar(10000);<br>ERROR 1118 (42000): Row size too large. The maximum row size for the used table type, not counting BLOBs, is 65535. This includes storage overhead, check the manual. You have to change some columns to TEXT or BLOBs<br><br></code></pre></td></tr></table></figure><p>参考来源：<a href="https://dev.mysql.com/doc/refman/8.0/en/innodb-row-format.html">https://dev.mysql.com/doc/refman/8.0/en/innodb-row-format.html</a></p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【MyBatis专题】专题一：入门</title>
    <link href="/mybatis/introduce.html"/>
    <url>/mybatis/introduce.html</url>
    
    <content type="html"><![CDATA[<h3 id="一、引入MyBatis依赖"><a href="#一、引入MyBatis依赖" class="headerlink" title="一、引入MyBatis依赖"></a>一、引入MyBatis依赖</h3><p>当前最新版本：<strong>3.5.13</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>x.x.x<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="二、从XML文件中构建SqlSessionFactory"><a href="#二、从XML文件中构建SqlSessionFactory" class="headerlink" title="二、从XML文件中构建SqlSessionFactory"></a>二、从XML文件中构建SqlSessionFactory</h3><p>每个基于 <code>MyBatis</code> 的应用都是以一个 <code>SqlSessionFactory</code> 的实例为核心的。<code>SqlSessionFactory</code> 的实例可以通过 <code>SqlSessionFactoryBuilder</code> 获得。而 <code>SqlSessionFactoryBuilder</code> 则可以从 <code>XML</code> 配置文件或一个预先配置的 <code>Configuration</code> 实例来构建出 <code>SqlSessionFactory</code> 实例。</p><h4 id="1、mybatis全局配置文件"><a href="#1、mybatis全局配置文件" class="headerlink" title="1、mybatis全局配置文件"></a>1、mybatis全局配置文件</h4><p>在<code>resources</code>目录创建<code>mybatis-config.xml</code>文件，初始添加如下内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;https://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/mybatis&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;mapper/StudentMapper.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>关于<code>mybatis-config.xml</code>文件的详细介绍放在后文中。</p><h4 id="2、用于数据查询的Mapper文件"><a href="#2、用于数据查询的Mapper文件" class="headerlink" title="2、用于数据查询的Mapper文件"></a>2、用于数据查询的Mapper文件</h4><p>在<code>resource</code>目录下创建 <code>mapper</code>目录用于存放<code>mapper</code>文件，后续所有涉及到<code>mapper</code>的文件都应该放在此处目录，此处示例创建<code>StudentMapper.xml</code>文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;cn.probiecoder.mapper.StudentMapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectByName&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;cn.probiecoder.entity.Student&quot;</span>&gt;</span><br>        select * from student where name = #&#123;name&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="4、使用mybatis-config-xml创建SqlSessionFactory"><a href="#4、使用mybatis-config-xml创建SqlSessionFactory" class="headerlink" title="4、使用mybatis-config.xml创建SqlSessionFactory"></a>4、使用mybatis-config.xml创建SqlSessionFactory</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(resource)) &#123;<br>            <span class="hljs-comment">// 此处SqlSessionFactory应该使用单例模式保证全局唯一，且只需要获取一次即可  </span><br>            <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(is);<br>            <span class="hljs-keyword">try</span> (<span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> factory.openSession();) &#123;<br>                <span class="hljs-type">StudentMapper</span> <span class="hljs-variable">studentMapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(StudentMapper.class);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;王麻子&quot;</span>;<br>                <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> studentMapper.selectByName(name);<br>                System.out.println(student);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br></code></pre></td></tr></table></figure><h4 id="5、作用域和生命周期"><a href="#5、作用域和生命周期" class="headerlink" title="5、作用域和生命周期"></a>5、作用域和生命周期</h4><p><strong>SqlSessionFactoryBuilder</strong></p><p>这个类可以被实例化、使用和丢弃，一旦创建了 <code>SqlSessionFactory</code>，就不再需要它了。 因此 <code>SqlSessionFactoryBuilder</code> 实例的最佳作用域是方法作用域（也就是局部方法变量）。 可以重用 <code>SqlSessionFactoryBuilder</code> 来创建多个 <code>SqlSessionFactory</code> 实例，但最好还是不要一直保留着它，以保证所有的 XML 解析资源可以被释放给更重要的事情。</p><p><strong>SqlSessionFactory</strong></p><p><code>SqlSessionFactory</code> 一旦被创建就应该在应用的运行期间一直存在，没有任何理由丢弃它或重新创建另一个实例。 使用 <code>SqlSessionFactory</code> 的最佳实践是在应用运行期间不要重复创建多次，多次重建 <code>SqlSessionFactory</code> 被视为一种代码“坏习惯”。因此 <code>SqlSessionFactory</code> 的最佳作用域是应用作用域。 有很多方法可以做到，最简单的就是使用单例模式或者静态单例模式。</p><p><strong>SqlSession</strong></p><p>每个线程都应该有它自己的 <code>SqlSession</code> 实例。<code>SqlSession</code> 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域。 绝对不能将 <code>SqlSession</code> 实例的引用放在一个类的静态域，甚至一个类的实例变量也不行。 也绝不能将 <code>SqlSession</code> 实例的引用放在任何类型的托管作用域中，比如 <code>Servlet</code> 框架中的 <code>HttpSession</code>。 如果你现在正在使用一种 Web 框架，考虑将 <code>SqlSession</code> 放在一个和 <code>HTTP</code> 请求相似的作用域中。 换句话说，每次收到 <code>HTTP</code> 请求，就可以打开一个 <code>SqlSession</code>，返回一个响应后，就关闭它。 这个关闭操作很重要，为了确保每次都能执行关闭操作，你应该把这个关闭操作放到 <code>finally</code> 块中。 下面的示例就是一个确保 <code>SqlSession</code> 关闭的标准模式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> (<span class="hljs-type">SqlSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession()) &#123;<br>  <span class="hljs-comment">// 你的应用逻辑代码</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在所有代码中都遵循这种使用模式，可以保证所有数据库资源都能被正确地关闭。</p><p> <strong>提示：对象生命周期和依赖注入框架</strong></p><p>依赖注入框架可以创建线程安全的、基于事务的 SqlSession 和映射器，并将它们直接注入到你的 bean 中，因此可以直接忽略它们的生命周期。 例如：MyBatis-Spring</p><p>测试用数据表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create table</span> student(<br>    id <span class="hljs-type">bigint</span> <span class="hljs-keyword">primary key</span> auto_increment,<br>    name <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">not null</span> comment <span class="hljs-string">&#x27;名称&#x27;</span>,<br>    age tinyint <span class="hljs-keyword">not null</span> comment <span class="hljs-string">&#x27;年龄&#x27;</span>,<br>    sex <span class="hljs-type">char</span>(<span class="hljs-number">1</span>) <span class="hljs-keyword">not null</span> comment <span class="hljs-string">&#x27;性别 M:male F:female&#x27;</span>,<br>    creation_date datetime <span class="hljs-keyword">not null</span> comment <span class="hljs-string">&#x27;创建日期&#x27;</span><br>);<br><br><span class="hljs-keyword">insert into</span> student (name,age,sex,creation_date) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-number">6</span>, <span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-string">&#x27;2023-10-12 10:10:10&#x27;</span>);<br><span class="hljs-keyword">insert into</span> student (name,age,sex,creation_date) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;李四&#x27;</span>, <span class="hljs-number">7</span>, <span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-string">&#x27;2023-10-12 11:10:10&#x27;</span>);<br><span class="hljs-keyword">insert into</span> student (name,age,sex,creation_date) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;王麻子&#x27;</span>, <span class="hljs-number">8</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-string">&#x27;2023-10-12 12:10:10&#x27;</span>);<br></code></pre></td></tr></table></figure><p>知识来源：<a href="https://mybatis.org/mybatis-3/zh/getting-started.html">https://mybatis.org/mybatis-3/zh/getting-started.html</a></p>]]></content>
    
    
    <categories>
      
      <category>Mybatis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【MyBatis专题】专题二：配置文件浅析</title>
    <link href="/mybatis/setting.html"/>
    <url>/mybatis/setting.html</url>
    
    <content type="html"><![CDATA[<p>顶层结构配置如下：</p><ul><li><code>configuration</code>（配置）<ul><li><a href="#properties"><code>properties</code></a>（属性）</li><li><a href="#typeAliases"><code>typeAliases</code></a>（类型别名）</li><li><a href="#typeHandlers"><code>typeHandlers</code></a>（类型处理器）</li><li><a href="#objectFactory"><code>objectFactory</code></a>（对象工厂）</li><li><a href="#plugins"><code>plugins</code></a>（插件）</li></ul></li></ul><h3 id="一、属性"><a href="#一、属性" class="headerlink" title="一、属性"></a><a id="properties">一、属性</a></h3><p>属性一般用于不同环境有不同配置的场景，例如数据库地址、用户名等信息。</p><p>语法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/mybatis&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>properties</code>可以通过<code>resource</code>或者<code>url</code>加载外部配置文件，也可以直接在<code>properties</code>节点追加<code>property</code>节点设置属性。</p><p>用法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;username:root&#125;&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br></code></pre></td></tr></table></figure><p> 从 <code>MyBatis 3.4.2</code> 开始，可以通过占位符指定一个默认值；默认情况，此特性是关闭状态未开启，需要通过配置：<code>&lt;property name=&quot;org.apache.ibatis.parsing.PropertyParser.enable-default-value&quot; value=&quot;true&quot;/&gt;</code> 启用默认值特性。</p><p>属性可以在<code>properties</code>节点、外部资源文件和方法参数不同位置指定，<code>MyBatis</code>按照下面的顺序加载：</p><ul><li>首先读取在 <code>properties</code> 元素体内指定的属性。</li><li>然后根据 <code>properties</code> 元素中的 <code>resource</code> 属性读取类路径下属性文件，或根据 <code>url</code> 属性指定的路径读取属性文件，并覆盖之前读取过的同名属性。</li><li>最后读取作为方法参数传递的属性，并覆盖之前读取过的同名属性。</li></ul><p><strong>注意事项</strong></p><p>如果在属性名中使用了 <code>&quot;:&quot;</code> 字符（如：<code>db:username</code>），或者在 SQL 映射中使用了 OGNL 表达式的三元运算符（如： <code>$&#123;tableName != null ? tableName : &#39;global_constants&#39;&#125;</code>），就需要设置特定的属性来修改分隔属性名和默认值的字符。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;org/mybatis/example/config.properties&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.apache.ibatis.parsing.PropertyParser.default-value-separator&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;?:&quot;</span>/&gt;</span> <span class="hljs-comment">&lt;!-- 修改默认值的分隔符 --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;db:username?:ut_user&#125;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a id="typeAliases">二、类型别名（typeAliases）</a></p><p>类型别名可为 <code>Java</code> 类型设置一个缩写名字。 它仅用于 XML 配置，意在降低冗余的全限定类名书写。</p><p>语法：</p><p>1、使用<code>typeAlias</code>对每一个实体类进行单独配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">typeAlias</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;cn.probiecoder.entity.Student&quot;</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">&quot;Student&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br></code></pre></td></tr></table></figure><p>2、使用 <code>package</code> 指定包名，<code>MyBatis</code> 会在包名下面搜索需要的 <code>Java Bean</code>;在没有注解的情况下，会使用<code>Bean</code>首字母小写的非限定类名来作为它的别名。 比如 <code>domain.blog.Author</code> 的别名为 <code>author</code>；若有注解，则别名为其注解值。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cn.probiecoder.entity&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Alias(&quot;Author&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Author</span> &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>示例：</strong></p><p>在不指定类型别名的情况下，在<code>Mapper</code>文件中直接使用缩写别名会报如下错误：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">### The error may exist in mapper/StudentMapper.xml<br>### Cause: org.apache.ibatis.builder.BuilderException: Error parsing SQL Mapper Configuration. Cause: org.apache.ibatis.builder.BuilderException: Error parsing Mapper XML. The XML location is <span class="hljs-string">&#x27;mapper/StudentMapper.xml&#x27;</span>. Cause: org.apache.ibatis.builder.BuilderException: Error resolving class. Cause: org.apache.ibatis.type.TypeException: Could not resolve type alias <span class="hljs-string">&#x27;Student&#x27;</span>.  Cause: java.lang.ClassNotFoundException: Cannot find class: Student<br>at org.apache.ibatis.exceptions.ExceptionFactory.wrapException(ExceptionFactory.java:<span class="hljs-number">30</span>)<br>at org.apache.ibatis.session.SqlSessionFactoryBuilder.build(SqlSessionFactoryBuilder.java:<span class="hljs-number">82</span>)<br>at org.apache.ibatis.session.SqlSessionFactoryBuilder.build(SqlSessionFactoryBuilder.java:<span class="hljs-number">66</span>)<br>at cn.probiecoder.config.SqlSessionFactoryBuildByXML.main(SqlSessionFactoryBuildByXML.java:<span class="hljs-number">18</span>)<br></code></pre></td></tr></table></figure><p>通过<code>typeAlias</code>设定类型别名</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">typeAlias</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;cn.probiecoder.entity.Student&quot;</span> <span class="hljs-attr">alias</span>=<span class="hljs-string">&quot;Student&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectByName&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span><br>    select * from student where name = #&#123;name&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>通过<code>package</code>设定类型别名</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cn.probiecoder.entity&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectByName&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span><br>    select * from student where name = #&#123;name&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a id="typeHandlers">三、类型处理器（typeHandlers）</a></p><p><code>MyBatis</code> 在设置预处理语句（<code>PreparedStatement</code>）中的参数或从结果集中取出一个值时， 都会用类型处理器将获取到的值以合适的方式转换成 <code>Java</code> 类型。</p><p><strong>自定义类型处理</strong></p><ul><li>实现 <code>org.apache.ibatis.type.TypeHandler</code> 接口</li><li>继承<code>org.apache.ibatis.type.BaseTypeHandler</code></li></ul><p><code>Java</code>类型绑定：</p><ul><li>在类型处理器的配置元素（typeHandler 元素）上增加一个 <code>javaType</code> 属性（比如：<code>javaType=&quot;String&quot;</code>）；</li><li>在类型处理器的类上增加一个 <code>@MappedTypes</code> 注解指定与其关联的 Java 类型列表。 如果在 <code>javaType</code> 属性中也同时指定，则注解上的配置将被忽略。</li></ul><p><code>JDBC</code>类型绑定：</p><ul><li>在类型处理器的配置元素上增加一个 <code>jdbcType</code> 属性（比如：<code>jdbcType=&quot;VARCHAR&quot;</code>）；</li><li>在类型处理器的类上增加一个 <code>@MappedJdbcTypes</code> 注解指定与其关联的 JDBC 类型列表。 如果在 <code>jdbcType</code> 属性中也同时指定，则注解上的配置将被忽略。</li></ul><p><strong>示例：</strong></p><p>自定义类型处理器类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.probiecoder.config;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.type.JdbcType;<br><span class="hljs-keyword">import</span> org.apache.ibatis.type.TypeHandler;<br><br><span class="hljs-keyword">import</span> java.sql.CallableStatement;<br><span class="hljs-keyword">import</span> java.sql.PreparedStatement;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VarcharTypeHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">TypeHandler</span>&lt;String&gt; &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setParameter</span><span class="hljs-params">(PreparedStatement ps, <span class="hljs-type">int</span> i, String parameter, JdbcType jdbcType)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        ps.setString(i, parameter);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getResult</span><span class="hljs-params">(ResultSet rs, String columnName)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-keyword">return</span> rs.getString(columnName) + <span class="hljs-string">&quot;columnName&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getResult</span><span class="hljs-params">(ResultSet rs, <span class="hljs-type">int</span> columnIndex)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-keyword">return</span> rs.getString(columnIndex) + columnIndex;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getResult</span><span class="hljs-params">(CallableStatement cs, <span class="hljs-type">int</span> columnIndex)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-keyword">return</span> cs.getString(columnIndex) + columnIndex + <span class="hljs-string">&quot;cs&quot;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><code>XML</code>配置文件，声明自定义类型处理器(此处也可以通过 <code>package</code> 指定目录)：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">typeHandlers</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--        &lt;package name=&quot;cn.probiecoder&quot;/&gt;--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">typeHandler</span> <span class="hljs-attr">handler</span>=<span class="hljs-string">&quot;cn.probiecoder.config.VarcharTypeHandler&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;String&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">typeHandlers</span>&gt;</span><br></code></pre></td></tr></table></figure><p>执行结果：</p><p>由于字段<code>name</code>的类型为 <code>VARCHAR</code>，经过自定义类型转换后，拼接了<code>columnName</code></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Student(<span class="hljs-attribute">id</span>=3, <span class="hljs-attribute">name</span>=王麻子columnName, <span class="hljs-attribute">age</span>=8, <span class="hljs-attribute">sex</span>=F, <span class="hljs-attribute">creationDate</span>=2023-10-12T12:10:10)<br></code></pre></td></tr></table></figure><p><strong>枚举类型</strong></p><p>若想映射枚举类型 <code>Enum</code>，则需要从 <code>EnumTypeHandler</code> 或者 <code>EnumOrdinalTypeHandler</code> 中选择一个来使用。</p><p><strong>注意 <code>EnumTypeHandler</code> 在某种意义上来说是比较特别的，其它的处理器只针对某个特定的类，而它不同，它会处理任意继承了 <code>Enum</code> 的类。</strong></p><p>通过源码分析，可以得到<code>EnumTypeHandler</code>用于处理字符串枚举值，<code>EnumOrdinalTypeHandler</code>用于处理<code>int</code>类型的枚举值。</p><p>自定义字符串枚举类：</p><p><strong>注意事项：</strong></p><ul><li>使用自定义枚举类转换时，需要在<code>mappers</code>文件中使用<code>resultMap</code>显示设置<code>typeHandlers</code>为<code>org.apache.ibatis.type.EnumTypeHandler</code></li><li>枚举类的显示名需要和数据库值保持一致</li><li>在<code>config</code>文件中声明<code>typeHandlers</code></li></ul><p>示例：</p><p>枚举类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.probiecoder.enums;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Sex</span> &#123;<br>    M(<span class="hljs-string">&quot;M&quot;</span>),<br>    F(<span class="hljs-string">&quot;F&quot;</span>),<br>    ;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String code;<br><br>    Sex(String code) &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> code;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><code>mappers</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;resultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">typeHandler</span>=<span class="hljs-string">&quot;org.apache.ibatis.type.EnumTypeHandler&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>config</code>配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">typeHandlers</span>&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;package name=&quot;cn.probiecoder&quot;/&gt;--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">typeHandler</span> <span class="hljs-attr">handler</span>=<span class="hljs-string">&quot;cn.probiecoder.config.VarcharTypeHandler&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;String&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">typeHandler</span> <span class="hljs-attr">handler</span>=<span class="hljs-string">&quot;org.apache.ibatis.type.EnumTypeHandler&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;cn.probiecoder.enums.Sex&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">typeHandlers</span>&gt;</span><br></code></pre></td></tr></table></figure><p><a id="objectFactory">四、对象工厂（objectFactory）</a></p><p><code>MyBatis</code>创建结果对象的实例时，会使用一个对象工厂(<code>ObjectFactory</code>)实例来完成实例化工作。默认的对象工厂需要做的仅仅是实例化目标类，要么通过默认无参构造方法，要么通过存在的参数映射来调用带有参数的构造方法。如果想覆盖对象工厂的默认行为，可以通过继承<code>DefaultObjectFactory</code>创建自己的对象工厂。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.probiecoder.config;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.reflection.factory.DefaultObjectFactory;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomerObjectFactory</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">DefaultObjectFactory</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">create</span><span class="hljs-params">(Class&lt;T&gt; type)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;待创建数据类型：&quot;</span> + type.getCanonicalName());<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.create(type);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">create</span><span class="hljs-params">(Class&lt;T&gt; type, List&lt;Class&lt;?&gt;&gt; constructorArgTypes, List&lt;Object&gt; constructorArgs)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.create(type, constructorArgTypes, constructorArgs);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Class&lt;?&gt; resolveInterface(Class&lt;?&gt; type) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.resolveInterface(type);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-type">boolean</span> <span class="hljs-title function_">isCollection</span><span class="hljs-params">(Class&lt;T&gt; type)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.isCollection(type);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setProperties</span><span class="hljs-params">(Properties properties)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;config配置属性 isMybatis 值：&quot;</span> + properties.getProperty(<span class="hljs-string">&quot;isMybatis&quot;</span>));<br>        <span class="hljs-built_in">super</span>.setProperties(properties);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">objectFactory</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;cn.probiecoder.config.CustomerObjectFactory&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;isMybatis&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">objectFactory</span>&gt;</span><br></code></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">config配置属性 isMybatis 值：<span class="hljs-literal">true</span><br>待创建数据类型：java.util.List<br>Student(<span class="hljs-attribute">id</span>=3, <span class="hljs-attribute">name</span>=王麻子, <span class="hljs-attribute">age</span>=8, <span class="hljs-attribute">sex</span>=F, <span class="hljs-attribute">creationDate</span>=2023-10-12T12:10:10)<br></code></pre></td></tr></table></figure><p><a id="plugins">五、插件（plugins）</a></p><p><code>MyBatis</code> 允许在映射语句执行过程中的某一点进行拦截调用。默认情况下，<code>MyBatis</code> 允许使用插件来拦截的方法调用包括：</p><ul><li>接口：<code>org.apache.ibatis.executor.Executor</code><ul><li>拦截方法：<code>update, query, flushStatements, commit, rollback, getTransaction, close, isClosed</code></li></ul></li><li>接口：<code>ParameterHandler</code><ul><li>拦截方法：<code>org.apache.ibatis.executor.parameter.getParameterObject, setParameters</code></li></ul></li><li>接口：<code>ResultSetHandler</code><ul><li>拦截方法：<code>org.apache.ibatis.executor.resultset.handleResultSets, handleOutputParameters</code></li></ul></li><li>接口：<code>StatementHandler</code><ul><li>拦截方法：<code>org.apache.ibatis.executor.statement.prepare, parameterize, batch, update, query</code></li></ul></li></ul><p>插件的使用只需要实现 <code>Interceptor</code> 接口，并指定想要拦截的方法签名即可。</p><p><strong>注意：通过插件修改已有方法的逻辑时，可能会破坏<code>MyBatis</code>的核心模块，所以使用时需要特别当心。</strong></p><p>自定义插件方式如下：</p><ul><li>继承 <code>Interceptor</code></li><li>增加注解 <code>@Intercepts(&#123;@Signature(type=XXX.class, method=&quot;要拦截的接口方法&quot;, args=&#123;拦截方法入参类型&#125;)&#125;)</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.probiecoder.config;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.executor.parameter.ParameterHandler;<br><span class="hljs-keyword">import</span> org.apache.ibatis.plugin.Interceptor;<br><span class="hljs-keyword">import</span> org.apache.ibatis.plugin.Intercepts;<br><span class="hljs-keyword">import</span> org.apache.ibatis.plugin.Invocation;<br><span class="hljs-keyword">import</span> org.apache.ibatis.plugin.Signature;<br><br><span class="hljs-keyword">import</span> java.sql.PreparedStatement;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-meta">@Intercepts(&#123;</span><br><span class="hljs-meta">        @Signature(</span><br><span class="hljs-meta">                type = ParameterHandler.class,</span><br><span class="hljs-meta">                method = &quot;setParameters&quot;,</span><br><span class="hljs-meta">                args = &#123;PreparedStatement.class&#125;</span><br><span class="hljs-meta">        )</span><br><span class="hljs-meta">&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ParameterHandlerPlugin</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Interceptor</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">intercept</span><span class="hljs-params">(Invocation invocation)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>        System.out.println(<span class="hljs-string">&quot;结果执行前参数设置&quot;</span>);<br>        <span class="hljs-keyword">return</span> invocation.proceed();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">plugin</span><span class="hljs-params">(Object target)</span> &#123;<br>        <span class="hljs-keyword">return</span> Interceptor.<span class="hljs-built_in">super</span>.plugin(target);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setProperties</span><span class="hljs-params">(Properties properties)</span> &#123;<br>        Interceptor.<span class="hljs-built_in">super</span>.setProperties(properties);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Mybatis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【MyBatis专题】专题三：XML映射文件(mapper)</title>
    <link href="/mybatis/mapper.html"/>
    <url>/mybatis/mapper.html</url>
    
    <content type="html"><![CDATA[<p>一个空的<code>Mapper</code>文件结构如下，需要指定命名空间，且命名空间需要<strong>唯一</strong>，命名空间会和<code>Java</code>接口绑定，一般会添加注解<code>@Mapper</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;cn.probiecoder.mapper.StudentMapper&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>SQL</code>映射文件支持的顶级节点元素(按照应被定义的顺序列出):</p><ul><li><code>cache</code>-命名空间的缓存配置</li><li><code>cache-ref</code>– 引用其它命名空间的缓存配置</li><li><code>resultMap</code> - 描述如何从数据库结果集中加载对象，是最复杂也是最强大的元素。</li><li><code>sql</code>– 可被其它语句引用的可重用语句块。</li><li><code>insert</code>– 映射插入语句</li><li><code>update</code>– 映射更新语句</li><li><code>delete</code>– 映射删除语句</li><li><code>select</code>– 映射查询语句</li></ul><h3 id="一、select"><a href="#一、select" class="headerlink" title="一、select"></a>一、select</h3><p>一个简单的常用的<code>select</code>配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;&quot;</span> &gt;</span><br>    select * from student where name = #&#123;name&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>完整的属性配置和介绍：</p><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>id</code></td><td align="left">在命名空间中唯一的标识符，可以被用来引用这条语句。</td></tr><tr><td align="left"><code>parameterType</code></td><td align="left">将会传入这条语句的参数的类全限定名或别名。这个属性是可选的，因为 MyBatis 可以根据语句中实际传入的参数计算出应该使用的类型处理器（TypeHandler），默认值为未设置（unset）。</td></tr><tr><td align="left"><code>resultType</code></td><td align="left">期望从这条语句中返回结果的类全限定名或别名。 注意，如果返回的是集合，那应该设置为集合包含的类型，而不是集合本身的类型。 resultType 和 resultMap 之间只能同时使用一个。</td></tr><tr><td align="left"><code>resultMap</code></td><td align="left">对外部 resultMap 的命名引用。结果映射是 MyBatis 最强大的特性，如果你对其理解透彻，许多复杂的映射问题都能迎刃而解。 resultType 和 resultMap 之间只能同时使用一个。</td></tr><tr><td align="left"><code>flushCache</code></td><td align="left">将其设置为 true 后，只要语句被调用，都会导致本地缓存和二级缓存被清空，默认值：false。</td></tr><tr><td align="left"><code>useCache</code></td><td align="left">将其设置为 true 后，将会导致本条语句的结果被二级缓存缓存起来，默认值：对 select 元素为 true。</td></tr><tr><td align="left"><code>timeout</code></td><td align="left">这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为未设置（unset）（依赖数据库驱动）。</td></tr><tr><td align="left"><code>fetchSize</code></td><td align="left">这是一个给驱动的建议值，尝试让驱动程序每次批量返回的结果行数等于这个设置值。 默认值为未设置（unset）（依赖驱动）。</td></tr><tr><td align="left"><code>statementType</code></td><td align="left">可选 STATEMENT，PREPARED 或 CALLABLE。这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED。</td></tr><tr><td align="left"><code>resultSetType</code></td><td align="left">FORWARD_ONLY，SCROLL_SENSITIVE, SCROLL_INSENSITIVE 或 DEFAULT（等价于 unset） 中的一个，默认值为 unset （依赖数据库驱动）。</td></tr><tr><td align="left"><code>resultOrdered</code></td><td align="left">这个设置仅针对嵌套结果 select 语句：如果为 true，则假设结果集以正确顺序（排序后）执行映射，当返回新的主结果行时，将不再发生对以前结果行的引用。 这样可以减少内存消耗。默认值：<code>false</code>。</td></tr><tr><td align="left"><code>resultSets</code></td><td align="left">这个设置仅适用于多结果集的情况。它将列出语句执行后返回的结果集并赋予每个结果集一个名称，多个名称之间以逗号分隔。</td></tr></tbody></table><h3 id="二、insert、update、delete"><a href="#二、insert、update、delete" class="headerlink" title="二、insert、update、delete"></a>二、insert、update、delete</h3><p>对于<code>insert</code>、<code>update</code>、<code>delete</code>一般使用中只需要指定id即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    SQL语句<br><span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    SQL语句<br><span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>SQL语句<br><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br></code></pre></td></tr></table></figure><p>支持的属性配置如下：</p><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>id</code></td><td align="left">在命名空间中唯一的标识符，可以被用来引用这条语句。</td></tr><tr><td align="left"><code>parameterType</code></td><td align="left">将会传入这条语句的参数的类全限定名或别名。这个属性是可选的，因为 MyBatis 可以根据语句中实际传入的参数计算出应该使用的类型处理器（TypeHandler），默认值为未设置（unset）。</td></tr><tr><td align="left"><code>flushCache</code></td><td align="left">将其设置为 true 后，只要语句被调用，都会导致本地缓存和二级缓存被清空，默认值：（对 insert、update 和 delete 语句）true。</td></tr><tr><td align="left"><code>timeout</code></td><td align="left">这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为未设置（unset）（依赖数据库驱动）。</td></tr><tr><td align="left"><code>statementType</code></td><td align="left">可选 STATEMENT，PREPARED 或 CALLABLE。这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED。</td></tr><tr><td align="left"><code>useGeneratedKeys</code></td><td align="left">（仅适用于 insert 和 update）这会令 MyBatis 使用 JDBC 的 getGeneratedKeys 方法来取出由数据库内部生成的主键（比如：像 MySQL 和 SQL Server 这样的关系型数据库管理系统的自动递增字段），默认值：false。</td></tr><tr><td align="left"><code>keyProperty</code></td><td align="left">（仅适用于 insert 和 update）指定能够唯一识别对象的属性，MyBatis 会使用 getGeneratedKeys 的返回值或 insert 语句的 selectKey 子元素设置它的值，默认值：未设置（<code>unset</code>）。如果生成列不止一个，可以用逗号分隔多个属性名称。</td></tr><tr><td align="left"><code>keyColumn</code></td><td align="left">（仅适用于 insert 和 update）设置生成键值在表中的列名，在某些数据库（像 PostgreSQL）中，当主键列不是表中的第一列的时候，是必须设置的。如果生成列不止一个，可以用逗号分隔多个属性名称。</td></tr></tbody></table><h3 id="sql"><a href="#sql" class="headerlink" title="sql"></a>sql</h3><p>定义可重用的 SQL 代码片段，以便在其它语句中使用。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;resultColumn&quot;</span>&gt;</span><br>    select id, name, age,sex,creation_date<br><span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在<code>select</code>、<code>update</code>、<code>delete</code>、<code>inserst</code>中使用<code>&lt;include refid=&quot;&quot;&gt;</code>引用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectByName&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;resultMap&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;resultColumn&quot;</span> /&gt;</span><br>    from student where name = #&#123;name&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="结果映射-resultMap"><a href="#结果映射-resultMap" class="headerlink" title="结果映射(resultMap)"></a>结果映射(resultMap)</h3><p>相比与<code>ResultType</code>结果映射来说，<code>ResultMap</code>拥有更强的表现能力。</p><p>支持的节点配置：</p><ul><li><p><code>constructor</code> - 用于在实例化类时，注入结果到构造方法中</p><ul><li><code>idArg</code> - ID 参数；标记出作为 ID 的结果可以帮助提高整体性能</li><li><code>arg</code> - 将被注入到构造方法的一个普通结果</li></ul></li><li><p><code>id</code> – 一个 ID 结果；标记出作为 ID 的结果可以帮助提高整体性能</p></li><li><p><code>result</code> – 注入到字段或 JavaBean 属性的普通结果</p></li><li><p><code>association</code> – 一个复杂类型的关联；许多结果将包装成这种类型</p><ul><li>嵌套结果映射 – 关联可以是 <code>resultMap</code> 元素，或是对其它结果映射的引用</li></ul></li><li><p><code>collection</code> – 一个复杂类型的集合z</p><ul><li>嵌套结果映射 – 集合可以是 <code>resultMap</code> 元素，或是对其它结果映射的引用</li></ul></li><li><p><code>discriminator</code> – 使用结果值来决定使用哪个<code>resultMap</code></p><ul><li><code>case</code> – 基于某些值的结果映射<ul><li>嵌套结果映射 – <code>case</code> 也是一个结果映射，因此具有相同的结构和元素；或者引用其它的结果映射</li></ul></li></ul><p>​<code>ResultMap</code> 的属性列表</p></li></ul><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>id</code></td><td align="left">当前命名空间中的一个唯一标识，用于标识一个结果映射。</td></tr><tr><td align="left"><code>type</code></td><td align="left">类的完全限定名, 或者一个类型别名（关于内置的类型别名，可以参考上面的表格）。</td></tr><tr><td align="left"><code>autoMapping</code></td><td align="left">如果设置这个属性，MyBatis 将会为本结果映射开启或者关闭自动映射。 这个属性会覆盖全局的属性 autoMappingBehavior。默认值：未设置（unset）。</td></tr></tbody></table><h4 id="1、id-result"><a href="#1、id-result" class="headerlink" title="1、id &amp; result"></a>1、id &amp; result</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;post_id&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;subject&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;post_subject&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>​</p><p>​Id 和 Result 的属性</p><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>property</code></td><td align="left">映射到列结果的字段或属性。如果 JavaBean 有这个名字的属性（property），会先使用该属性。否则 MyBatis 将会寻找给定名称的字段（field）。 无论是哪一种情形，你都可以使用常见的点式分隔形式进行复杂属性导航。 比如，你可以这样映射一些简单的东西：“username”，或者映射到一些复杂的东西上：“address.street.number”。</td></tr><tr><td align="left"><code>column</code></td><td align="left">数据库中的列名，或者是列的别名。一般情况下，这和传递给 <code>resultSet.getString(columnName)</code> 方法的参数一样。</td></tr><tr><td align="left"><code>javaType</code></td><td align="left">一个 Java 类的全限定名，或一个类型别名（关于内置的类型别名，可以参考上面的表格）。 如果你映射到一个 JavaBean，MyBatis 通常可以推断类型。然而，如果你映射到的是 HashMap，那么你应该明确地指定 javaType 来保证行为与期望的相一致。</td></tr><tr><td align="left"><code>jdbcType</code></td><td align="left">JDBC 类型，所支持的 JDBC 类型参见这个表格之后的“支持的 JDBC 类型”。 只需要在可能执行插入、更新和删除的且允许空值的列上指定 JDBC 类型。这是 JDBC 的要求而非 MyBatis 的要求。如果你直接面向 JDBC 编程，你需要对可以为空值的列指定这个类型。</td></tr><tr><td align="left"><code>typeHandler</code></td><td align="left">我们在前面讨论过默认的类型处理器。使用这个属性，你可以覆盖默认的类型处理器。 这个属性值是一个类型处理器实现类的全限定名，或者是类型别名。</td></tr></tbody></table><p>示例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;resultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">typeHandler</span>=<span class="hljs-string">&quot;org.apache.ibatis.type.EnumTypeHandler&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2、constructor"><a href="#2、constructor" class="headerlink" title="2、constructor"></a>2、constructor</h4><p>构造方法注入允许在初始化时为类设置属性的值，而不用暴露出公有方法。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">constructor</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">idArg</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;int&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">arg</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;String&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">arg</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;_int&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">constructor</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3、关联-association"><a href="#3、关联-association" class="headerlink" title="3、关联 association"></a>3、关联 association</h4><p>关联一般为主对象中某个属性也是一个对象。</p><p>关联的不同之处是，你需要告诉 MyBatis 如何加载关联。MyBatis 有两种不同的方式加载关联：</p><ul><li>嵌套 Select 查询：通过执行另外一个 SQL 映射语句来加载期望的复杂类型。</li><li>嵌套结果映射：使用嵌套的结果映射来处理连接结果的重复子集。</li></ul><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>property</code></td><td align="left">映射到列结果的字段或属性。如果用来匹配的 JavaBean 存在给定名字的属性，那么它将会被使用。否则 MyBatis 将会寻找给定名称的字段。 无论是哪一种情形，你都可以使用通常的点式分隔形式进行复杂属性导航。 比如，你可以这样映射一些简单的东西：“username”，或者映射到一些复杂的东西上：“address.street.number”。</td></tr><tr><td align="left"><code>javaType</code></td><td align="left">一个 Java 类的完全限定名，或一个类型别名（关于内置的类型别名，可以参考上面的表格）。 如果你映射到一个 JavaBean，MyBatis 通常可以推断类型。然而，如果你映射到的是 HashMap，那么你应该明确地指定 javaType 来保证行为与期望的相一致。</td></tr><tr><td align="left"><code>jdbcType</code></td><td align="left">JDBC 类型，所支持的 JDBC 类型参见这个表格之前的“支持的 JDBC 类型”。 只需要在可能执行插入、更新和删除的且允许空值的列上指定 JDBC 类型。这是 JDBC 的要求而非 MyBatis 的要求。如果你直接面向 JDBC 编程，你需要对可能存在空值的列指定这个类型。</td></tr><tr><td align="left"><code>typeHandler</code></td><td align="left">我们在前面讨论过默认的类型处理器。使用这个属性，你可以覆盖默认的类型处理器。 这个属性值是一个类型处理器实现类的完全限定名，或者是类型别名。</td></tr></tbody></table><h5 id="关联的嵌套结果映射"><a href="#关联的嵌套结果映射" class="headerlink" title="关联的嵌套结果映射"></a>关联的嵌套结果映射</h5><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>resultMap</code></td><td align="left">结果映射的 ID，可以将此关联的嵌套结果集映射到一个合适的对象树中。 它可以作为使用额外 select 语句的替代方案。它可以将多表连接操作的结果映射成一个单一的 <code>ResultSet</code>。这样的 <code>ResultSet</code> 有部分数据是重复的。 为了将结果集正确地映射到嵌套的对象树中, MyBatis 允许你“串联”结果映射，以便解决嵌套结果集的问题。使用嵌套结果映射的一个例子在表格以后。</td></tr><tr><td align="left"><code>columnPrefix</code></td><td align="left">当连接多个表时，你可能会不得不使用列别名来避免在 <code>ResultSet</code> 中产生重复的列名。指定 columnPrefix 列名前缀允许你将带有这些前缀的列映射到一个外部的结果映射中。 详细说明请参考后面的例子。</td></tr><tr><td align="left"><code>notNullColumn</code></td><td align="left">默认情况下，在至少一个被映射到属性的列不为空时，子对象才会被创建。 你可以在这个属性上指定非空的列来改变默认行为，指定后，Mybatis 将只在这些列中任意一列非空时才创建一个子对象。可以使用逗号分隔来指定多个列。默认值：未设置（unset）。</td></tr><tr><td align="left"><code>autoMapping</code></td><td align="left">如果设置这个属性，MyBatis 将会为本结果映射开启或者关闭自动映射。 这个属性会覆盖全局的属性 autoMappingBehavior。注意，本属性对外部的结果映射无效，所以不能搭配 <code>select</code> 或 <code>resultMap</code> 元素使用。默认值：未设置（unset）。</td></tr></tbody></table><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Grade</span> &#123;<br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String name;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> Sex sex;<br>    <span class="hljs-keyword">private</span> Grade grade;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectByName&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;resultMap&quot;</span>&gt;</span><br>    select s.id, s.name, s.age, s.sex, g.id g_id, g.name g_name<br>    from student s left join grade g on s.grade_id = g.id where s.name = #&#123;name&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;resultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;age&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">typeHandler</span>=<span class="hljs-string">&quot;org.apache.ibatis.type.EnumTypeHandler&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;grade&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;grade&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;gradeResultMap&quot;</span> <span class="hljs-attr">columnPrefix</span>=<span class="hljs-string">&quot;g_&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;gradeResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;cn.probiecoder.entity.Grade&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="4、集合-collection"><a href="#4、集合-collection" class="headerlink" title="4、集合 collection"></a>4、集合 collection</h4><p>集合类似与关联<code>association</code>，只是关系表现为：一对多的关系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span> &#123;<br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> List&lt;Student&gt; students;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> Sex sex;<br>&#125;<br></code></pre></td></tr></table></figure><p>联表查询语句：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectStudentByTeacherId&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;teachResultMap&quot;</span>&gt;</span><br>    select t.id t_id, t.name t_name,s.id s_id, s.name s_name,s.age s_age,<br>    s.sex s_sex, s.creation_date s_creation_date,s.teacher_id s_teacher_id<br>    from teacher t left outer join student s on t.id = s.teacher_id where t.id = #&#123;teacherId&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>结果集映射：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;resultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Student&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;age&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">typeHandler</span>=<span class="hljs-string">&quot;org.apache.ibatis.type.EnumTypeHandler&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;teachResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;cn.probiecoder.entity.Teacher&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;t_id&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;t_name&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;students&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;Student&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;resultMap&quot;</span> <span class="hljs-attr">columnPrefix</span>=<span class="hljs-string">&quot;s_&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><code>ofType</code>指定列表中元素的类型</li><li><code>resultMap</code>复用已有的结果集映射<code>map</code>，也可以直接在<code>collection</code>节点下设置结果字段映射关系</li><li><code>columnPrefix</code>联表查询时，不同表的字段会相同，为了区分会增加前缀，通过<code>columnPrefix</code>在映射到关联数据集时会自动处理前缀，实现关联表结果集映射复用</li></ul><p>来源：<a href="https://mybatis.org/mybatis-3/zh/sqlmap-xml.html">https://mybatis.org/mybatis-3/zh/sqlmap-xml.html</a></p>]]></content>
    
    
    <categories>
      
      <category>Mybatis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【MyBatis专题】专题四：动态SQL</title>
    <link href="/mybatis/dynamic.html"/>
    <url>/mybatis/dynamic.html</url>
    
    <content type="html"><![CDATA[<h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><p>根据<code>test</code>条件决定是否包含标签内语句</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null and author.name != null&quot;</span>&gt;</span><br>    AND author_name like #&#123;author.name&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="choose、when、otherwise"><a href="#choose、when、otherwise" class="headerlink" title="choose、when、otherwise"></a>choose、when、otherwise</h3><p>如果想从多个条件中选择一个使用可以考虑使用 <code>choose</code>、<code>when</code>、<code>otherwise</code>，语法类似于<code>Java</code>中的<code>switch</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">choose</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span><br>      AND title like #&#123;title&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null and author.name != null&quot;</span>&gt;</span><br>      AND author_name like #&#123;author.name&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">otherwise</span>&gt;</span><br>      AND featured = 1<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">otherwise</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">choose</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="where"><a href="#where" class="headerlink" title="where"></a>where</h3><p><code>&lt;where&gt;</code>标签解决的问题是当标签<code>if</code>所有条件都不满足或者中间部分条件满足时，自动去除子句中的<code>AND</code>或 <code>OR</code>或<code>where</code>，<code>&lt;where&gt;</code>素只会在子元素返回任何内容的情况下才插入 “WHERE” 子句。</p><p>例如如下示例，当<code>title</code>为空，<code>author</code>不为空时，不使用<code>&lt;where&gt;</code>标签时，<code>SQL</code>语句为：<code>select xxx from xxx where and author = ?</code>，很明显<code>where</code>子句中多了一个<code>and</code>语法错误；使用<code>&lt;where&gt;</code>标签时，<code>MyBatis</code>会自动移除子句中多余的<code>and</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span><br>    and title = #&#123;title&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null&quot;</span>&gt;</span><br>        and author = #&#123;author&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h3><p>如果 <em>where</em> 元素与期望的不太一样时，也可以通过自定义 trim 元素来定制 <em>where</em> 元素的功能。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;SET&quot;</span> <span class="hljs-attr">suffixOverrides</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null&quot;</span>&gt;</span>name = #&#123;name&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;age != null&quot;</span>&gt;</span>age = #&#123;age&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><code>prefix</code>语句拼接前缀</li><li><code>prefixOverrides</code>移除指定前缀字符</li><li><code>suffix</code>语句拼接后缀字符</li><li><code>suffixOverrides</code>移除指定后缀字符</li></ul><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p><code>set</code>用于动态语句更新，<code>set</code>元素会动态地在行首插入 <code>SET</code> 关键字，并会删掉额外的逗号</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">set</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null&quot;</span>&gt;</span>name = #&#123;name&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;age != null&quot;</span>&gt;</span>age = #&#123;age&#125;,<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h3><p>需要对一个集合进行遍历时可以使用<code>foreach</code>语法进行循环处理(常见与<code>IN</code>参数拼接)；允许指定一个集合，声明可以在元素体内使用的集合项（item）和索引（index）变量</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;item&quot;</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;index&quot;</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;list&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;ID in (&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span> <span class="hljs-attr">nullable</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>      #&#123;item&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><code>item</code>集合中的元素</li><li><code>index</code>元素索引位置</li><li><code>list</code>需要遍历的集合，支持<code>List</code>、<code>Map</code>、<code>Set</code>或数组，为<code>Map</code>时，<code>index</code>是键，<code>item</code>是值</li><li><code>open</code>拼接结果左边开始字符</li><li><code>close</code>拼接结果右边结束字符</li></ul><p>来源：<a href="https://mybatis.org/mybatis-3/zh/dynamic-sql.html">https://mybatis.org/mybatis-3/zh/dynamic-sql.html</a></p>]]></content>
    
    
    <categories>
      
      <category>Mybatis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【MyBatis专题】专题五：问题答疑</title>
    <link href="/mybatis/problems.html"/>
    <url>/mybatis/problems.html</url>
    
    <content type="html"><![CDATA[<h3 id="问题一：MyBatis日志配置"><a href="#问题一：MyBatis日志配置" class="headerlink" title="问题一：MyBatis日志配置"></a>问题一：MyBatis日志配置</h3><p>Mybatis 通过使用内置的日志工厂提供日志功能。内置日志工厂将会把日志工作委托给下面的实现之一：</p><ul><li>SLF4J</li><li>Apache Commons Logging</li><li>Log4j 2</li><li>JDK logging</li></ul><p>MyBatis 内置日志工厂基于运行时自省机制选择合适的日志工具。它会使用第一个查找得到的工具（按上文列举的顺序查找）。如果一个都未找到，日志功能就会被禁用。</p><p>如果类路径中存在多个符合条件的日志工具时，可以通过在<code>MyBatis</code> 配置文件 <code>mybatis-config.xml</code> 里面添加一项 <code>setting</code> 来选择别的日志工具。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>    ...<br>    <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;logImpl&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;LOG4J&quot;</span>/&gt;</span><br>    ...<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>logImpl</code> 可选的值有：<code>SLF4J、LOG4J、LOG4J2、JDK_LOGGING、COMMONS_LOGGING、STDOUT_LOGGING、NO_LOGGING</code>，或者是实现了接口 <code>org.apache.ibatis.logging.Log</code> 的，且构造方法是以字符串为参数的类的完全限定名。</p><p>使用Log4j2配置日志示例：</p><p><code>pom.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.x.x<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>log4j2.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Configuration</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://logging.apache.org/log4j/2.0/config&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Appenders</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Console</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;stdout&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;SYSTEM_OUT&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">PatternLayout</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;%5level [%t] - %msg%n&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">Console</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">Appenders</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Loggers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;cn.probiecoder.mapper.StudentMapper&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;debug&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span> &gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">AppenderRef</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;stdout&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">Root</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">Loggers</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">Configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>日志知识来源：<a href="https://mybatis.org/mybatis-3/zh/logging.html">https://mybatis.org/mybatis-3/zh/logging.html</a></p><h3 id="问题二、参数设置中-和-的区别"><a href="#问题二、参数设置中-和-的区别" class="headerlink" title="问题二、参数设置中 #{} 和 ${}的区别"></a>问题二、参数设置中 #{} 和 ${}的区别</h3><ul><li><p><code>#&#123;&#125;</code>会在<code>build</code>阶段将参数用占位符<code>?</code>替换，在<code>ParameterHandler.setParameters</code>阶段将实际的值进行设置，设置时会按照字段数据类型进行设置，即如果传入的参数值为一段SQL，由于数据类型为<code>VARCHAR</code>会被引号包括，失去<code>SQL</code>注入的能力。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">TypeHandler</span> <span class="hljs-variable">typeHandler</span> <span class="hljs-operator">=</span> parameterMapping.getTypeHandler();<br><span class="hljs-type">JdbcType</span> <span class="hljs-variable">jdbcType</span> <span class="hljs-operator">=</span> parameterMapping.getJdbcType();<br><span class="hljs-keyword">if</span> (value == <span class="hljs-literal">null</span> &amp;&amp; jdbcType == <span class="hljs-literal">null</span>) &#123;<br>  jdbcType = configuration.getJdbcTypeForNull();<br>&#125;<br><span class="hljs-keyword">try</span> &#123;<br>  typeHandler.setParameter(ps, i + <span class="hljs-number">1</span>, value, jdbcType);<br>&#125;<br></code></pre></td></tr></table></figure><p>那么<code>SQL</code>语句的参数在什么时候进行替换的呢？</p><p>时间节点发生在<code>SqlSessionFactoryBuilder().build()</code>构造阶段，在处理<code>mapper</code>文件中各个模块时，会判断参数格式是否为 <code>#&#123;&#125;</code>形式，如果是会将对应参数替换为问号 <code>?</code>(<code>SqlSourceBuilder.parse(String originalSql, Class&lt;?&gt; parameterType, Map&lt;String, Object&gt; additionalParameters)</code>) </p></li><li><p><code>$&#123;&#125;</code>不会在<code>build</code>阶段进行替换，而是在实际调用<code>mapper</code>语句时，将<code>$&#123;&#125;</code>替换为实际的数据值，替换发生在 <code>TextSqlNode.apply</code>处；替换时直接将参数用实际值替换，即如果参数值为 <code>or 1 = 1</code>的形式，最终形成的<code>SQL</code>就会包含这一段合法的<code>SQL</code>逻辑，进而产生<code>SQL</code>注入的问题</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Mybatis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
